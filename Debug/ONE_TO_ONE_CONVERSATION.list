
ONE_TO_ONE_CONVERSATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067ac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  0800697c  0800697c  0001697c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b20  08006b20  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006b20  08006b20  00016b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b28  08006b28  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b28  08006b28  00016b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b2c  08006b2c  00016b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000082b4  20000068  08006b98  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000831c  08006b98  0002831c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017464  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000371a  00000000  00000000  0003753f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e8  00000000  00000000  0003ac60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f6f  00000000  00000000  0003c048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000404c  00000000  00000000  0003cfb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000180cf  00000000  00000000  00041003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc5f8  00000000  00000000  000590d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055a8  00000000  00000000  001356cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0013ac74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006964 	.word	0x08006964

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08006964 	.word	0x08006964

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08a      	sub	sp, #40	; 0x28
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000512:	4b26      	ldr	r3, [pc, #152]	; (80005ac <MX_CAN1_Init+0xa0>)
 8000514:	4a26      	ldr	r2, [pc, #152]	; (80005b0 <MX_CAN1_Init+0xa4>)
 8000516:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000518:	4b24      	ldr	r3, [pc, #144]	; (80005ac <MX_CAN1_Init+0xa0>)
 800051a:	2210      	movs	r2, #16
 800051c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800051e:	4b23      	ldr	r3, [pc, #140]	; (80005ac <MX_CAN1_Init+0xa0>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000524:	4b21      	ldr	r3, [pc, #132]	; (80005ac <MX_CAN1_Init+0xa0>)
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 800052a:	4b20      	ldr	r3, [pc, #128]	; (80005ac <MX_CAN1_Init+0xa0>)
 800052c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000530:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000532:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <MX_CAN1_Init+0xa0>)
 8000534:	2200      	movs	r2, #0
 8000536:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <MX_CAN1_Init+0xa0>)
 800053a:	2200      	movs	r2, #0
 800053c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800053e:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <MX_CAN1_Init+0xa0>)
 8000540:	2200      	movs	r2, #0
 8000542:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000544:	4b19      	ldr	r3, [pc, #100]	; (80005ac <MX_CAN1_Init+0xa0>)
 8000546:	2200      	movs	r2, #0
 8000548:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <MX_CAN1_Init+0xa0>)
 800054c:	2200      	movs	r2, #0
 800054e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <MX_CAN1_Init+0xa0>)
 8000552:	2200      	movs	r2, #0
 8000554:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <MX_CAN1_Init+0xa0>)
 8000558:	2200      	movs	r2, #0
 800055a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800055c:	4813      	ldr	r0, [pc, #76]	; (80005ac <MX_CAN1_Init+0xa0>)
 800055e:	f001 fc17 	bl	8001d90 <HAL_CAN_Init>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000568:	f001 fa38 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  // Configure CAN filter to accept all messages
  	CAN_FilterTypeDef sFilterConfig;
  	sFilterConfig.FilterBank = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
  	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
  	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000574:	2301      	movs	r3, #1
 8000576:	61fb      	str	r3, [r7, #28]
  	sFilterConfig.FilterIdHigh = 0x0000;
 8000578:	2300      	movs	r3, #0
 800057a:	603b      	str	r3, [r7, #0]
  	sFilterConfig.FilterIdLow = 0x0000;
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
  	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
  	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
  	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000588:	2300      	movs	r3, #0
 800058a:	613b      	str	r3, [r7, #16]
  	sFilterConfig.FilterActivation = ENABLE;
 800058c:	2301      	movs	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
  	sFilterConfig.SlaveStartFilterBank = 14; // Filter bank 14 for F303RE
 8000590:	230e      	movs	r3, #14
 8000592:	627b      	str	r3, [r7, #36]	; 0x24
  	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8000594:	463b      	mov	r3, r7
 8000596:	4619      	mov	r1, r3
 8000598:	4804      	ldr	r0, [pc, #16]	; (80005ac <MX_CAN1_Init+0xa0>)
 800059a:	f001 fcf5 	bl	8001f88 <HAL_CAN_ConfigFilter>
  		// Filter configuration error handling
  	}

  	// Start the CAN peripheral
  	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800059e:	4803      	ldr	r0, [pc, #12]	; (80005ac <MX_CAN1_Init+0xa0>)
 80005a0:	f001 fdd2 	bl	8002148 <HAL_CAN_Start>
  		// Start error handling
  	}

  /* USER CODE END CAN1_Init 2 */

}
 80005a4:	bf00      	nop
 80005a6:	3728      	adds	r7, #40	; 0x28
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000084 	.word	0x20000084
 80005b0:	40006400 	.word	0x40006400

080005b4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a21      	ldr	r2, [pc, #132]	; (8000658 <HAL_CAN_MspInit+0xa4>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d13c      	bne.n	8000650 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	4b20      	ldr	r3, [pc, #128]	; (800065c <HAL_CAN_MspInit+0xa8>)
 80005dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005de:	4a1f      	ldr	r2, [pc, #124]	; (800065c <HAL_CAN_MspInit+0xa8>)
 80005e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005e4:	6413      	str	r3, [r2, #64]	; 0x40
 80005e6:	4b1d      	ldr	r3, [pc, #116]	; (800065c <HAL_CAN_MspInit+0xa8>)
 80005e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	4b19      	ldr	r3, [pc, #100]	; (800065c <HAL_CAN_MspInit+0xa8>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a18      	ldr	r2, [pc, #96]	; (800065c <HAL_CAN_MspInit+0xa8>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b16      	ldr	r3, [pc, #88]	; (800065c <HAL_CAN_MspInit+0xa8>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800060e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000614:	2302      	movs	r3, #2
 8000616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800061c:	2303      	movs	r3, #3
 800061e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000620:	2309      	movs	r3, #9
 8000622:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4619      	mov	r1, r3
 800062a:	480d      	ldr	r0, [pc, #52]	; (8000660 <HAL_CAN_MspInit+0xac>)
 800062c:	f002 fbbc 	bl	8002da8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000630:	2200      	movs	r2, #0
 8000632:	2105      	movs	r1, #5
 8000634:	2014      	movs	r0, #20
 8000636:	f002 fafb 	bl	8002c30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800063a:	2014      	movs	r0, #20
 800063c:	f002 fb14 	bl	8002c68 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2105      	movs	r1, #5
 8000644:	2015      	movs	r0, #21
 8000646:	f002 faf3 	bl	8002c30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800064a:	2015      	movs	r0, #21
 800064c:	f002 fb0c 	bl	8002c68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000650:	bf00      	nop
 8000652:	3728      	adds	r7, #40	; 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40006400 	.word	0x40006400
 800065c:	40023800 	.word	0x40023800
 8000660:	40020000 	.word	0x40020000

08000664 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	4a07      	ldr	r2, [pc, #28]	; (8000690 <vApplicationGetIdleTaskMemory+0x2c>)
 8000674:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	4a06      	ldr	r2, [pc, #24]	; (8000694 <vApplicationGetIdleTaskMemory+0x30>)
 800067a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2280      	movs	r2, #128	; 0x80
 8000680:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000682:	bf00      	nop
 8000684:	3714      	adds	r7, #20
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	200000b0 	.word	0x200000b0
 8000694:	20000150 	.word	0x20000150

08000698 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000698:	b5b0      	push	{r4, r5, r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <MX_FREERTOS_Init+0x30>)
 80006a0:	1d3c      	adds	r4, r7, #4
 80006a2:	461d      	mov	r5, r3
 80006a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f004 fe20 	bl	80052fa <osThreadCreate>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a03      	ldr	r2, [pc, #12]	; (80006cc <MX_FREERTOS_Init+0x34>)
 80006be:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80006c0:	bf00      	nop
 80006c2:	3720      	adds	r7, #32
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bdb0      	pop	{r4, r5, r7, pc}
 80006c8:	08006988 	.word	0x08006988
 80006cc:	200000ac 	.word	0x200000ac

080006d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006d8:	2001      	movs	r0, #1
 80006da:	f004 fe5a 	bl	8005392 <osDelay>
 80006de:	e7fb      	b.n	80006d8 <StartDefaultTask+0x8>

080006e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	4b2d      	ldr	r3, [pc, #180]	; (80007b0 <MX_GPIO_Init+0xd0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a2c      	ldr	r2, [pc, #176]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b2a      	ldr	r3, [pc, #168]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a25      	ldr	r2, [pc, #148]	; (80007b0 <MX_GPIO_Init+0xd0>)
 800071c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a1e      	ldr	r2, [pc, #120]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2120      	movs	r1, #32
 800076a:	4812      	ldr	r0, [pc, #72]	; (80007b4 <MX_GPIO_Init+0xd4>)
 800076c:	f002 fcb0 	bl	80030d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000776:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800077a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	480c      	ldr	r0, [pc, #48]	; (80007b8 <MX_GPIO_Init+0xd8>)
 8000788:	f002 fb0e 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800078c:	2320      	movs	r3, #32
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_GPIO_Init+0xd4>)
 80007a4:	f002 fb00 	bl	8002da8 <HAL_GPIO_Init>

}
 80007a8:	bf00      	nop
 80007aa:	3728      	adds	r7, #40	; 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020000 	.word	0x40020000
 80007b8:	40020800 	.word	0x40020800

080007bc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007c2:	f001 faa3 	bl	8001d0c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007c6:	f000 f839 	bl	800083c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007ca:	f7ff ff89 	bl	80006e0 <MX_GPIO_Init>
	MX_CAN1_Init();
 80007ce:	f7ff fe9d 	bl	800050c <MX_CAN1_Init>
	MX_USART2_UART_Init();
 80007d2:	f001 f9f7 	bl	8001bc4 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80007d6:	2102      	movs	r1, #2
 80007d8:	4810      	ldr	r0, [pc, #64]	; (800081c <main+0x60>)
 80007da:	f001 ff1b 	bl	8002614 <HAL_CAN_ActivateNotification>
	Display_Menu();
	HAL_UART_Receive_IT(&huart2, &Menu_Letter, 1);
	CanTp_setCallback(UDS_Client_Callback);
	xTaskCreate(UDS_MainFunction, "UDS_RX", configMINIMAL_STACK_SIZE,NULL, 2, &xTaskHandle3) ;
#else
	CanTp_setCallback(server_call_back);
 80007de:	4810      	ldr	r0, [pc, #64]	; (8000820 <main+0x64>)
 80007e0:	f000 faf0 	bl	8000dc4 <CanTp_setCallback>
#endif
	//HAL_UART_Receive_IT(&huart2,(uint8_t*)&rxData, 1);


	xTaskCreate(CanIf_Receive, "CANIf_RX", configMINIMAL_STACK_SIZE,NULL, 2, &xTaskHandle1) ;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <main+0x68>)
 80007e6:	9301      	str	r3, [sp, #4]
 80007e8:	2302      	movs	r3, #2
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	2300      	movs	r3, #0
 80007ee:	2280      	movs	r2, #128	; 0x80
 80007f0:	490d      	ldr	r1, [pc, #52]	; (8000828 <main+0x6c>)
 80007f2:	480e      	ldr	r0, [pc, #56]	; (800082c <main+0x70>)
 80007f4:	f004 fef2 	bl	80055dc <xTaskCreate>
	xTaskCreate(CanTp_MainFunction, "CANTp_RX", configMINIMAL_STACK_SIZE,NULL, 3, &xTaskHandle2) ;
 80007f8:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <main+0x74>)
 80007fa:	9301      	str	r3, [sp, #4]
 80007fc:	2303      	movs	r3, #3
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	2300      	movs	r3, #0
 8000802:	2280      	movs	r2, #128	; 0x80
 8000804:	490b      	ldr	r1, [pc, #44]	; (8000834 <main+0x78>)
 8000806:	480c      	ldr	r0, [pc, #48]	; (8000838 <main+0x7c>)
 8000808:	f004 fee8 	bl	80055dc <xTaskCreate>
	CanTp_Init();
 800080c:	f000 f94a 	bl	8000aa4 <CanTp_Init>

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8000810:	f7ff ff42 	bl	8000698 <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 8000814:	f004 fd6a 	bl	80052ec <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000818:	e7fe      	b.n	8000818 <main+0x5c>
 800081a:	bf00      	nop
 800081c:	20000084 	.word	0x20000084
 8000820:	080015bd 	.word	0x080015bd
 8000824:	20000350 	.word	0x20000350
 8000828:	080069a4 	.word	0x080069a4
 800082c:	08000975 	.word	0x08000975
 8000830:	20000354 	.word	0x20000354
 8000834:	080069b0 	.word	0x080069b0
 8000838:	08000ab9 	.word	0x08000ab9

0800083c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b094      	sub	sp, #80	; 0x50
 8000840:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	2234      	movs	r2, #52	; 0x34
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f005 ffae 	bl	80067ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	4b2a      	ldr	r3, [pc, #168]	; (8000910 <SystemClock_Config+0xd4>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	4a29      	ldr	r2, [pc, #164]	; (8000910 <SystemClock_Config+0xd4>)
 800086a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086e:	6413      	str	r3, [r2, #64]	; 0x40
 8000870:	4b27      	ldr	r3, [pc, #156]	; (8000910 <SystemClock_Config+0xd4>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800087c:	2300      	movs	r3, #0
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	4b24      	ldr	r3, [pc, #144]	; (8000914 <SystemClock_Config+0xd8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000888:	4a22      	ldr	r2, [pc, #136]	; (8000914 <SystemClock_Config+0xd8>)
 800088a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	4b20      	ldr	r3, [pc, #128]	; (8000914 <SystemClock_Config+0xd8>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800089c:	2302      	movs	r3, #2
 800089e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a0:	2301      	movs	r3, #1
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a4:	2310      	movs	r3, #16
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a8:	2302      	movs	r3, #2
 80008aa:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ac:	2300      	movs	r3, #0
 80008ae:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 80008b0:	2310      	movs	r3, #16
 80008b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 80008b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008b8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008ba:	2304      	movs	r3, #4
 80008bc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80008be:	2302      	movs	r3, #2
 80008c0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 ff96 	bl	80037fc <HAL_RCC_OscConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x9e>
	{
		Error_Handler();
 80008d6:	f001 f881 	bl	80019dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008da:	230f      	movs	r3, #15
 80008dc:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008de:	2302      	movs	r3, #2
 80008e0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ea:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f0:	f107 0308 	add.w	r3, r7, #8
 80008f4:	2102      	movs	r1, #2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f002 fc04 	bl	8003104 <HAL_RCC_ClockConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0xca>
	{
		Error_Handler();
 8000902:	f001 f86b 	bl	80019dc <Error_Handler>
	}
}
 8000906:	bf00      	nop
 8000908:	3750      	adds	r7, #80	; 0x50
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800
 8000914:	40007000 	.word	0x40007000

08000918 <CanIf_Transmit>:
 *  @brief CAN interface transmit function
 *  @param  PduInfoTRx*		: Pointer to message structure contain (Data, Length)
 *  @param  TxPduId	: PDU ID
 *  @return None
 */
void CanIf_Transmit(uint32_t TxPduId, PduInfoTRx* PduInfoPtr){
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;
	if(TxPduId == 0){
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d102      	bne.n	800092e <CanIf_Transmit+0x16>
		txHeader.StdId = 0x100;
 8000928:	f44f 7380 	mov.w	r3, #256	; 0x100
 800092c:	613b      	str	r3, [r7, #16]
	}

	txHeader.ExtId = 0x00;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
	txHeader.IDE = CAN_ID_STD;
 8000932:	2300      	movs	r3, #0
 8000934:	61bb      	str	r3, [r7, #24]
	txHeader.RTR = CAN_RTR_DATA;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
	txHeader.DLC = 8;
 800093a:	2308      	movs	r3, #8
 800093c:	623b      	str	r3, [r7, #32]
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0);
 800093e:	bf00      	nop
 8000940:	480b      	ldr	r0, [pc, #44]	; (8000970 <CanIf_Transmit+0x58>)
 8000942:	f001 fd20 	bl	8002386 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d0f9      	beq.n	8000940 <CanIf_Transmit+0x28>
	if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, PduInfoPtr->Data, &txMailbox) != HAL_OK) {
 800094c:	683a      	ldr	r2, [r7, #0]
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	f107 0110 	add.w	r1, r7, #16
 8000956:	4806      	ldr	r0, [pc, #24]	; (8000970 <CanIf_Transmit+0x58>)
 8000958:	f001 fc3a 	bl	80021d0 <HAL_CAN_AddTxMessage>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <CanIf_Transmit+0x4e>
		// Transmission error
		Error_Handler();
 8000962:	f001 f83b 	bl	80019dc <Error_Handler>

	}
#if CAN_MODE == CAN_TX
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
#endif
}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	; 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000084 	.word	0x20000084

08000974 <CanIf_Receive>:
/**
 *  @brief CAN interface receive data
 *  @param  None
 *  @return None
 */
void CanIf_Receive(){
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
	uint32_t PDU_ID;
	while(1){
		if(CanIf_Rx){
 800097a:	4b2f      	ldr	r3, [pc, #188]	; (8000a38 <CanIf_Receive+0xc4>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	b25b      	sxtb	r3, r3
 8000980:	2b00      	cmp	r3, #0
 8000982:	d054      	beq.n	8000a2e <CanIf_Receive+0xba>
			CanIf_Rx = 0;
 8000984:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <CanIf_Receive+0xc4>)
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]
			CanIfPduInfo.Length = rxHeader.DLC;
 800098a:	4b2c      	ldr	r3, [pc, #176]	; (8000a3c <CanIf_Receive+0xc8>)
 800098c:	691b      	ldr	r3, [r3, #16]
 800098e:	4a2c      	ldr	r2, [pc, #176]	; (8000a40 <CanIf_Receive+0xcc>)
 8000990:	6093      	str	r3, [r2, #8]
			switch(rxHeader.StdId)
 8000992:	4b2a      	ldr	r3, [pc, #168]	; (8000a3c <CanIf_Receive+0xc8>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800099a:	d03c      	beq.n	8000a16 <CanIf_Receive+0xa2>
 800099c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009a0:	d83c      	bhi.n	8000a1c <CanIf_Receive+0xa8>
 80009a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80009a6:	d033      	beq.n	8000a10 <CanIf_Receive+0x9c>
 80009a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80009ac:	d836      	bhi.n	8000a1c <CanIf_Receive+0xa8>
 80009ae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80009b2:	d02a      	beq.n	8000a0a <CanIf_Receive+0x96>
 80009b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80009b8:	d830      	bhi.n	8000a1c <CanIf_Receive+0xa8>
 80009ba:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80009be:	d021      	beq.n	8000a04 <CanIf_Receive+0x90>
 80009c0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80009c4:	d82a      	bhi.n	8000a1c <CanIf_Receive+0xa8>
 80009c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009ca:	d018      	beq.n	80009fe <CanIf_Receive+0x8a>
 80009cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009d0:	d824      	bhi.n	8000a1c <CanIf_Receive+0xa8>
 80009d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80009d6:	d00f      	beq.n	80009f8 <CanIf_Receive+0x84>
 80009d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80009dc:	d81e      	bhi.n	8000a1c <CanIf_Receive+0xa8>
 80009de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009e2:	d003      	beq.n	80009ec <CanIf_Receive+0x78>
 80009e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009e8:	d003      	beq.n	80009f2 <CanIf_Receive+0x7e>
 80009ea:	e017      	b.n	8000a1c <CanIf_Receive+0xa8>
			{
			case 0x100 :PDU_ID = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	607b      	str	r3, [r7, #4]
			break;
 80009f0:	e014      	b.n	8000a1c <CanIf_Receive+0xa8>
			case 0x200 :PDU_ID = 1;
 80009f2:	2301      	movs	r3, #1
 80009f4:	607b      	str	r3, [r7, #4]
			break;
 80009f6:	e011      	b.n	8000a1c <CanIf_Receive+0xa8>
			case 0x300 :PDU_ID = 2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	607b      	str	r3, [r7, #4]
			break;
 80009fc:	e00e      	b.n	8000a1c <CanIf_Receive+0xa8>
			case 0x400 :PDU_ID = 3;
 80009fe:	2303      	movs	r3, #3
 8000a00:	607b      	str	r3, [r7, #4]
			break;
 8000a02:	e00b      	b.n	8000a1c <CanIf_Receive+0xa8>
			case 0x500 :PDU_ID = 4;
 8000a04:	2304      	movs	r3, #4
 8000a06:	607b      	str	r3, [r7, #4]
			break;
 8000a08:	e008      	b.n	8000a1c <CanIf_Receive+0xa8>
			case 0x600 :PDU_ID = 5;
 8000a0a:	2305      	movs	r3, #5
 8000a0c:	607b      	str	r3, [r7, #4]
			break;
 8000a0e:	e005      	b.n	8000a1c <CanIf_Receive+0xa8>
			case 0x700 :PDU_ID = 6;
 8000a10:	2306      	movs	r3, #6
 8000a12:	607b      	str	r3, [r7, #4]
			break;
 8000a14:	e002      	b.n	8000a1c <CanIf_Receive+0xa8>
			case 0x800 :PDU_ID = 7;
 8000a16:	2307      	movs	r3, #7
 8000a18:	607b      	str	r3, [r7, #4]
			break;
 8000a1a:	bf00      	nop
			}

			if(CanTp_Callback != NULL)
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <CanIf_Receive+0xd0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d004      	beq.n	8000a2e <CanIf_Receive+0xba>
			{
				CanTp_Callback(PDU_ID, &CanIfPduInfo);
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <CanIf_Receive+0xd0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4905      	ldr	r1, [pc, #20]	; (8000a40 <CanIf_Receive+0xcc>)
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	4798      	blx	r3
			}
		}
		vTaskDelay(10);
 8000a2e:	200a      	movs	r0, #10
 8000a30:	f004 ff22 	bl	8005878 <vTaskDelay>
		if(CanIf_Rx){
 8000a34:	e7a1      	b.n	800097a <CanIf_Receive+0x6>
 8000a36:	bf00      	nop
 8000a38:	200013c8 	.word	0x200013c8
 8000a3c:	2000139c 	.word	0x2000139c
 8000a40:	20001390 	.word	0x20001390
 8000a44:	2000036c 	.word	0x2000036c

08000a48 <CanIf_setCallback>:
	}
}

void CanIf_setCallback(Std_ReturnType (*IF_Callback)(uint32_t RxPduId, PduInfoTRx* PduInfoPtr)){
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	if(IF_Callback != NULL)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d002      	beq.n	8000a5c <CanIf_setCallback+0x14>
	{
		CanTp_Callback = IF_Callback ;
 8000a56:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <CanIf_setCallback+0x20>)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6013      	str	r3, [r2, #0]
	}
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	2000036c 	.word	0x2000036c

08000a6c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, CanIfPduInfo.Data) != HAL_OK) {
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000a76:	4a09      	ldr	r2, [pc, #36]	; (8000a9c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000a78:	2100      	movs	r1, #0
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f001 fcb8 	bl	80023f0 <HAL_CAN_GetRxMessage>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		// Reception error
		Error_Handler();
 8000a86:	f000 ffa9 	bl	80019dc <Error_Handler>
	}
	CanIf_Rx = 1;
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	701a      	strb	r2, [r3, #0]
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20001390 	.word	0x20001390
 8000a9c:	2000139c 	.word	0x2000139c
 8000aa0:	200013c8 	.word	0x200013c8

08000aa4 <CanTp_Init>:

void CanTp_Init(){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	CanIf_setCallback(CanTp_RxIndication);
 8000aa8:	4802      	ldr	r0, [pc, #8]	; (8000ab4 <CanTp_Init+0x10>)
 8000aaa:	f7ff ffcd 	bl	8000a48 <CanIf_setCallback>
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	08000d65 	.word	0x08000d65

08000ab8 <CanTp_MainFunction>:

void CanTp_MainFunction(){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
	while(1){
		if(CanTp_Rx){
 8000abe:	4b8c      	ldr	r3, [pc, #560]	; (8000cf0 <CanTp_MainFunction+0x238>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b25b      	sxtb	r3, r3
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d07b      	beq.n	8000bc0 <CanTp_MainFunction+0x108>
			CanTp_Rx = 0;
 8000ac8:	4b89      	ldr	r3, [pc, #548]	; (8000cf0 <CanTp_MainFunction+0x238>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
			//Stop the program if the PduID doesn't equal 0 :)
			if(GlobalRxPduId != 0){
 8000ace:	4b89      	ldr	r3, [pc, #548]	; (8000cf4 <CanTp_MainFunction+0x23c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d000      	beq.n	8000ad8 <CanTp_MainFunction+0x20>
				while(1);
 8000ad6:	e7fe      	b.n	8000ad6 <CanTp_MainFunction+0x1e>
			}
			//Get the frame type from the
			Frame_Type frame_type = CanTp_GetFrameType(GlobalRxPduInfoPtr->Data[0]);
 8000ad8:	4b87      	ldr	r3, [pc, #540]	; (8000cf8 <CanTp_MainFunction+0x240>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 f95c 	bl	8000d9c <CanTp_GetFrameType>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	71bb      	strb	r3, [r7, #6]
			//	Frame_Type frame_type = First_Frame

			//Call the correct decoder depending on the frame type
			//extract the length and save it in numberOfRemainingBytesToReceive and connect the data
			switch(frame_type){
 8000ae8:	79bb      	ldrb	r3, [r7, #6]
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	d84c      	bhi.n	8000b88 <CanTp_MainFunction+0xd0>
 8000aee:	a201      	add	r2, pc, #4	; (adr r2, 8000af4 <CanTp_MainFunction+0x3c>)
 8000af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af4:	08000b05 	.word	0x08000b05
 8000af8:	08000b17 	.word	0x08000b17
 8000afc:	08000b3f 	.word	0x08000b3f
 8000b00:	08000b77 	.word	0x08000b77
			case Single_Frame:
				CanTp_decodeSingleFrame(GlobalRxPduId, GlobalRxPduInfoPtr);
 8000b04:	4b7b      	ldr	r3, [pc, #492]	; (8000cf4 <CanTp_MainFunction+0x23c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a7b      	ldr	r2, [pc, #492]	; (8000cf8 <CanTp_MainFunction+0x240>)
 8000b0a:	6812      	ldr	r2, [r2, #0]
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 fa80 	bl	8001014 <CanTp_decodeSingleFrame>
				break;
 8000b14:	e03b      	b.n	8000b8e <CanTp_MainFunction+0xd6>
			case First_Frame:
				CanTp_decodeFirstFrame(GlobalRxPduId, GlobalRxPduInfoPtr);
 8000b16:	4b77      	ldr	r3, [pc, #476]	; (8000cf4 <CanTp_MainFunction+0x23c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a77      	ldr	r2, [pc, #476]	; (8000cf8 <CanTp_MainFunction+0x240>)
 8000b1c:	6812      	ldr	r2, [r2, #0]
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 faad 	bl	8001080 <CanTp_decodeFirstFrame>
				expectedFrameState = FlowControl_Frame_State;
 8000b26:	4b75      	ldr	r3, [pc, #468]	; (8000cfc <CanTp_MainFunction+0x244>)
 8000b28:	2202      	movs	r2, #2
 8000b2a:	701a      	strb	r2, [r3, #0]
				CanTp_Transmit(GlobalRxPduId, (PduInfoType*) GlobalRxPduInfoPtr);
 8000b2c:	4b71      	ldr	r3, [pc, #452]	; (8000cf4 <CanTp_MainFunction+0x23c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a71      	ldr	r2, [pc, #452]	; (8000cf8 <CanTp_MainFunction+0x240>)
 8000b32:	6812      	ldr	r2, [r2, #0]
 8000b34:	4611      	mov	r1, r2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f8f8 	bl	8000d2c <CanTp_Transmit>
				break;
 8000b3c:	e027      	b.n	8000b8e <CanTp_MainFunction+0xd6>
			case Consecutive_Frame:
				CanTp_decodeConsecutiveFrame(GlobalRxPduId, GlobalRxPduInfoPtr);
 8000b3e:	4b6d      	ldr	r3, [pc, #436]	; (8000cf4 <CanTp_MainFunction+0x23c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a6d      	ldr	r2, [pc, #436]	; (8000cf8 <CanTp_MainFunction+0x240>)
 8000b44:	6812      	ldr	r2, [r2, #0]
 8000b46:	4611      	mov	r1, r2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 fad1 	bl	80010f0 <CanTp_decodeConsecutiveFrame>
				if(numberOfConsecutiveFramesToReceive == 0 && numberOfRemainingBytesToReceive > 0){
 8000b4e:	4b6c      	ldr	r3, [pc, #432]	; (8000d00 <CanTp_MainFunction+0x248>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d11a      	bne.n	8000b8c <CanTp_MainFunction+0xd4>
 8000b56:	4b6b      	ldr	r3, [pc, #428]	; (8000d04 <CanTp_MainFunction+0x24c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d016      	beq.n	8000b8c <CanTp_MainFunction+0xd4>
					expectedFrameState = FlowControl_Frame_State;
 8000b5e:	4b67      	ldr	r3, [pc, #412]	; (8000cfc <CanTp_MainFunction+0x244>)
 8000b60:	2202      	movs	r2, #2
 8000b62:	701a      	strb	r2, [r3, #0]
					CanTp_Transmit(GlobalRxPduId, (PduInfoType*) GlobalRxPduInfoPtr);
 8000b64:	4b63      	ldr	r3, [pc, #396]	; (8000cf4 <CanTp_MainFunction+0x23c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a63      	ldr	r2, [pc, #396]	; (8000cf8 <CanTp_MainFunction+0x240>)
 8000b6a:	6812      	ldr	r2, [r2, #0]
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 f8dc 	bl	8000d2c <CanTp_Transmit>
				}
				break;
 8000b74:	e00a      	b.n	8000b8c <CanTp_MainFunction+0xd4>
			case FlowControl_Frame:
				//adjust the numberOfConsecutiveFramesToSend variable inside a function
				//based on the number of empty buffers available in the other node
				//as indicated in the BS (block size) byte of the flow control frame
				CanTp_decodeFlowControlFrame(GlobalRxPduId, GlobalRxPduInfoPtr);
 8000b76:	4b5f      	ldr	r3, [pc, #380]	; (8000cf4 <CanTp_MainFunction+0x23c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a5f      	ldr	r2, [pc, #380]	; (8000cf8 <CanTp_MainFunction+0x240>)
 8000b7c:	6812      	ldr	r2, [r2, #0]
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 fafd 	bl	8001180 <CanTp_decodeFlowControlFrame>
				break;
 8000b86:	e002      	b.n	8000b8e <CanTp_MainFunction+0xd6>
			default:
				break;
 8000b88:	bf00      	nop
 8000b8a:	e000      	b.n	8000b8e <CanTp_MainFunction+0xd6>
				break;
 8000b8c:	bf00      	nop
			}

			if(frame_type == FlowControl_Frame){
 8000b8e:	79bb      	ldrb	r3, [r7, #6]
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	f000 80a8 	beq.w	8000ce6 <CanTp_MainFunction+0x22e>

			}
			else if(numberOfRemainingBytesToReceive == 0){
 8000b96:	4b5b      	ldr	r3, [pc, #364]	; (8000d04 <CanTp_MainFunction+0x24c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f040 80a3 	bne.w	8000ce6 <CanTp_MainFunction+0x22e>
				if(App_Callback != NULL){
 8000ba0:	4b59      	ldr	r3, [pc, #356]	; (8000d08 <CanTp_MainFunction+0x250>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	f000 809e 	beq.w	8000ce6 <CanTp_MainFunction+0x22e>
					currentIndex = 0;
 8000baa:	4b58      	ldr	r3, [pc, #352]	; (8000d0c <CanTp_MainFunction+0x254>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	801a      	strh	r2, [r3, #0]
					App_Callback(GlobalRxPduId, &CompletePduInfo);
 8000bb0:	4b55      	ldr	r3, [pc, #340]	; (8000d08 <CanTp_MainFunction+0x250>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a4f      	ldr	r2, [pc, #316]	; (8000cf4 <CanTp_MainFunction+0x23c>)
 8000bb6:	6812      	ldr	r2, [r2, #0]
 8000bb8:	4955      	ldr	r1, [pc, #340]	; (8000d10 <CanTp_MainFunction+0x258>)
 8000bba:	4610      	mov	r0, r2
 8000bbc:	4798      	blx	r3
 8000bbe:	e092      	b.n	8000ce6 <CanTp_MainFunction+0x22e>
				}
			}
		}
		else if(CanTp_Tx){
 8000bc0:	4b54      	ldr	r3, [pc, #336]	; (8000d14 <CanTp_MainFunction+0x25c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b25b      	sxtb	r3, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 808d 	beq.w	8000ce6 <CanTp_MainFunction+0x22e>
			//Stop the program if the PduID doesn't equal 0 :)
			if(GlobalTxPduId != 0){
 8000bcc:	4b52      	ldr	r3, [pc, #328]	; (8000d18 <CanTp_MainFunction+0x260>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d000      	beq.n	8000bd6 <CanTp_MainFunction+0x11e>
				while(1);
 8000bd4:	e7fe      	b.n	8000bd4 <CanTp_MainFunction+0x11c>
			}

			Frame_Type frame_type = None;
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	71fb      	strb	r3, [r7, #7]
			if(numberOfRemainingBytesToSend == 0 && expectedFrameState == Any_State){
 8000bda:	4b50      	ldr	r3, [pc, #320]	; (8000d1c <CanTp_MainFunction+0x264>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d11c      	bne.n	8000c1c <CanTp_MainFunction+0x164>
 8000be2:	4b46      	ldr	r3, [pc, #280]	; (8000cfc <CanTp_MainFunction+0x244>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d118      	bne.n	8000c1c <CanTp_MainFunction+0x164>
				numberOfRemainingBytesToSend = GlobalTxPduInfoPtr->Length;
 8000bea:	4b4d      	ldr	r3, [pc, #308]	; (8000d20 <CanTp_MainFunction+0x268>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a49      	ldr	r2, [pc, #292]	; (8000d1c <CanTp_MainFunction+0x264>)
 8000bf6:	6013      	str	r3, [r2, #0]
				CompletePduInfo.Length = numberOfRemainingBytesToSend;
 8000bf8:	4b48      	ldr	r3, [pc, #288]	; (8000d1c <CanTp_MainFunction+0x264>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a44      	ldr	r2, [pc, #272]	; (8000d10 <CanTp_MainFunction+0x258>)
 8000bfe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000c02:	6013      	str	r3, [r2, #0]
				if(GlobalTxPduInfoPtr->Length < 8){
 8000c04:	4b46      	ldr	r3, [pc, #280]	; (8000d20 <CanTp_MainFunction+0x268>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2b07      	cmp	r3, #7
 8000c10:	d802      	bhi.n	8000c18 <CanTp_MainFunction+0x160>
					frame_type = Single_Frame;
 8000c12:	2300      	movs	r3, #0
 8000c14:	71fb      	strb	r3, [r7, #7]
 8000c16:	e001      	b.n	8000c1c <CanTp_MainFunction+0x164>
				}
				else{
					frame_type = First_Frame;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	71fb      	strb	r3, [r7, #7]
				}
			}


			if(numberOfRemainingBytesToSend > 0 || expectedFrameState == FlowControl_Frame_State){
 8000c1c:	4b3f      	ldr	r3, [pc, #252]	; (8000d1c <CanTp_MainFunction+0x264>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d103      	bne.n	8000c2c <CanTp_MainFunction+0x174>
 8000c24:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <CanTp_MainFunction+0x244>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d14e      	bne.n	8000cca <CanTp_MainFunction+0x212>

				if(expectedFrameState == Consecutive_Frame_State){
 8000c2c:	4b33      	ldr	r3, [pc, #204]	; (8000cfc <CanTp_MainFunction+0x244>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d102      	bne.n	8000c3a <CanTp_MainFunction+0x182>
					frame_type = Consecutive_Frame;
 8000c34:	2302      	movs	r3, #2
 8000c36:	71fb      	strb	r3, [r7, #7]
 8000c38:	e005      	b.n	8000c46 <CanTp_MainFunction+0x18e>
				}
				else if(expectedFrameState == FlowControl_Frame_State){
 8000c3a:	4b30      	ldr	r3, [pc, #192]	; (8000cfc <CanTp_MainFunction+0x244>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d101      	bne.n	8000c46 <CanTp_MainFunction+0x18e>
					frame_type = FlowControl_Frame;
 8000c42:	2303      	movs	r3, #3
 8000c44:	71fb      	strb	r3, [r7, #7]
				}

				//Call the right encoder function according to the frame type
				//Make sure to adjust the numberOfRemainingBytesToSend variable to know if all the data has been sent
				//Also make sure to call the CanIf_Transmit method at the end of these functions.
				switch(frame_type){
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d83d      	bhi.n	8000cc8 <CanTp_MainFunction+0x210>
 8000c4c:	a201      	add	r2, pc, #4	; (adr r2, 8000c54 <CanTp_MainFunction+0x19c>)
 8000c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c52:	bf00      	nop
 8000c54:	08000c65 	.word	0x08000c65
 8000c58:	08000c77 	.word	0x08000c77
 8000c5c:	08000c8d 	.word	0x08000c8d
 8000c60:	08000cb7 	.word	0x08000cb7
				case Single_Frame:
					CanTp_encodeSingleFrame(GlobalTxPduId, GlobalTxPduInfoPtr);
 8000c64:	4b2c      	ldr	r3, [pc, #176]	; (8000d18 <CanTp_MainFunction+0x260>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a2d      	ldr	r2, [pc, #180]	; (8000d20 <CanTp_MainFunction+0x268>)
 8000c6a:	6812      	ldr	r2, [r2, #0]
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f8ba 	bl	8000de8 <CanTp_encodeSingleFrame>
					break;
 8000c74:	e029      	b.n	8000cca <CanTp_MainFunction+0x212>
				case First_Frame:
					CanTp_encodeFirstFrame(GlobalTxPduId, GlobalTxPduInfoPtr);
 8000c76:	4b28      	ldr	r3, [pc, #160]	; (8000d18 <CanTp_MainFunction+0x260>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a29      	ldr	r2, [pc, #164]	; (8000d20 <CanTp_MainFunction+0x268>)
 8000c7c:	6812      	ldr	r2, [r2, #0]
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 f8f3 	bl	8000e6c <CanTp_encodeFirstFrame>
					frame_type = None;
 8000c86:	2304      	movs	r3, #4
 8000c88:	71fb      	strb	r3, [r7, #7]
					break;
 8000c8a:	e01e      	b.n	8000cca <CanTp_MainFunction+0x212>
				case Consecutive_Frame:
					if(numberOfConsecutiveFramesToSend > 0){
 8000c8c:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <CanTp_MainFunction+0x26c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d00d      	beq.n	8000cb0 <CanTp_MainFunction+0x1f8>
						numberOfConsecutiveFramesToSend--;
 8000c94:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <CanTp_MainFunction+0x26c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	4a22      	ldr	r2, [pc, #136]	; (8000d24 <CanTp_MainFunction+0x26c>)
 8000c9c:	6013      	str	r3, [r2, #0]
						CanTp_encodeConsecutiveFrame(GlobalTxPduId, GlobalTxPduInfoPtr);
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <CanTp_MainFunction+0x260>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a1f      	ldr	r2, [pc, #124]	; (8000d20 <CanTp_MainFunction+0x268>)
 8000ca4:	6812      	ldr	r2, [r2, #0]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 f91f 	bl	8000eec <CanTp_encodeConsecutiveFrame>
					}
					else{
						frame_type = None;
						//wait for flow control to reach CanTp_RxIndication in order to change numberOfConsecutiveFramesToSend variable
					}
					break;
 8000cae:	e00c      	b.n	8000cca <CanTp_MainFunction+0x212>
						frame_type = None;
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	71fb      	strb	r3, [r7, #7]
					break;
 8000cb4:	e009      	b.n	8000cca <CanTp_MainFunction+0x212>
				case FlowControl_Frame:
					//Check the availableBuffers variable (in our case it's the size of the receive array)
					CanTp_encodeFlowControlFrame(GlobalTxPduId, GlobalTxPduInfoPtr);
 8000cb6:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <CanTp_MainFunction+0x260>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a19      	ldr	r2, [pc, #100]	; (8000d20 <CanTp_MainFunction+0x268>)
 8000cbc:	6812      	ldr	r2, [r2, #0]
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 f979 	bl	8000fb8 <CanTp_encodeFlowControlFrame>
					break;
 8000cc6:	e000      	b.n	8000cca <CanTp_MainFunction+0x212>
				default:
					break;
 8000cc8:	bf00      	nop
				}
			}

			if(numberOfRemainingBytesToSend == 0){
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <CanTp_MainFunction+0x264>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d109      	bne.n	8000ce6 <CanTp_MainFunction+0x22e>
				//Reset the expected frame
				expectedFrameState = Any_State;
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <CanTp_MainFunction+0x244>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
				currentOffset = -1;
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <CanTp_MainFunction+0x270>)
 8000cda:	f04f 32ff 	mov.w	r2, #4294967295
 8000cde:	601a      	str	r2, [r3, #0]
				CanTp_Tx = 0;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <CanTp_MainFunction+0x25c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
			}
		}
		vTaskDelay(100);
 8000ce6:	2064      	movs	r0, #100	; 0x64
 8000ce8:	f004 fdc6 	bl	8005878 <vTaskDelay>
		if(CanTp_Rx){
 8000cec:	e6e7      	b.n	8000abe <CanTp_MainFunction+0x6>
 8000cee:	bf00      	nop
 8000cf0:	200013c9 	.word	0x200013c9
 8000cf4:	200013cc 	.word	0x200013cc
 8000cf8:	200013b8 	.word	0x200013b8
 8000cfc:	20000370 	.word	0x20000370
 8000d00:	2000035c 	.word	0x2000035c
 8000d04:	20000364 	.word	0x20000364
 8000d08:	20000368 	.word	0x20000368
 8000d0c:	200013c2 	.word	0x200013c2
 8000d10:	2000038c 	.word	0x2000038c
 8000d14:	200013ca 	.word	0x200013ca
 8000d18:	200013d0 	.word	0x200013d0
 8000d1c:	20000360 	.word	0x20000360
 8000d20:	200013bc 	.word	0x200013bc
 8000d24:	20000358 	.word	0x20000358
 8000d28:	20000004 	.word	0x20000004

08000d2c <CanTp_Transmit>:
	}
}

Std_ReturnType CanTp_Transmit(uint32_t TxPduId, PduInfoType* PduInfoPtr){
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
	GlobalTxPduInfoPtr = PduInfoPtr;
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <CanTp_Transmit+0x2c>)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	6013      	str	r3, [r2, #0]
	GlobalTxPduId = TxPduId;
 8000d3c:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <CanTp_Transmit+0x30>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
	CanTp_Tx = 1;
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <CanTp_Transmit+0x34>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	701a      	strb	r2, [r3, #0]
	return E_OK;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	200013bc 	.word	0x200013bc
 8000d5c:	200013d0 	.word	0x200013d0
 8000d60:	200013ca 	.word	0x200013ca

08000d64 <CanTp_RxIndication>:

Std_ReturnType CanTp_RxIndication (uint32_t RxPduId, PduInfoTRx* PduInfoPtr){
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
	GlobalRxPduInfoPtr = PduInfoPtr;
 8000d6e:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <CanTp_RxIndication+0x2c>)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	6013      	str	r3, [r2, #0]
	GlobalRxPduId = RxPduId;
 8000d74:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <CanTp_RxIndication+0x30>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6013      	str	r3, [r2, #0]
	CanTp_Rx = 1;
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <CanTp_RxIndication+0x34>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	701a      	strb	r2, [r3, #0]
	return E_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	200013b8 	.word	0x200013b8
 8000d94:	200013cc 	.word	0x200013cc
 8000d98:	200013c9 	.word	0x200013c9

08000d9c <CanTp_GetFrameType>:

Frame_Type CanTp_GetFrameType(uint8_t PCI){
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
	//Switch case on the PCI to determine the frame type
	PCI >>= 4;
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	091b      	lsrs	r3, r3, #4
 8000daa:	71fb      	strb	r3, [r7, #7]
	if(PCI < 4){
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d801      	bhi.n	8000db6 <CanTp_GetFrameType+0x1a>
		return (Frame_Type) PCI;
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	e000      	b.n	8000db8 <CanTp_GetFrameType+0x1c>
	}
	else{
		return None;
 8000db6:	2304      	movs	r3, #4
	}
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <CanTp_setCallback>:

void CanTp_setCallback(void (*PTF)(uint32_t TxPduId, PduInfoType* PduInfoPtr)){
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	if(PTF != NULL){
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d002      	beq.n	8000dd8 <CanTp_setCallback+0x14>
		App_Callback = PTF;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <CanTp_setCallback+0x20>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6013      	str	r3, [r2, #0]
	}
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	20000368 	.word	0x20000368

08000de8 <CanTp_encodeSingleFrame>:


void CanTp_encodeSingleFrame(uint32_t TxPduId, PduInfoType* PduInfoPtr){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
	//	if (PduInfoPtr == NULL ) {
	//		return E_NOK; // Return E_NOK for NULL pointer
	//	}

	// Ensure the data length does not exceed the maximum payload length
	uint32_t dataLength = PduInfoPtr->Length;
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	60bb      	str	r3, [r7, #8]
	EncodedPduInfo.Length = PduInfoPtr->Length;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a18      	ldr	r2, [pc, #96]	; (8000e68 <CanTp_encodeSingleFrame+0x80>)
 8000e06:	6093      	str	r3, [r2, #8]
	//	if (dataLength > CAN_MAX_PAYLOAD_LENGTH) {
	//		return E_NOK; // Return E_NOK for data length exceeding CAN payload length
	//	}

	// The first byte of the CAN frame is reserved for PCI (Protocol Control Information)
	EncodedPduInfo.Data[0] = 0x00 | (dataLength & 0x0F); // PCI is 0x0N where N is the length of the data
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	f003 030f 	and.w	r3, r3, #15
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <CanTp_encodeSingleFrame+0x80>)
 8000e14:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	// Copy the data from PduInfoType to the CAN frame manually, starting from the second byte
	for ( i = 0; i < dataLength; i++) {
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	e00a      	b.n	8000e32 <CanTp_encodeSingleFrame+0x4a>
		EncodedPduInfo.Data[i + 1] = PduInfoPtr->Data[i];
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	6839      	ldr	r1, [r7, #0]
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	440a      	add	r2, r1
 8000e26:	7811      	ldrb	r1, [r2, #0]
 8000e28:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <CanTp_encodeSingleFrame+0x80>)
 8000e2a:	54d1      	strb	r1, [r2, r3]
	for ( i = 0; i < dataLength; i++) {
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d3f0      	bcc.n	8000e1c <CanTp_encodeSingleFrame+0x34>
	}

	// Fill the rest of the frame with zeros if necessary
	for (i = dataLength + 1; i < CAN_FRAME_LENGTH; i++) {
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	e007      	b.n	8000e52 <CanTp_encodeSingleFrame+0x6a>
		EncodedPduInfo.Data[i] = 0;
 8000e42:	4a09      	ldr	r2, [pc, #36]	; (8000e68 <CanTp_encodeSingleFrame+0x80>)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4413      	add	r3, r2
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
	for (i = dataLength + 1; i < CAN_FRAME_LENGTH; i++) {
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2b07      	cmp	r3, #7
 8000e56:	d9f4      	bls.n	8000e42 <CanTp_encodeSingleFrame+0x5a>
	}

	CanIf_Transmit(TxPduId, &EncodedPduInfo);
 8000e58:	4903      	ldr	r1, [pc, #12]	; (8000e68 <CanTp_encodeSingleFrame+0x80>)
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff fd5c 	bl	8000918 <CanIf_Transmit>
}
 8000e60:	bf00      	nop
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000374 	.word	0x20000374

08000e6c <CanTp_encodeFirstFrame>:
void CanTp_encodeFirstFrame(uint32_t TxPduId, PduInfoType* PduInfoPtr){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
	/*** Local Variables ****/
	uint8_t Counter=0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	75fb      	strb	r3, [r7, #23]
	PduInfoTRx EncodedPduInfo ;
	/************/

	// assume that data is [0x1 0x2 0x3 0x4 0x5 0x6 0x7 0x8 0x9 0xA]
	EncodedPduInfo.Data[0] = (0x01 <<4 ) | ((PduInfoPtr->Length)>>8 & 0x0F); // First Frame Should be 10 A 0x1 0x2 0x3 0x4 0x5 0x6
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	0a1b      	lsrs	r3, r3, #8
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	f003 030f 	and.w	r3, r3, #15
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	f043 0310 	orr.w	r3, r3, #16
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	723b      	strb	r3, [r7, #8]
	EncodedPduInfo.Data[1] = (PduInfoPtr->Length)& 0xFF;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	727b      	strb	r3, [r7, #9]

	// Form First Frame
	for(Counter=2;Counter<8;Counter++)
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	75fb      	strb	r3, [r7, #23]
 8000ea4:	e00b      	b.n	8000ebe <CanTp_encodeFirstFrame+0x52>
	{
		EncodedPduInfo.Data[Counter]=PduInfoPtr->Data[Counter - 2];
 8000ea6:	7dfb      	ldrb	r3, [r7, #23]
 8000ea8:	1e9a      	subs	r2, r3, #2
 8000eaa:	7dfb      	ldrb	r3, [r7, #23]
 8000eac:	6839      	ldr	r1, [r7, #0]
 8000eae:	5c8a      	ldrb	r2, [r1, r2]
 8000eb0:	3318      	adds	r3, #24
 8000eb2:	443b      	add	r3, r7
 8000eb4:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(Counter=2;Counter<8;Counter++)
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	75fb      	strb	r3, [r7, #23]
 8000ebe:	7dfb      	ldrb	r3, [r7, #23]
 8000ec0:	2b07      	cmp	r3, #7
 8000ec2:	d9f0      	bls.n	8000ea6 <CanTp_encodeFirstFrame+0x3a>
	}

	/** Call CanIF_Transmit Function**/
	numberOfRemainingBytesToSend = (PduInfoPtr->Length - 6);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	3b06      	subs	r3, #6
 8000ece:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <CanTp_encodeFirstFrame+0x7c>)
 8000ed0:	6013      	str	r3, [r2, #0]
	CanIf_Transmit(TxPduId, &EncodedPduInfo);
 8000ed2:	f107 0308 	add.w	r3, r7, #8
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff fd1d 	bl	8000918 <CanIf_Transmit>
}
 8000ede:	bf00      	nop
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000360 	.word	0x20000360

08000eec <CanTp_encodeConsecutiveFrame>:
void CanTp_encodeConsecutiveFrame(uint32_t TxPduId, PduInfoType* PduInfoPtr){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	73fb      	strb	r3, [r7, #15]
	EncodedPduInfo.Length = numberOfRemainingBytesToSend > 7 ? 7 : numberOfRemainingBytesToSend;
 8000efa:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <CanTp_encodeConsecutiveFrame+0xb8>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b07      	cmp	r3, #7
 8000f00:	d802      	bhi.n	8000f08 <CanTp_encodeConsecutiveFrame+0x1c>
 8000f02:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <CanTp_encodeConsecutiveFrame+0xb8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	e000      	b.n	8000f0a <CanTp_encodeConsecutiveFrame+0x1e>
 8000f08:	2307      	movs	r3, #7
 8000f0a:	4a27      	ldr	r2, [pc, #156]	; (8000fa8 <CanTp_encodeConsecutiveFrame+0xbc>)
 8000f0c:	6093      	str	r3, [r2, #8]
	EncodedPduInfo.Data[0]=(0x02 << 4) | ConsecSN;
 8000f0e:	4b27      	ldr	r3, [pc, #156]	; (8000fac <CanTp_encodeConsecutiveFrame+0xc0>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	f043 0320 	orr.w	r3, r3, #32
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <CanTp_encodeConsecutiveFrame+0xbc>)
 8000f1c:	701a      	strb	r2, [r3, #0]

	currentOffset = startOffset + ConsecSN * 7;
 8000f1e:	4b23      	ldr	r3, [pc, #140]	; (8000fac <CanTp_encodeConsecutiveFrame+0xc0>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	461a      	mov	r2, r3
 8000f26:	4613      	mov	r3, r2
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	1a9a      	subs	r2, r3, r2
 8000f2c:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <CanTp_encodeConsecutiveFrame+0xc4>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4413      	add	r3, r2
 8000f32:	4a20      	ldr	r2, [pc, #128]	; (8000fb4 <CanTp_encodeConsecutiveFrame+0xc8>)
 8000f34:	6013      	str	r3, [r2, #0]

	for(i=0 ; i < EncodedPduInfo.Length ; i++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	73fb      	strb	r3, [r7, #15]
 8000f3a:	e00c      	b.n	8000f56 <CanTp_encodeConsecutiveFrame+0x6a>
	{
		EncodedPduInfo.Data[i+1] = PduInfoPtr->Data[i + currentOffset];
 8000f3c:	7bfa      	ldrb	r2, [r7, #15]
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <CanTp_encodeConsecutiveFrame+0xc8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	441a      	add	r2, r3
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	3301      	adds	r3, #1
 8000f48:	6839      	ldr	r1, [r7, #0]
 8000f4a:	5c89      	ldrb	r1, [r1, r2]
 8000f4c:	4a16      	ldr	r2, [pc, #88]	; (8000fa8 <CanTp_encodeConsecutiveFrame+0xbc>)
 8000f4e:	54d1      	strb	r1, [r2, r3]
	for(i=0 ; i < EncodedPduInfo.Length ; i++)
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	3301      	adds	r3, #1
 8000f54:	73fb      	strb	r3, [r7, #15]
 8000f56:	7bfa      	ldrb	r2, [r7, #15]
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <CanTp_encodeConsecutiveFrame+0xbc>)
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d3ed      	bcc.n	8000f3c <CanTp_encodeConsecutiveFrame+0x50>
	}

	ConsecSN++;
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <CanTp_encodeConsecutiveFrame+0xc0>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	3301      	adds	r3, #1
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <CanTp_encodeConsecutiveFrame+0xc0>)
 8000f6c:	701a      	strb	r2, [r3, #0]
	if(ConsecSN > 0xF){
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <CanTp_encodeConsecutiveFrame+0xc0>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b0f      	cmp	r3, #15
 8000f76:	d906      	bls.n	8000f86 <CanTp_encodeConsecutiveFrame+0x9a>
		startOffset = currentOffset;
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <CanTp_encodeConsecutiveFrame+0xc8>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <CanTp_encodeConsecutiveFrame+0xc4>)
 8000f7e:	6013      	str	r3, [r2, #0]
		ConsecSN = 0;
 8000f80:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <CanTp_encodeConsecutiveFrame+0xc0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
	}
	numberOfRemainingBytesToSend -= EncodedPduInfo.Length;
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <CanTp_encodeConsecutiveFrame+0xb8>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <CanTp_encodeConsecutiveFrame+0xbc>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <CanTp_encodeConsecutiveFrame+0xb8>)
 8000f92:	6013      	str	r3, [r2, #0]
	CanIf_Transmit(TxPduId, &EncodedPduInfo);
 8000f94:	4904      	ldr	r1, [pc, #16]	; (8000fa8 <CanTp_encodeConsecutiveFrame+0xbc>)
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff fcbe 	bl	8000918 <CanIf_Transmit>
}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000360 	.word	0x20000360
 8000fa8:	20000374 	.word	0x20000374
 8000fac:	200013c0 	.word	0x200013c0
 8000fb0:	200013c4 	.word	0x200013c4
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <CanTp_encodeFlowControlFrame>:
void CanTp_encodeFlowControlFrame(uint32_t TxPduId, PduInfoType* PduInfoPtr){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
	// Initialize the flow control frame parameters
	// Byte 0: Flow Status (0x30 for continue to send, 0x31 for wait, 0x32 for overflow/abort)
	// Byte 1: Block Size (0 for continuous sending without waiting for flow control)
	// Byte 2: Separation Time (ST, in milliseconds, 0-127, 241-249 are valid values)

	EncodedPduInfo.Data[0] = 0x30;  // Flow Status: Continue to send (CTS)
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <CanTp_encodeFlowControlFrame+0x50>)
 8000fc4:	2230      	movs	r2, #48	; 0x30
 8000fc6:	701a      	strb	r2, [r3, #0]
	EncodedPduInfo.Data[1] = availableBuffers;  // Block Size: 0 (no blocks)
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <CanTp_encodeFlowControlFrame+0x54>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <CanTp_encodeFlowControlFrame+0x50>)
 8000fd0:	705a      	strb	r2, [r3, #1]
	EncodedPduInfo.Data[2] = 0x00;  // Separation Time: 0 ms (no delay)
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <CanTp_encodeFlowControlFrame+0x50>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	709a      	strb	r2, [r3, #2]

	// The remaining bytes can be set to 0
	for (uint8_t i = 3; i < 8; i++) {
 8000fd8:	2303      	movs	r3, #3
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e006      	b.n	8000fec <CanTp_encodeFlowControlFrame+0x34>
		EncodedPduInfo.Data[i] = 0x00;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	4a09      	ldr	r2, [pc, #36]	; (8001008 <CanTp_encodeFlowControlFrame+0x50>)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 3; i < 8; i++) {
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	2b07      	cmp	r3, #7
 8000ff0:	d9f5      	bls.n	8000fde <CanTp_encodeFlowControlFrame+0x26>
	}

	// Set the length of the flow control frame
	//    EncodedPduInfo.Length = 3;
	ConsecSN = 1;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <CanTp_encodeFlowControlFrame+0x58>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	701a      	strb	r2, [r3, #0]
	// Use CanIf_Transmit to send the flow control frame
	CanIf_Transmit(TxPduId, &EncodedPduInfo);
 8000ff8:	4903      	ldr	r1, [pc, #12]	; (8001008 <CanTp_encodeFlowControlFrame+0x50>)
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff fc8c 	bl	8000918 <CanIf_Transmit>
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000374 	.word	0x20000374
 800100c:	20000000 	.word	0x20000000
 8001010:	200013c0 	.word	0x200013c0

08001014 <CanTp_decodeSingleFrame>:

void CanTp_decodeSingleFrame(uint32_t RxPduId, PduInfoTRx* PduInfoPtr){
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
	// Extract the data length from the first byte of the CAN frame
	uint32_t dataLength = PduInfoPtr->Data[0] & 0x0F;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	60bb      	str	r3, [r7, #8]
	numberOfRemainingBytesToReceive = dataLength;
 8001028:	4a12      	ldr	r2, [pc, #72]	; (8001074 <CanTp_decodeSingleFrame+0x60>)
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	6013      	str	r3, [r2, #0]
	CompletePduInfo.Length = numberOfRemainingBytesToReceive;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <CanTp_decodeSingleFrame+0x60>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a11      	ldr	r2, [pc, #68]	; (8001078 <CanTp_decodeSingleFrame+0x64>)
 8001034:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001038:	6013      	str	r3, [r2, #0]
	int i;
	// Allocate memory for the data in the PduInfoTRx struct
	for ( i = 0; i < dataLength; i++) {
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	e00b      	b.n	8001058 <CanTp_decodeSingleFrame+0x44>
		DecodedPduInfo.Data[i] = PduInfoPtr->Data[i+1];
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3301      	adds	r3, #1
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	5cd1      	ldrb	r1, [r2, r3]
 8001048:	4a0c      	ldr	r2, [pc, #48]	; (800107c <CanTp_decodeSingleFrame+0x68>)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4413      	add	r3, r2
 800104e:	460a      	mov	r2, r1
 8001050:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < dataLength; i++) {
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	3301      	adds	r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8ef      	bhi.n	8001040 <CanTp_decodeSingleFrame+0x2c>
	//		DecodedPduInfo.Length = 0;
	//		return DecodedPduInfo;
	//	}

	// Set the length in the PduInfoType struct
	DecodedPduInfo.Length = dataLength;
 8001060:	4a06      	ldr	r2, [pc, #24]	; (800107c <CanTp_decodeSingleFrame+0x68>)
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	6093      	str	r3, [r2, #8]

	CanTp_ConnectData(&DecodedPduInfo);
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <CanTp_decodeSingleFrame+0x68>)
 8001068:	f000 f8c4 	bl	80011f4 <CanTp_ConnectData>
}
 800106c:	bf00      	nop
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000364 	.word	0x20000364
 8001078:	2000038c 	.word	0x2000038c
 800107c:	20000380 	.word	0x20000380

08001080 <CanTp_decodeFirstFrame>:
void CanTp_decodeFirstFrame(uint32_t RxPduId, PduInfoTRx* PduInfoPtr){
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
	numberOfRemainingBytesToReceive = ((PduInfoPtr->Data[0] & 0x0F) << 8) | PduInfoPtr->Data[1];
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	021b      	lsls	r3, r3, #8
 8001090:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	7852      	ldrb	r2, [r2, #1]
 8001098:	4313      	orrs	r3, r2
 800109a:	461a      	mov	r2, r3
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <CanTp_decodeFirstFrame+0x64>)
 800109e:	601a      	str	r2, [r3, #0]
	CompletePduInfo.Length = numberOfRemainingBytesToReceive;
 80010a0:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <CanTp_decodeFirstFrame+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <CanTp_decodeFirstFrame+0x68>)
 80010a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80010aa:	6013      	str	r3, [r2, #0]
	DecodedPduInfo.Length=6;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <CanTp_decodeFirstFrame+0x6c>)
 80010ae:	2206      	movs	r2, #6
 80010b0:	609a      	str	r2, [r3, #8]
	uint8_t Counter=0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	73fb      	strb	r3, [r7, #15]

	for(Counter=0;Counter<8;Counter++)
 80010b6:	2300      	movs	r3, #0
 80010b8:	73fb      	strb	r3, [r7, #15]
 80010ba:	e009      	b.n	80010d0 <CanTp_decodeFirstFrame+0x50>
	{
		DecodedPduInfo.Data[Counter]=PduInfoPtr->Data[Counter+2];
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	1c9a      	adds	r2, r3, #2
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	6839      	ldr	r1, [r7, #0]
 80010c4:	5c89      	ldrb	r1, [r1, r2]
 80010c6:	4a09      	ldr	r2, [pc, #36]	; (80010ec <CanTp_decodeFirstFrame+0x6c>)
 80010c8:	54d1      	strb	r1, [r2, r3]
	for(Counter=0;Counter<8;Counter++)
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	3301      	adds	r3, #1
 80010ce:	73fb      	strb	r3, [r7, #15]
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	2b07      	cmp	r3, #7
 80010d4:	d9f2      	bls.n	80010bc <CanTp_decodeFirstFrame+0x3c>
	}
	CanTp_ConnectData(&DecodedPduInfo);
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <CanTp_decodeFirstFrame+0x6c>)
 80010d8:	f000 f88c 	bl	80011f4 <CanTp_ConnectData>
}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000364 	.word	0x20000364
 80010e8:	2000038c 	.word	0x2000038c
 80010ec:	20000380 	.word	0x20000380

080010f0 <CanTp_decodeConsecutiveFrame>:
void CanTp_decodeConsecutiveFrame(uint32_t RxPduId, PduInfoTRx* PduInfoPtr){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	73fb      	strb	r3, [r7, #15]
	DecodedPduInfo.Length = numberOfRemainingBytesToReceive > 7 ? 7 : numberOfRemainingBytesToReceive;
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <CanTp_decodeConsecutiveFrame+0x84>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b07      	cmp	r3, #7
 8001104:	d802      	bhi.n	800110c <CanTp_decodeConsecutiveFrame+0x1c>
 8001106:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <CanTp_decodeConsecutiveFrame+0x84>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	e000      	b.n	800110e <CanTp_decodeConsecutiveFrame+0x1e>
 800110c:	2307      	movs	r3, #7
 800110e:	4a1a      	ldr	r2, [pc, #104]	; (8001178 <CanTp_decodeConsecutiveFrame+0x88>)
 8001110:	6093      	str	r3, [r2, #8]
	if(ConsecSN == (PduInfoPtr->Data[0] & 0x0F)){
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <CanTp_decodeConsecutiveFrame+0x8c>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	461a      	mov	r2, r3
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	429a      	cmp	r2, r3
 8001124:	d122      	bne.n	800116c <CanTp_decodeConsecutiveFrame+0x7c>
		for(i=0 ; i < DecodedPduInfo.Length ; i++)
 8001126:	2300      	movs	r3, #0
 8001128:	73fb      	strb	r3, [r7, #15]
 800112a:	e009      	b.n	8001140 <CanTp_decodeConsecutiveFrame+0x50>
		{
			DecodedPduInfo.Data[i] = PduInfoPtr->Data[i+1];
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	6839      	ldr	r1, [r7, #0]
 8001134:	5c89      	ldrb	r1, [r1, r2]
 8001136:	4a10      	ldr	r2, [pc, #64]	; (8001178 <CanTp_decodeConsecutiveFrame+0x88>)
 8001138:	54d1      	strb	r1, [r2, r3]
		for(i=0 ; i < DecodedPduInfo.Length ; i++)
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	3301      	adds	r3, #1
 800113e:	73fb      	strb	r3, [r7, #15]
 8001140:	7bfa      	ldrb	r2, [r7, #15]
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <CanTp_decodeConsecutiveFrame+0x88>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	429a      	cmp	r2, r3
 8001148:	d3f0      	bcc.n	800112c <CanTp_decodeConsecutiveFrame+0x3c>
		}
		ConsecSN = ConsecSN + 1 > 0xF ? 0 : ConsecSN + 1;
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <CanTp_decodeConsecutiveFrame+0x8c>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b0e      	cmp	r3, #14
 8001152:	d805      	bhi.n	8001160 <CanTp_decodeConsecutiveFrame+0x70>
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <CanTp_decodeConsecutiveFrame+0x8c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	3301      	adds	r3, #1
 800115c:	b2db      	uxtb	r3, r3
 800115e:	e000      	b.n	8001162 <CanTp_decodeConsecutiveFrame+0x72>
 8001160:	2300      	movs	r3, #0
 8001162:	4a06      	ldr	r2, [pc, #24]	; (800117c <CanTp_decodeConsecutiveFrame+0x8c>)
 8001164:	7013      	strb	r3, [r2, #0]
		CanTp_ConnectData(&DecodedPduInfo);
 8001166:	4804      	ldr	r0, [pc, #16]	; (8001178 <CanTp_decodeConsecutiveFrame+0x88>)
 8001168:	f000 f844 	bl	80011f4 <CanTp_ConnectData>
	}
}
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000364 	.word	0x20000364
 8001178:	20000380 	.word	0x20000380
 800117c:	200013c0 	.word	0x200013c0

08001180 <CanTp_decodeFlowControlFrame>:
void CanTp_decodeFlowControlFrame(uint32_t RxPduId, PduInfoTRx* PduInfoPtr){
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
	// Extract the Flow Status, Block Size, and Separation Time from the PDU
	uint8_t flowStatus = PduInfoPtr->Data[0];
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	73fb      	strb	r3, [r7, #15]
	uint8_t blockSize = PduInfoPtr->Data[1];
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	785b      	ldrb	r3, [r3, #1]
 8001194:	73bb      	strb	r3, [r7, #14]
	//	uint8_t separationTime = PduInfoPtr->Data[2];

	// Update the number of consecutive frames to send based on the Block Size
	//	if (blockSize == 0) {
	// Continuous sending without waiting for further flow control
	numberOfConsecutiveFramesToSend = blockSize;
 8001196:	7bbb      	ldrb	r3, [r7, #14]
 8001198:	4a11      	ldr	r2, [pc, #68]	; (80011e0 <CanTp_decodeFlowControlFrame+0x60>)
 800119a:	6013      	str	r3, [r2, #0]
	//	} else {
	//		numberOfConsecutiveFramesToSend = blockSize;
	//	}

	// Handle different flow statuses
	switch (flowStatus) {
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	2b32      	cmp	r3, #50	; 0x32
 80011a0:	d015      	beq.n	80011ce <CanTp_decodeFlowControlFrame+0x4e>
 80011a2:	2b32      	cmp	r3, #50	; 0x32
 80011a4:	dc15      	bgt.n	80011d2 <CanTp_decodeFlowControlFrame+0x52>
 80011a6:	2b30      	cmp	r3, #48	; 0x30
 80011a8:	d002      	beq.n	80011b0 <CanTp_decodeFlowControlFrame+0x30>
 80011aa:	2b31      	cmp	r3, #49	; 0x31
 80011ac:	d00b      	beq.n	80011c6 <CanTp_decodeFlowControlFrame+0x46>
		break;

	default:
		// Invalid flow status, handle as needed (e.g., set an error state)
		//		expectedFrameState = Any_State;
		break;
 80011ae:	e010      	b.n	80011d2 <CanTp_decodeFlowControlFrame+0x52>
		expectedFrameState = Consecutive_Frame_State;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <CanTp_decodeFlowControlFrame+0x64>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
		startOffset = currentOffset;
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <CanTp_decodeFlowControlFrame+0x68>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a0c      	ldr	r2, [pc, #48]	; (80011ec <CanTp_decodeFlowControlFrame+0x6c>)
 80011bc:	6013      	str	r3, [r2, #0]
		ConsecSN = 1;
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <CanTp_decodeFlowControlFrame+0x70>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	701a      	strb	r2, [r3, #0]
		break;
 80011c4:	e006      	b.n	80011d4 <CanTp_decodeFlowControlFrame+0x54>
		expectedFrameState = FlowControl_Frame_State;
 80011c6:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <CanTp_decodeFlowControlFrame+0x64>)
 80011c8:	2202      	movs	r2, #2
 80011ca:	701a      	strb	r2, [r3, #0]
		break;
 80011cc:	e002      	b.n	80011d4 <CanTp_decodeFlowControlFrame+0x54>
		break;
 80011ce:	bf00      	nop
 80011d0:	e000      	b.n	80011d4 <CanTp_decodeFlowControlFrame+0x54>
		break;
 80011d2:	bf00      	nop
	}

}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	20000358 	.word	0x20000358
 80011e4:	20000370 	.word	0x20000370
 80011e8:	20000004 	.word	0x20000004
 80011ec:	200013c4 	.word	0x200013c4
 80011f0:	200013c0 	.word	0x200013c0

080011f4 <CanTp_ConnectData>:

void CanTp_ConnectData(PduInfoTRx* PduInfoPtr){
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	//use CompletePduInfo struct to connect the data received from PduInfoTRx
	uint16_t tempCurrentIndex = currentIndex;
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <CanTp_ConnectData+0x68>)
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	81fb      	strh	r3, [r7, #14]
	while(currentIndex < PduInfoPtr->Length + tempCurrentIndex){
 8001202:	e014      	b.n	800122e <CanTp_ConnectData+0x3a>
		CompletePduInfo.Data[currentIndex] = PduInfoPtr->Data[currentIndex - tempCurrentIndex];
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <CanTp_ConnectData+0x68>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	b29b      	uxth	r3, r3
 800120a:	461a      	mov	r2, r3
 800120c:	89fb      	ldrh	r3, [r7, #14]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	4a12      	ldr	r2, [pc, #72]	; (800125c <CanTp_ConnectData+0x68>)
 8001212:	8812      	ldrh	r2, [r2, #0]
 8001214:	b292      	uxth	r2, r2
 8001216:	4611      	mov	r1, r2
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	5cd2      	ldrb	r2, [r2, r3]
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <CanTp_ConnectData+0x6c>)
 800121e:	545a      	strb	r2, [r3, r1]
		currentIndex++;
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <CanTp_ConnectData+0x68>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	b29b      	uxth	r3, r3
 8001226:	3301      	adds	r3, #1
 8001228:	b29a      	uxth	r2, r3
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <CanTp_ConnectData+0x68>)
 800122c:	801a      	strh	r2, [r3, #0]
	while(currentIndex < PduInfoPtr->Length + tempCurrentIndex){
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <CanTp_ConnectData+0x68>)
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	b29b      	uxth	r3, r3
 8001234:	4619      	mov	r1, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	89fb      	ldrh	r3, [r7, #14]
 800123c:	4413      	add	r3, r2
 800123e:	4299      	cmp	r1, r3
 8001240:	d3e0      	bcc.n	8001204 <CanTp_ConnectData+0x10>
	}
	numberOfRemainingBytesToReceive -= PduInfoPtr->Length;
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <CanTp_ConnectData+0x70>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	4a05      	ldr	r2, [pc, #20]	; (8001264 <CanTp_ConnectData+0x70>)
 800124e:	6013      	str	r3, [r2, #0]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	200013c2 	.word	0x200013c2
 8001260:	2000038c 	.word	0x2000038c
 8001264:	20000364 	.word	0x20000364

08001268 <Sec_u32GetSeed>:
	}

}
#else
void Sec_u32GetSeed (void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	Sec_u32SeedValue = HAL_GetTick();
 800126c:	f000 fd84 	bl	8001d78 <HAL_GetTick>
 8001270:	4603      	mov	r3, r0
 8001272:	4a02      	ldr	r2, [pc, #8]	; (800127c <Sec_u32GetSeed+0x14>)
 8001274:	6013      	str	r3, [r2, #0]
	//	printf("%d",Sec_u32SeedValue) ;
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200013d8 	.word	0x200013d8

08001280 <Sec_u32GetAlgorithm>:

uint32_t Sec_u32GetAlgorithm(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
	return 5 ;
 8001284:	2305      	movs	r3, #5
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <Sec_u32GetKey>:

uint32_t Sec_u32GetKey (void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
	uint32_t Local_u32KeyValue = 0 ;
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
	Local_u32KeyValue = Sec_u32SeedValue + Sec_u32GetAlgorithm() ;
 800129a:	f7ff fff1 	bl	8001280 <Sec_u32GetAlgorithm>
 800129e:	4602      	mov	r2, r0
 80012a0:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <Sec_u32GetKey+0x24>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4413      	add	r3, r2
 80012a6:	607b      	str	r3, [r7, #4]
	return Local_u32KeyValue;
 80012a8:	687b      	ldr	r3, [r7, #4]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200013d8 	.word	0x200013d8

080012b8 <Sec_uint32SecurityAccess>:


uint8_t Sec_uint32SecurityAccess (PduInfoType * Ptr)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorStates = E_OK ;
 80012c0:	2300      	movs	r3, #0
 80012c2:	75fb      	strb	r3, [r7, #23]

	if (Ptr->Data[2] == Seed)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	789b      	ldrb	r3, [r3, #2]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d12d      	bne.n	8001328 <Sec_uint32SecurityAccess+0x70>
	{
		/*Generate Seed */
		Sec_u32GetSeed();
 80012cc:	f7ff ffcc 	bl	8001268 <Sec_u32GetSeed>

		/*Send Frame with Positive Response */
		//		Frame_Info Response ;
		pos_Response.SID 		= Security_Service ;
 80012d0:	4b31      	ldr	r3, [pc, #196]	; (8001398 <Sec_uint32SecurityAccess+0xe0>)
 80012d2:	2227      	movs	r2, #39	; 0x27
 80012d4:	701a      	strb	r2, [r3, #0]
		pos_Response.SUB_FUNC	= Seed ;
 80012d6:	4b30      	ldr	r3, [pc, #192]	; (8001398 <Sec_uint32SecurityAccess+0xe0>)
 80012d8:	2201      	movs	r2, #1
 80012da:	705a      	strb	r2, [r3, #1]
		for(int i =0 ; i< 4; i++)
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	e013      	b.n	800130a <Sec_uint32SecurityAccess+0x52>
		{
			pos_Response.Data[i] 		=(uint8_t) Sec_u32SeedValue>>(24-(i*8)) ;
 80012e2:	4b2e      	ldr	r3, [pc, #184]	; (800139c <Sec_uint32SecurityAccess+0xe4>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	461a      	mov	r2, r3
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	f1c3 0303 	rsb	r3, r3, #3
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	fa42 f303 	asr.w	r3, r2, r3
 80012f6:	b259      	sxtb	r1, r3
 80012f8:	4a27      	ldr	r2, [pc, #156]	; (8001398 <Sec_uint32SecurityAccess+0xe0>)
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4413      	add	r3, r2
 80012fe:	3305      	adds	r3, #5
 8001300:	460a      	mov	r2, r1
 8001302:	701a      	strb	r2, [r3, #0]
		for(int i =0 ; i< 4; i++)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	3301      	adds	r3, #1
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	2b03      	cmp	r3, #3
 800130e:	dde8      	ble.n	80012e2 <Sec_uint32SecurityAccess+0x2a>
		}
		pos_Response.Data_Length=4;
 8001310:	4b21      	ldr	r3, [pc, #132]	; (8001398 <Sec_uint32SecurityAccess+0xe0>)
 8001312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001316:	2204      	movs	r2, #4
 8001318:	715a      	strb	r2, [r3, #5]
		pos_Response.DID_Length=0;
 800131a:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <Sec_uint32SecurityAccess+0xe0>)
 800131c:	2200      	movs	r2, #0
 800131e:	711a      	strb	r2, [r3, #4]

		UDS_Send_Pos_Res(&pos_Response) ;
 8001320:	481d      	ldr	r0, [pc, #116]	; (8001398 <Sec_uint32SecurityAccess+0xe0>)
 8001322:	f000 fa9d 	bl	8001860 <UDS_Send_Pos_Res>
 8001326:	e032      	b.n	800138e <Sec_uint32SecurityAccess+0xd6>
	}
	else if (Ptr->Data[2] == Key)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	789b      	ldrb	r3, [r3, #2]
 800132c:	2b02      	cmp	r3, #2
 800132e:	d126      	bne.n	800137e <Sec_uint32SecurityAccess+0xc6>
	{
		uint32_t user_key= Ptr->Data[3]<<24 | Ptr->Data[4]<<16 | Ptr->Data[5]<<8 |Ptr->Data[6];
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	78db      	ldrb	r3, [r3, #3]
 8001334:	061a      	lsls	r2, r3, #24
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	791b      	ldrb	r3, [r3, #4]
 800133a:	041b      	lsls	r3, r3, #16
 800133c:	431a      	orrs	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	795b      	ldrb	r3, [r3, #5]
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	4313      	orrs	r3, r2
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	7992      	ldrb	r2, [r2, #6]
 800134a:	4313      	orrs	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
		/*Check if Key sent is correct or Not */
		if (user_key == Sec_u32GetKey())
 800134e:	f7ff ff9f 	bl	8001290 <Sec_u32GetKey>
 8001352:	4602      	mov	r2, r0
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4293      	cmp	r3, r2
 8001358:	d107      	bne.n	800136a <Sec_uint32SecurityAccess+0xb2>
		{
			/*Change the state of security */
			Sec_State = Secure ;
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <Sec_uint32SecurityAccess+0xe8>)
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]
			/*Send Positive Response */
			pos_Response.SID= Ptr->Data[1];
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	785a      	ldrb	r2, [r3, #1]
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <Sec_uint32SecurityAccess+0xe0>)
 8001366:	701a      	strb	r2, [r3, #0]
 8001368:	e011      	b.n	800138e <Sec_uint32SecurityAccess+0xd6>
			//UDS_Send_Pos_Res();
		}
		else
		{
			Sec_State = Un_Secure ;
 800136a:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <Sec_uint32SecurityAccess+0xe8>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
			UDS_Send_Neg_Res(Ptr->Data[1] , NRC_sec_key_seed) ;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	785b      	ldrb	r3, [r3, #1]
 8001374:	2128      	movs	r1, #40	; 0x28
 8001376:	4618      	mov	r0, r3
 8001378:	f000 fae0 	bl	800193c <UDS_Send_Neg_Res>
 800137c:	e007      	b.n	800138e <Sec_uint32SecurityAccess+0xd6>
		}
	}
	else
	{
		Local_u8ErrorStates = E_NOK ;
 800137e:	2301      	movs	r3, #1
 8001380:	75fb      	strb	r3, [r7, #23]
		UDS_Send_Neg_Res(Ptr->Data[1] , NRC_sub_fun) ;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	785b      	ldrb	r3, [r3, #1]
 8001386:	211e      	movs	r1, #30
 8001388:	4618      	mov	r0, r3
 800138a:	f000 fad7 	bl	800193c <UDS_Send_Neg_Res>
	}


	return Local_u8ErrorStates ;
 800138e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	200013e0 	.word	0x200013e0
 800139c:	200013d8 	.word	0x200013d8
 80013a0:	200013dc 	.word	0x200013dc

080013a4 <UDS_Read_Data_Server>:


/***************************************************************************************************/
void UDS_Read_Data_Server(uint8_t* data)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	f107 0310 	add.w	r3, r7, #16
 80013b2:	f843 0c0c 	str.w	r0, [r3, #-12]
	ServiceInfo Read_Data_Server ;
	Read_Data_Server.SID = 0x22;
 80013b6:	f107 0310 	add.w	r3, r7, #16
 80013ba:	2222      	movs	r2, #34	; 0x22
 80013bc:	f803 2c08 	strb.w	r2, [r3, #-8]
	Read_Data_Server.SUB_FUNC = -1;
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	22ff      	movs	r2, #255	; 0xff
 80013c6:	f803 2c07 	strb.w	r2, [r3, #-7]
	uint8_t NRC = 2;
 80013ca:	2302      	movs	r3, #2
 80013cc:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80013d0:	f102 020f 	add.w	r2, r2, #15
 80013d4:	7013      	strb	r3, [r2, #0]
	//if DID --> Oil_Temp
	if((data[1] == 0xF1) && (data[2] == 0x3D) )
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 80013de:	3301      	adds	r3, #1
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2bf1      	cmp	r3, #241	; 0xf1
 80013e4:	d140      	bne.n	8001468 <UDS_Read_Data_Server+0xc4>
 80013e6:	f107 0310 	add.w	r3, r7, #16
 80013ea:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 80013ee:	3302      	adds	r3, #2
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b3d      	cmp	r3, #61	; 0x3d
 80013f4:	d138      	bne.n	8001468 <UDS_Read_Data_Server+0xc4>
	{
		Read_Data_Server.DID[0] = 0xF1;
 80013f6:	f107 0310 	add.w	r3, r7, #16
 80013fa:	22f1      	movs	r2, #241	; 0xf1
 80013fc:	f803 2c06 	strb.w	r2, [r3, #-6]
		Read_Data_Server.DID[1] = 0x3D;
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	223d      	movs	r2, #61	; 0x3d
 8001406:	f803 2c05 	strb.w	r2, [r3, #-5]
		Read_Data_Server.DID_Length = 2;
 800140a:	f107 0310 	add.w	r3, r7, #16
 800140e:	2202      	movs	r2, #2
 8001410:	f803 2c04 	strb.w	r2, [r3, #-4]
		//For Debugging
		//HAL_UART_Transmit(&huart2, "\r\nRead Frame Client DID:", 50, HAL_MAX_DELAY);
		//sendHexArrayAsASCII(Read_Data_Server.DID, Read_Data_Server.DID_Length );
		//HAL_UART_Transmit(&huart2, "\r\n", 50, HAL_MAX_DELAY);

		Read_Data_Server.Data[0] = 0x55; //value of Oil_Temp
 8001414:	f107 0310 	add.w	r3, r7, #16
 8001418:	2255      	movs	r2, #85	; 0x55
 800141a:	f803 2c03 	strb.w	r2, [r3, #-3]
		Read_Data_Server.Data[1] = 0x66; //value of Oil_Temp
 800141e:	f107 0310 	add.w	r3, r7, #16
 8001422:	2266      	movs	r2, #102	; 0x66
 8001424:	f803 2c02 	strb.w	r2, [r3, #-2]
		Read_Data_Server.Data_Length = 2;
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	2202      	movs	r2, #2
 800142e:	f883 2ffd 	strb.w	r2, [r3, #4093]	; 0xffd

		pos_Response.SID = Read_Service ;
 8001432:	4b43      	ldr	r3, [pc, #268]	; (8001540 <UDS_Read_Data_Server+0x19c>)
 8001434:	2222      	movs	r2, #34	; 0x22
 8001436:	701a      	strb	r2, [r3, #0]
		pos_Response.DID[0]=0xF1;
 8001438:	4b41      	ldr	r3, [pc, #260]	; (8001540 <UDS_Read_Data_Server+0x19c>)
 800143a:	22f1      	movs	r2, #241	; 0xf1
 800143c:	709a      	strb	r2, [r3, #2]
		pos_Response.DID[1]=0x3D;
 800143e:	4b40      	ldr	r3, [pc, #256]	; (8001540 <UDS_Read_Data_Server+0x19c>)
 8001440:	223d      	movs	r2, #61	; 0x3d
 8001442:	70da      	strb	r2, [r3, #3]
		pos_Response.DID_Length=2;
 8001444:	4b3e      	ldr	r3, [pc, #248]	; (8001540 <UDS_Read_Data_Server+0x19c>)
 8001446:	2202      	movs	r2, #2
 8001448:	711a      	strb	r2, [r3, #4]
		pos_Response.Data[0]=0x55;
 800144a:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <UDS_Read_Data_Server+0x19c>)
 800144c:	2255      	movs	r2, #85	; 0x55
 800144e:	715a      	strb	r2, [r3, #5]
		pos_Response.Data[1]=0x66;
 8001450:	4b3b      	ldr	r3, [pc, #236]	; (8001540 <UDS_Read_Data_Server+0x19c>)
 8001452:	2266      	movs	r2, #102	; 0x66
 8001454:	719a      	strb	r2, [r3, #6]
		pos_Response.Data_Length = 2;
 8001456:	4b3a      	ldr	r3, [pc, #232]	; (8001540 <UDS_Read_Data_Server+0x19c>)
 8001458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800145c:	2202      	movs	r2, #2
 800145e:	715a      	strb	r2, [r3, #5]


		UDS_Send_Pos_Res(&pos_Response);
 8001460:	4837      	ldr	r0, [pc, #220]	; (8001540 <UDS_Read_Data_Server+0x19c>)
 8001462:	f000 f9fd 	bl	8001860 <UDS_Send_Pos_Res>
 8001466:	e065      	b.n	8001534 <UDS_Read_Data_Server+0x190>
		//	UDS_Send_Pos_Res(Read_Data_Server);
	}//if DID --> Oil_Pressure
	else if((data[1] == 0xF5) && (data[2] == 0x3D) )
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8001470:	3301      	adds	r3, #1
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2bf5      	cmp	r3, #245	; 0xf5
 8001476:	d14f      	bne.n	8001518 <UDS_Read_Data_Server+0x174>
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8001480:	3302      	adds	r3, #2
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b3d      	cmp	r3, #61	; 0x3d
 8001486:	d147      	bne.n	8001518 <UDS_Read_Data_Server+0x174>
	{
		Read_Data_Server.DID[0] = 0xF5;
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	22f5      	movs	r2, #245	; 0xf5
 800148e:	f803 2c06 	strb.w	r2, [r3, #-6]
		Read_Data_Server.DID[1] = 0x3D;
 8001492:	f107 0310 	add.w	r3, r7, #16
 8001496:	223d      	movs	r2, #61	; 0x3d
 8001498:	f803 2c05 	strb.w	r2, [r3, #-5]
		Read_Data_Server.DID_Length = 2;
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	2202      	movs	r2, #2
 80014a2:	f803 2c04 	strb.w	r2, [r3, #-4]
		//For Debugging
		//HAL_UART_Transmit(&huart2, "\r\nRead Frame Client DID:", 50, HAL_MAX_DELAY);
		//sendHexArrayAsASCII(Read_Data_Server.DID, Read_Data_Server.DID_Length );
		//HAL_UART_Transmit(&huart2, "\r\n", 50, HAL_MAX_DELAY);
		Read_Data_Server.Data[0] = 0x77; //value of Oil_Pressure
 80014a6:	f107 0310 	add.w	r3, r7, #16
 80014aa:	2277      	movs	r2, #119	; 0x77
 80014ac:	f803 2c03 	strb.w	r2, [r3, #-3]
		Read_Data_Server.Data[1] = 0x88; //value of Oil_Pressure
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	2288      	movs	r2, #136	; 0x88
 80014b6:	f803 2c02 	strb.w	r2, [r3, #-2]
		Read_Data_Server.Data[2] = 0x99; //value of Oil_Pressure
 80014ba:	f107 0310 	add.w	r3, r7, #16
 80014be:	2299      	movs	r2, #153	; 0x99
 80014c0:	f803 2c01 	strb.w	r2, [r3, #-1]
		Read_Data_Server.Data[3] = 0xAA; //value of Oil_Pressure
 80014c4:	f107 0310 	add.w	r3, r7, #16
 80014c8:	22aa      	movs	r2, #170	; 0xaa
 80014ca:	701a      	strb	r2, [r3, #0]
		Read_Data_Server.Data_Length = 4;
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	2204      	movs	r2, #4
 80014d2:	f883 2ffd 	strb.w	r2, [r3, #4093]	; 0xffd
		//Send +ve responce
		pos_Response.SID = Read_Service ;
 80014d6:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <UDS_Read_Data_Server+0x19c>)
 80014d8:	2222      	movs	r2, #34	; 0x22
 80014da:	701a      	strb	r2, [r3, #0]
		pos_Response.DID[0]=0xF1;
 80014dc:	4b18      	ldr	r3, [pc, #96]	; (8001540 <UDS_Read_Data_Server+0x19c>)
 80014de:	22f1      	movs	r2, #241	; 0xf1
 80014e0:	709a      	strb	r2, [r3, #2]
		pos_Response.DID[1]=0x3D;
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <UDS_Read_Data_Server+0x19c>)
 80014e4:	223d      	movs	r2, #61	; 0x3d
 80014e6:	70da      	strb	r2, [r3, #3]
		pos_Response.DID_Length=2;
 80014e8:	4b15      	ldr	r3, [pc, #84]	; (8001540 <UDS_Read_Data_Server+0x19c>)
 80014ea:	2202      	movs	r2, #2
 80014ec:	711a      	strb	r2, [r3, #4]
		pos_Response.Data[0]=0x77;
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <UDS_Read_Data_Server+0x19c>)
 80014f0:	2277      	movs	r2, #119	; 0x77
 80014f2:	715a      	strb	r2, [r3, #5]
		pos_Response.Data[1]=0x88;
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <UDS_Read_Data_Server+0x19c>)
 80014f6:	2288      	movs	r2, #136	; 0x88
 80014f8:	719a      	strb	r2, [r3, #6]
		pos_Response.Data[2]=0x99;
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <UDS_Read_Data_Server+0x19c>)
 80014fc:	2299      	movs	r2, #153	; 0x99
 80014fe:	71da      	strb	r2, [r3, #7]
		pos_Response.Data[3]=0xAA;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <UDS_Read_Data_Server+0x19c>)
 8001502:	22aa      	movs	r2, #170	; 0xaa
 8001504:	721a      	strb	r2, [r3, #8]

		pos_Response.Data_Length = 4;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <UDS_Read_Data_Server+0x19c>)
 8001508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800150c:	2204      	movs	r2, #4
 800150e:	715a      	strb	r2, [r3, #5]
		UDS_Send_Pos_Res(&pos_Response);
 8001510:	480b      	ldr	r0, [pc, #44]	; (8001540 <UDS_Read_Data_Server+0x19c>)
 8001512:	f000 f9a5 	bl	8001860 <UDS_Send_Pos_Res>
 8001516:	e00d      	b.n	8001534 <UDS_Read_Data_Server+0x190>
		//HAL_UART_Transmit(&huart2, "\r\n", 50, HAL_MAX_DELAY);
	}
	else
	{
		//otherwize: send -ve responce
		UDS_Send_Neg_Res(Read_Data_Server.SID, NRC);
 8001518:	f107 0310 	add.w	r3, r7, #16
 800151c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001520:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001524:	f102 020f 	add.w	r2, r2, #15
 8001528:	7812      	ldrb	r2, [r2, #0]
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f000 fa05 	bl	800193c <UDS_Send_Neg_Res>
	}

}
 8001532:	bf00      	nop
 8001534:	bf00      	nop
 8001536:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	200013e0 	.word	0x200013e0

08001544 <UDS_Control_Session_Server>:

/*********************************************************************************************/


void UDS_Control_Session_Server(uint8_t *Received)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	uint8_t NRC = 1;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]


	if(Received[2] == DefaultSession || Received[2] == ExtendedSession)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3302      	adds	r3, #2
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d004      	beq.n	8001564 <UDS_Control_Session_Server+0x20>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3302      	adds	r3, #2
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b03      	cmp	r3, #3
 8001562:	d119      	bne.n	8001598 <UDS_Control_Session_Server+0x54>
	{
		global_session = Received[2];
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	789a      	ldrb	r2, [r3, #2]
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <UDS_Control_Session_Server+0x70>)
 800156a:	701a      	strb	r2, [r3, #0]
		Control.SID = Received[1];
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	785a      	ldrb	r2, [r3, #1]
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <UDS_Control_Session_Server+0x74>)
 8001572:	701a      	strb	r2, [r3, #0]
		Control.SUB_FUNC = Received[2];
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3302      	adds	r3, #2
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b25a      	sxtb	r2, r3
 800157c:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <UDS_Control_Session_Server+0x74>)
 800157e:	705a      	strb	r2, [r3, #1]
		Control.DID_Length = 0;
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <UDS_Control_Session_Server+0x74>)
 8001582:	2200      	movs	r2, #0
 8001584:	711a      	strb	r2, [r3, #4]
		Control.Data_Length = 0;
 8001586:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <UDS_Control_Session_Server+0x74>)
 8001588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800158c:	2200      	movs	r2, #0
 800158e:	715a      	strb	r2, [r3, #5]
		UDS_Send_Pos_Res(&Control);
 8001590:	4809      	ldr	r0, [pc, #36]	; (80015b8 <UDS_Control_Session_Server+0x74>)
 8001592:	f000 f965 	bl	8001860 <UDS_Send_Pos_Res>
 8001596:	e008      	b.n	80015aa <UDS_Control_Session_Server+0x66>
	}
	else
	{
		UDS_Send_Neg_Res(Received[1], NRC);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3301      	adds	r3, #1
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	4611      	mov	r1, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f9ca 	bl	800193c <UDS_Send_Neg_Res>
	}
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200013d5 	.word	0x200013d5
 80015b8:	200023ec 	.word	0x200023ec

080015bc <server_call_back>:

void server_call_back(uint32_t TxPduId, PduInfoType* ptr)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
	PduDataPTR = ptr;
 80015c6:	4a81      	ldr	r2, [pc, #516]	; (80017cc <server_call_back+0x210>)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	6013      	str	r3, [r2, #0]
	// create flag for check SID this is local bec . every frame i need to check the sid
	uint8_t local_sid_flag = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	72fb      	strb	r3, [r7, #11]

	// this for test only
	//uint8_t ptr->Data[20] = {2 ,Control_Service , 5 };

	// for SID validation
	if (ptr->Data[1] == Control_Service || ptr->Data[1]== Read_Service || ptr->Data[1] == Write_Service || ptr->Data[1] == Security_Service || ptr->Data[1] == Tester_Representer_Service)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	785b      	ldrb	r3, [r3, #1]
 80015d4:	2b10      	cmp	r3, #16
 80015d6:	d00f      	beq.n	80015f8 <server_call_back+0x3c>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	785b      	ldrb	r3, [r3, #1]
 80015dc:	2b22      	cmp	r3, #34	; 0x22
 80015de:	d00b      	beq.n	80015f8 <server_call_back+0x3c>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	785b      	ldrb	r3, [r3, #1]
 80015e4:	2b2e      	cmp	r3, #46	; 0x2e
 80015e6:	d007      	beq.n	80015f8 <server_call_back+0x3c>
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	785b      	ldrb	r3, [r3, #1]
 80015ec:	2b27      	cmp	r3, #39	; 0x27
 80015ee:	d003      	beq.n	80015f8 <server_call_back+0x3c>
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	785b      	ldrb	r3, [r3, #1]
 80015f4:	2b3e      	cmp	r3, #62	; 0x3e
 80015f6:	d105      	bne.n	8001604 <server_call_back+0x48>
	{
		// tmam

		local_sid_flag = 1;
 80015f8:	2301      	movs	r3, #1
 80015fa:	72fb      	strb	r3, [r7, #11]
		// this mean the SID not supported
		UDS_Send_Neg_Res(ptr->Data[1],  NRC);
		// go out of isr
		return;
	}
	if (local_sid_flag)
 80015fc:	7afb      	ldrb	r3, [r7, #11]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10a      	bne.n	8001618 <server_call_back+0x5c>
 8001602:	e0ae      	b.n	8001762 <server_call_back+0x1a6>
		uint8_t NRC = NRC_SID;
 8001604:	2314      	movs	r3, #20
 8001606:	72bb      	strb	r3, [r7, #10]
		UDS_Send_Neg_Res(ptr->Data[1],  NRC);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	785b      	ldrb	r3, [r3, #1]
 800160c:	7aba      	ldrb	r2, [r7, #10]
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f000 f993 	bl	800193c <UDS_Send_Neg_Res>
		return;
 8001616:	e0d5      	b.n	80017c4 <server_call_back+0x208>
	{
		if (ptr->Data[1] == Control_Service)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	785b      	ldrb	r3, [r3, #1]
 800161c:	2b10      	cmp	r3, #16
 800161e:	d103      	bne.n	8001628 <server_call_back+0x6c>
		{
			flag_sub_fun = 1;
 8001620:	4b6b      	ldr	r3, [pc, #428]	; (80017d0 <server_call_back+0x214>)
 8001622:	2201      	movs	r2, #1
 8001624:	701a      	strb	r2, [r3, #0]
 8001626:	e09c      	b.n	8001762 <server_call_back+0x1a6>
		}
		else if (ptr->Data[1] == Read_Service)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	785b      	ldrb	r3, [r3, #1]
 800162c:	2b22      	cmp	r3, #34	; 0x22
 800162e:	d104      	bne.n	800163a <server_call_back+0x7e>
			// send read function (rad resp as the actual ptr->Data of temp or pressure)
			//	HAL_UART_Transmit(&huart2, (const uint8_t*)" UDS_Read_Data_Server() \r\n", 50, HAL_MAX_DELAY ); // delete ---> after write your func

			//UDS_Read_Data_Server();

			UDS_Read_Data_Server(ptr->Data);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff feb6 	bl	80013a4 <UDS_Read_Data_Server>
 8001638:	e093      	b.n	8001762 <server_call_back+0x1a6>

		}
		else if (ptr->Data[1] == Security_Service )
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	785b      	ldrb	r3, [r3, #1]
 800163e:	2b27      	cmp	r3, #39	; 0x27
 8001640:	d12b      	bne.n	800169a <server_call_back+0xde>
		{

			//	printf("send_ser_sec() +ive resp \n");
			HAL_UART_Transmit(&huart2, (const uint8_t*)" send_ser_sec() +ive resp change the flag \r\n", 50, 100 ); // delete this after you put your func
 8001642:	2364      	movs	r3, #100	; 0x64
 8001644:	2232      	movs	r2, #50	; 0x32
 8001646:	4963      	ldr	r1, [pc, #396]	; (80017d4 <server_call_back+0x218>)
 8001648:	4863      	ldr	r0, [pc, #396]	; (80017d8 <server_call_back+0x21c>)
 800164a:	f002 fe70 	bl	800432e <HAL_UART_Transmit>

			//		send_ser_sec() ; // send seed

			// (write here +ive resp for security) ------------------------> here
			pos_Response.SID=ptr->Data[1];
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	785a      	ldrb	r2, [r3, #1]
 8001652:	4b62      	ldr	r3, [pc, #392]	; (80017dc <server_call_back+0x220>)
 8001654:	701a      	strb	r2, [r3, #0]
			for(int i =0 ; i< 2 ; i++)
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	e00d      	b.n	8001678 <server_call_back+0xbc>
			{
				pos_Response.DID[i]= ptr->Data[2+i];
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3302      	adds	r3, #2
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	5cd3      	ldrb	r3, [r2, r3]
 8001664:	b259      	sxtb	r1, r3
 8001666:	4a5d      	ldr	r2, [pc, #372]	; (80017dc <server_call_back+0x220>)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	3302      	adds	r3, #2
 800166e:	460a      	mov	r2, r1
 8001670:	701a      	strb	r2, [r3, #0]
			for(int i =0 ; i< 2 ; i++)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3301      	adds	r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b01      	cmp	r3, #1
 800167c:	ddee      	ble.n	800165c <server_call_back+0xa0>
			}
			pos_Response.DID_Length=2;
 800167e:	4b57      	ldr	r3, [pc, #348]	; (80017dc <server_call_back+0x220>)
 8001680:	2202      	movs	r2, #2
 8001682:	711a      	strb	r2, [r3, #4]

			pos_Response.Data_Length=0;
 8001684:	4b55      	ldr	r3, [pc, #340]	; (80017dc <server_call_back+0x220>)
 8001686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800168a:	2200      	movs	r2, #0
 800168c:	715a      	strb	r2, [r3, #5]
			Sec_uint32SecurityAccess(PduDataPTR);
 800168e:	4b4f      	ldr	r3, [pc, #316]	; (80017cc <server_call_back+0x210>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fe10 	bl	80012b8 <Sec_uint32SecurityAccess>
 8001698:	e063      	b.n	8001762 <server_call_back+0x1a6>
		}


		else if (ptr->Data[1] == Write_Service && global_sec_flag ==1 && global_session == Extended_Session  )
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	785b      	ldrb	r3, [r3, #1]
 800169e:	2b2e      	cmp	r3, #46	; 0x2e
 80016a0:	d11e      	bne.n	80016e0 <server_call_back+0x124>
 80016a2:	4b4f      	ldr	r3, [pc, #316]	; (80017e0 <server_call_back+0x224>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d119      	bne.n	80016e0 <server_call_back+0x124>
 80016ac:	4b4d      	ldr	r3, [pc, #308]	; (80017e4 <server_call_back+0x228>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d114      	bne.n	80016e0 <server_call_back+0x124>
		{
			//printf("u are in Write_Service\n");
			HAL_UART_Transmit(&huart2, (const uint8_t*)" u are in Write_Service \r\n", 50, 100 );
 80016b6:	2364      	movs	r3, #100	; 0x64
 80016b8:	2232      	movs	r2, #50	; 0x32
 80016ba:	494b      	ldr	r1, [pc, #300]	; (80017e8 <server_call_back+0x22c>)
 80016bc:	4846      	ldr	r0, [pc, #280]	; (80017d8 <server_call_back+0x21c>)
 80016be:	f002 fe36 	bl	800432e <HAL_UART_Transmit>
			// send write response
			//	printf("UDS_Write_Data_Server() \n");
			HAL_UART_Transmit(&huart2, (const uint8_t*)" UDS_Write_Data_Server() \r\n", 50, 100 ); // delete it after put your func
 80016c2:	2364      	movs	r3, #100	; 0x64
 80016c4:	2232      	movs	r2, #50	; 0x32
 80016c6:	4949      	ldr	r1, [pc, #292]	; (80017ec <server_call_back+0x230>)
 80016c8:	4843      	ldr	r0, [pc, #268]	; (80017d8 <server_call_back+0x21c>)
 80016ca:	f002 fe30 	bl	800432e <HAL_UART_Transmit>

			// ptr->Data write with +ive resp


			UDS_Write_Data_Server(ptr->Data,  ptr->Data[0]);
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	4619      	mov	r1, r3
 80016d8:	4610      	mov	r0, r2
 80016da:	f000 f897 	bl	800180c <UDS_Write_Data_Server>
 80016de:	e040      	b.n	8001762 <server_call_back+0x1a6>
		}
		else if (ptr->Data[1] == Write_Service && global_sec_flag == 0 && global_session == Extended_Session )
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	785b      	ldrb	r3, [r3, #1]
 80016e4:	2b2e      	cmp	r3, #46	; 0x2e
 80016e6:	d11c      	bne.n	8001722 <server_call_back+0x166>
 80016e8:	4b3d      	ldr	r3, [pc, #244]	; (80017e0 <server_call_back+0x224>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d117      	bne.n	8001722 <server_call_back+0x166>
 80016f2:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <server_call_back+0x228>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	d112      	bne.n	8001722 <server_call_back+0x166>
		{
			//printf("u are not in Write_Service\n");
			HAL_UART_Transmit(&huart2, (const uint8_t*)" u are not in Write_Service \r\n", 50, 100 );
 80016fc:	2364      	movs	r3, #100	; 0x64
 80016fe:	2232      	movs	r2, #50	; 0x32
 8001700:	493b      	ldr	r1, [pc, #236]	; (80017f0 <server_call_back+0x234>)
 8001702:	4835      	ldr	r0, [pc, #212]	; (80017d8 <server_call_back+0x21c>)
 8001704:	f002 fe13 	bl	800432e <HAL_UART_Transmit>
			// send -ive response
			//printf("UDS_Write_Data_Server() \n");
			HAL_UART_Transmit(&huart2, (const uint8_t*)"UDS_Write_Data_Server() \r\n", 50, 100 ); // delete this after put your func
 8001708:	2364      	movs	r3, #100	; 0x64
 800170a:	2232      	movs	r2, #50	; 0x32
 800170c:	4939      	ldr	r1, [pc, #228]	; (80017f4 <server_call_back+0x238>)
 800170e:	4832      	ldr	r0, [pc, #200]	; (80017d8 <server_call_back+0x21c>)
 8001710:	f002 fe0d 	bl	800432e <HAL_UART_Transmit>
			// (write here -ive resp for write security ) ------------------------> here

			UDS_Send_Neg_Res(ptr->Data[1], NRC_WRITE_secuirty);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	785b      	ldrb	r3, [r3, #1]
 8001718:	210a      	movs	r1, #10
 800171a:	4618      	mov	r0, r3
 800171c:	f000 f90e 	bl	800193c <UDS_Send_Neg_Res>
 8001720:	e01f      	b.n	8001762 <server_call_back+0x1a6>

		}
		else if (ptr->Data[1] == Write_Service  && global_session == Default_Session)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	785b      	ldrb	r3, [r3, #1]
 8001726:	2b2e      	cmp	r3, #46	; 0x2e
 8001728:	d10b      	bne.n	8001742 <server_call_back+0x186>
 800172a:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <server_call_back+0x228>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d106      	bne.n	8001742 <server_call_back+0x186>
		{
			// (write here -ive resp for write session (NRC ) ------------------------> here

			UDS_Send_Neg_Res(ptr->Data[1], NRC_WRITE_defualt);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	785b      	ldrb	r3, [r3, #1]
 8001738:	210f      	movs	r1, #15
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f8fe 	bl	800193c <UDS_Send_Neg_Res>
 8001740:	e00f      	b.n	8001762 <server_call_back+0x1a6>

		}
		else if (ptr->Data[1] == Tester_Representer_Service)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	785b      	ldrb	r3, [r3, #1]
 8001746:	2b3e      	cmp	r3, #62	; 0x3e
 8001748:	d10b      	bne.n	8001762 <server_call_back+0x1a6>
		{
			//printf("u are in Tester_Representer_Service\n");
			HAL_UART_Transmit(&huart2, (const uint8_t*)" u are in Tester_Representer_Service \r\n", 50, 100 );
 800174a:	2364      	movs	r3, #100	; 0x64
 800174c:	2232      	movs	r2, #50	; 0x32
 800174e:	492a      	ldr	r1, [pc, #168]	; (80017f8 <server_call_back+0x23c>)
 8001750:	4821      	ldr	r0, [pc, #132]	; (80017d8 <server_call_back+0x21c>)
 8001752:	f002 fdec 	bl	800432e <HAL_UART_Transmit>
			// call the fun of tester Representer
			//printf("void UDS_Tester_Present(void) \n");
			HAL_UART_Transmit(&huart2, (const uint8_t*)" void UDS_Tester_Present(void) \r\n", 50, 100 ); // delete this func after put your func
 8001756:	2364      	movs	r3, #100	; 0x64
 8001758:	2232      	movs	r2, #50	; 0x32
 800175a:	4928      	ldr	r1, [pc, #160]	; (80017fc <server_call_back+0x240>)
 800175c:	481e      	ldr	r0, [pc, #120]	; (80017d8 <server_call_back+0x21c>)
 800175e:	f002 fde6 	bl	800432e <HAL_UART_Transmit>

			// (write here +ive resp for  Tester_Representer_Service) ------------------------> here
		}
	}
	// check sub fun
	if (flag_sub_fun== sub_func_control)
 8001762:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <server_call_back+0x214>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b01      	cmp	r3, #1
 800176a:	d12b      	bne.n	80017c4 <server_call_back+0x208>
	{
		// true sub fun
		if (ptr->Data[1]== Control_Service && ptr->Data[2] == DefaultSession)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	785b      	ldrb	r3, [r3, #1]
 8001770:	2b10      	cmp	r3, #16
 8001772:	d114      	bne.n	800179e <server_call_back+0x1e2>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	789b      	ldrb	r3, [r3, #2]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d110      	bne.n	800179e <server_call_back+0x1e2>
		{
			// change the state to default
			//	printf(" UDS_Process_Session(void); \n ");
			HAL_UART_Transmit(&huart2, (const uint8_t*)" UDS_Process_Session(void) \r\n", 50, 100 );
 800177c:	2364      	movs	r3, #100	; 0x64
 800177e:	2232      	movs	r2, #50	; 0x32
 8001780:	491f      	ldr	r1, [pc, #124]	; (8001800 <server_call_back+0x244>)
 8001782:	4815      	ldr	r0, [pc, #84]	; (80017d8 <server_call_back+0x21c>)
 8001784:	f002 fdd3 	bl	800432e <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart2, (const uint8_t*)" changed to DefaultSession \r\n", 50, 100 );
 8001788:	2364      	movs	r3, #100	; 0x64
 800178a:	2232      	movs	r2, #50	; 0x32
 800178c:	491d      	ldr	r1, [pc, #116]	; (8001804 <server_call_back+0x248>)
 800178e:	4812      	ldr	r0, [pc, #72]	; (80017d8 <server_call_back+0x21c>)
 8001790:	f002 fdcd 	bl	800432e <HAL_UART_Transmit>
			// (write here +ive resp for  change to def- session ) ------------------------> here


			UDS_Control_Session_Server(ptr->Data);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fed4 	bl	8001544 <UDS_Control_Session_Server>
 800179c:	e012      	b.n	80017c4 <server_call_back+0x208>
			//global_session = Default_Session;

		}
		else if (ptr->Data[1] == Control_Service && ptr->Data[2] == ExtendedSession)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	785b      	ldrb	r3, [r3, #1]
 80017a2:	2b10      	cmp	r3, #16
 80017a4:	d108      	bne.n	80017b8 <server_call_back+0x1fc>
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	789b      	ldrb	r3, [r3, #2]
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d104      	bne.n	80017b8 <server_call_back+0x1fc>
			//	printf(" changed to ExtendedSession ");
			//	HAL_UART_Transmit(&huart2, (const uint8_t*)" changed to ExtendedSession \r\n", 50, 100 );

			// (write here +ive resp for  change to ext session ) ------------------------> here
			//global_session = Extended_Session;
			UDS_Control_Session_Server(ptr->Data);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fec7 	bl	8001544 <UDS_Control_Session_Server>
 80017b6:	e005      	b.n	80017c4 <server_call_back+0x208>
		}
		else
		{
			//printf(" not supported ");
			HAL_UART_Transmit(&huart2, (const uint8_t*)" not supported \r\n", 50, 100 );
 80017b8:	2364      	movs	r3, #100	; 0x64
 80017ba:	2232      	movs	r2, #50	; 0x32
 80017bc:	4912      	ldr	r1, [pc, #72]	; (8001808 <server_call_back+0x24c>)
 80017be:	4806      	ldr	r0, [pc, #24]	; (80017d8 <server_call_back+0x21c>)
 80017c0:	f002 fdb5 	bl	800432e <HAL_UART_Transmit>

		// error in sub func

	}

}
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200023e8 	.word	0x200023e8
 80017d0:	200013d6 	.word	0x200013d6
 80017d4:	080069bc 	.word	0x080069bc
 80017d8:	20004440 	.word	0x20004440
 80017dc:	200013e0 	.word	0x200013e0
 80017e0:	200013d4 	.word	0x200013d4
 80017e4:	200013d5 	.word	0x200013d5
 80017e8:	080069ec 	.word	0x080069ec
 80017ec:	08006a08 	.word	0x08006a08
 80017f0:	08006a24 	.word	0x08006a24
 80017f4:	08006a44 	.word	0x08006a44
 80017f8:	08006a60 	.word	0x08006a60
 80017fc:	08006a88 	.word	0x08006a88
 8001800:	08006aac 	.word	0x08006aac
 8001804:	08006acc 	.word	0x08006acc
 8001808:	08006aec 	.word	0x08006aec

0800180c <UDS_Write_Data_Server>:
	}
}


void UDS_Write_Data_Server(uint8_t* received_data, uint16_t received_length)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]
	/*???????????????????????*/
	uint8_t received_data_l = sizeof(received_data);
 8001818:	2304      	movs	r3, #4
 800181a:	73fb      	strb	r3, [r7, #15]
	//	arr[4] = (data >> 16) & 0xFF;
	//	arr[5] = (data >> 8) & 0xFF;
	//	arr[6] = data & 0xFF;		  // Least significant byte of data


	pos_Response.SID = Write_Service ;
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <UDS_Write_Data_Server+0x50>)
 800181e:	222e      	movs	r2, #46	; 0x2e
 8001820:	701a      	strb	r2, [r3, #0]
	pos_Response.DID[0]=(received_data[2] << 8) ;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3302      	adds	r3, #2
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	021b      	lsls	r3, r3, #8
 800182a:	b25a      	sxtb	r2, r3
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <UDS_Write_Data_Server+0x50>)
 800182e:	709a      	strb	r2, [r3, #2]
	pos_Response.DID[1]=received_data[3];
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3303      	adds	r3, #3
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b25a      	sxtb	r2, r3
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <UDS_Write_Data_Server+0x50>)
 800183a:	70da      	strb	r2, [r3, #3]
	pos_Response.DID_Length=2;
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <UDS_Write_Data_Server+0x50>)
 800183e:	2202      	movs	r2, #2
 8001840:	711a      	strb	r2, [r3, #4]
	pos_Response.Data_Length = 0;
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <UDS_Write_Data_Server+0x50>)
 8001844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001848:	2200      	movs	r2, #0
 800184a:	715a      	strb	r2, [r3, #5]


	UDS_Send_Pos_Res(&pos_Response);
 800184c:	4803      	ldr	r0, [pc, #12]	; (800185c <UDS_Write_Data_Server+0x50>)
 800184e:	f000 f807 	bl	8001860 <UDS_Send_Pos_Res>
	}
	hamada_write.Length = sizeof(arr);

	// Transmit the data through CAN_TP using this function
	CanTP_Transmit(0, &hamada_write);*/
}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200013e0 	.word	0x200013e0

08001860 <UDS_Send_Pos_Res>:


/*****************************************************************************/

void UDS_Send_Pos_Res(ServiceInfo* Response)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

	uint8_t PCI = 2 + Response->DID_Length + Response->Data_Length;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	791a      	ldrb	r2, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001872:	795b      	ldrb	r3, [r3, #5]
 8001874:	4413      	add	r3, r2
 8001876:	b2db      	uxtb	r3, r3
 8001878:	3302      	adds	r3, #2
 800187a:	73fb      	strb	r3, [r7, #15]
	msg.Data[1] = Response->SID + 0x40;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	3340      	adds	r3, #64	; 0x40
 8001882:	b2da      	uxtb	r2, r3
 8001884:	4b2c      	ldr	r3, [pc, #176]	; (8001938 <UDS_Send_Pos_Res+0xd8>)
 8001886:	705a      	strb	r2, [r3, #1]
	uint8_t currentIndex = 2;
 8001888:	2302      	movs	r3, #2
 800188a:	73bb      	strb	r3, [r7, #14]
	if(Response->SUB_FUNC != -1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001896:	d00d      	beq.n	80018b4 <UDS_Send_Pos_Res+0x54>
	{
		PCI++;
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	3301      	adds	r3, #1
 800189c:	73fb      	strb	r3, [r7, #15]
		msg.Data[currentIndex++]= Response->SUB_FUNC;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f993 1001 	ldrsb.w	r1, [r3, #1]
 80018a4:	7bbb      	ldrb	r3, [r7, #14]
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	73ba      	strb	r2, [r7, #14]
 80018aa:	461a      	mov	r2, r3
 80018ac:	b2c9      	uxtb	r1, r1
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <UDS_Send_Pos_Res+0xd8>)
 80018b0:	5499      	strb	r1, [r3, r2]
 80018b2:	e015      	b.n	80018e0 <UDS_Send_Pos_Res+0x80>
	}
	else
	{
		for(currentIndex = 2; currentIndex < Response->DID_Length + 2; currentIndex++)
 80018b4:	2302      	movs	r3, #2
 80018b6:	73bb      	strb	r3, [r7, #14]
 80018b8:	e00c      	b.n	80018d4 <UDS_Send_Pos_Res+0x74>
		{
			msg.Data[currentIndex] = Response->DID[currentIndex - 2];
 80018ba:	7bbb      	ldrb	r3, [r7, #14]
 80018bc:	3b02      	subs	r3, #2
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80018c6:	7bbb      	ldrb	r3, [r7, #14]
 80018c8:	b2d1      	uxtb	r1, r2
 80018ca:	4a1b      	ldr	r2, [pc, #108]	; (8001938 <UDS_Send_Pos_Res+0xd8>)
 80018cc:	54d1      	strb	r1, [r2, r3]
		for(currentIndex = 2; currentIndex < Response->DID_Length + 2; currentIndex++)
 80018ce:	7bbb      	ldrb	r3, [r7, #14]
 80018d0:	3301      	adds	r3, #1
 80018d2:	73bb      	strb	r3, [r7, #14]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	791b      	ldrb	r3, [r3, #4]
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	7bbb      	ldrb	r3, [r7, #14]
 80018dc:	429a      	cmp	r2, r3
 80018de:	daec      	bge.n	80018ba <UDS_Send_Pos_Res+0x5a>
		}
	}

	uint8_t temp = currentIndex;
 80018e0:	7bbb      	ldrb	r3, [r7, #14]
 80018e2:	737b      	strb	r3, [r7, #13]
	while(currentIndex < Response->Data_Length + temp){
 80018e4:	e00d      	b.n	8001902 <UDS_Send_Pos_Res+0xa2>
		msg.Data[currentIndex] = Response->Data[currentIndex - temp];
 80018e6:	7bba      	ldrb	r2, [r7, #14]
 80018e8:	7b7b      	ldrb	r3, [r7, #13]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	4413      	add	r3, r2
 80018f0:	f993 2005 	ldrsb.w	r2, [r3, #5]
 80018f4:	7bbb      	ldrb	r3, [r7, #14]
 80018f6:	b2d1      	uxtb	r1, r2
 80018f8:	4a0f      	ldr	r2, [pc, #60]	; (8001938 <UDS_Send_Pos_Res+0xd8>)
 80018fa:	54d1      	strb	r1, [r2, r3]
		currentIndex++;
 80018fc:	7bbb      	ldrb	r3, [r7, #14]
 80018fe:	3301      	adds	r3, #1
 8001900:	73bb      	strb	r3, [r7, #14]
	while(currentIndex < Response->Data_Length + temp){
 8001902:	7bba      	ldrb	r2, [r7, #14]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800190a:	795b      	ldrb	r3, [r3, #5]
 800190c:	4619      	mov	r1, r3
 800190e:	7b7b      	ldrb	r3, [r7, #13]
 8001910:	440b      	add	r3, r1
 8001912:	429a      	cmp	r2, r3
 8001914:	dbe7      	blt.n	80018e6 <UDS_Send_Pos_Res+0x86>
	}
	msg.Data[0] = PCI;
 8001916:	4a08      	ldr	r2, [pc, #32]	; (8001938 <UDS_Send_Pos_Res+0xd8>)
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	7013      	strb	r3, [r2, #0]
	msg.Length = PCI;
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	4a06      	ldr	r2, [pc, #24]	; (8001938 <UDS_Send_Pos_Res+0xd8>)
 8001920:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001924:	6013      	str	r3, [r2, #0]

	CanTp_Transmit(0, &msg);
 8001926:	4904      	ldr	r1, [pc, #16]	; (8001938 <UDS_Send_Pos_Res+0xd8>)
 8001928:	2000      	movs	r0, #0
 800192a:	f7ff f9ff 	bl	8000d2c <CanTp_Transmit>
}
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200033f4 	.word	0x200033f4

0800193c <UDS_Send_Neg_Res>:

void UDS_Send_Neg_Res(uint8_t SID, uint8_t NRC)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	4602      	mov	r2, r0
 8001948:	f107 0310 	add.w	r3, r7, #16
 800194c:	f803 2c09 	strb.w	r2, [r3, #-9]
 8001950:	f107 0310 	add.w	r3, r7, #16
 8001954:	460a      	mov	r2, r1
 8001956:	f803 2c0a 	strb.w	r2, [r3, #-10]
	PduInfoType msg;
	msg.Data[0] = 4;
 800195a:	f107 0310 	add.w	r3, r7, #16
 800195e:	2204      	movs	r2, #4
 8001960:	f803 2c04 	strb.w	r2, [r3, #-4]
	msg.Data[1] = 0x7F;
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	227f      	movs	r2, #127	; 0x7f
 800196a:	f803 2c03 	strb.w	r2, [r3, #-3]
	msg.Data[2] = SID;
 800196e:	f107 0310 	add.w	r3, r7, #16
 8001972:	461a      	mov	r2, r3
 8001974:	f107 0310 	add.w	r3, r7, #16
 8001978:	f813 3c09 	ldrb.w	r3, [r3, #-9]
 800197c:	f802 3c02 	strb.w	r3, [r2, #-2]
	msg.Data[3] = NRC;
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	461a      	mov	r2, r3
 8001986:	f107 0310 	add.w	r3, r7, #16
 800198a:	f813 3c0a 	ldrb.w	r3, [r3, #-10]
 800198e:	f802 3c01 	strb.w	r3, [r2, #-1]
	msg.Length = 4;
 8001992:	f107 0310 	add.w	r3, r7, #16
 8001996:	461a      	mov	r2, r3
 8001998:	2304      	movs	r3, #4
 800199a:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc

	CanTp_Transmit(0, &msg);
 800199e:	f107 0310 	add.w	r3, r7, #16
 80019a2:	3b04      	subs	r3, #4
 80019a4:	4619      	mov	r1, r3
 80019a6:	2000      	movs	r0, #0
 80019a8:	f7ff f9c0 	bl	8000d2c <CanTp_Transmit>
}
 80019ac:	bf00      	nop
 80019ae:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d101      	bne.n	80019ce <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80019ca:	f000 f9c1 	bl	8001d50 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40010000 	.word	0x40010000

080019dc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e0:	b672      	cpsid	i
}
 80019e2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80019e4:	e7fe      	b.n	80019e4 <Error_Handler+0x8>
	...

080019e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_MspInit+0x54>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	4a11      	ldr	r2, [pc, #68]	; (8001a3c <HAL_MspInit+0x54>)
 80019f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fc:	6453      	str	r3, [r2, #68]	; 0x44
 80019fe:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <HAL_MspInit+0x54>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	603b      	str	r3, [r7, #0]
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_MspInit+0x54>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <HAL_MspInit+0x54>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a18:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <HAL_MspInit+0x54>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	210f      	movs	r1, #15
 8001a2a:	f06f 0001 	mvn.w	r0, #1
 8001a2e:	f001 f8ff 	bl	8002c30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800

08001a40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	; 0x30
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <HAL_InitTick+0xd0>)
 8001a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a58:	4a2d      	ldr	r2, [pc, #180]	; (8001b10 <HAL_InitTick+0xd0>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a60:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <HAL_InitTick+0xd0>)
 8001a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a6c:	f107 020c 	add.w	r2, r7, #12
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f001 fc5e 	bl	8003338 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a7c:	f001 fc48 	bl	8003310 <HAL_RCC_GetPCLK2Freq>
 8001a80:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a84:	4a23      	ldr	r2, [pc, #140]	; (8001b14 <HAL_InitTick+0xd4>)
 8001a86:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8a:	0c9b      	lsrs	r3, r3, #18
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <HAL_InitTick+0xd8>)
 8001a92:	4a22      	ldr	r2, [pc, #136]	; (8001b1c <HAL_InitTick+0xdc>)
 8001a94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001a96:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <HAL_InitTick+0xd8>)
 8001a98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a9c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a9e:	4a1e      	ldr	r2, [pc, #120]	; (8001b18 <HAL_InitTick+0xd8>)
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001aa4:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <HAL_InitTick+0xd8>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aaa:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <HAL_InitTick+0xd8>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab0:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <HAL_InitTick+0xd8>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001ab6:	4818      	ldr	r0, [pc, #96]	; (8001b18 <HAL_InitTick+0xd8>)
 8001ab8:	f002 f93e 	bl	8003d38 <HAL_TIM_Base_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d11b      	bne.n	8001b02 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001aca:	4813      	ldr	r0, [pc, #76]	; (8001b18 <HAL_InitTick+0xd8>)
 8001acc:	f002 f98e 	bl	8003dec <HAL_TIM_Base_Start_IT>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d111      	bne.n	8001b02 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ade:	2019      	movs	r0, #25
 8001ae0:	f001 f8c2 	bl	8002c68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b0f      	cmp	r3, #15
 8001ae8:	d808      	bhi.n	8001afc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001aea:	2200      	movs	r2, #0
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	2019      	movs	r0, #25
 8001af0:	f001 f89e 	bl	8002c30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001af4:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <HAL_InitTick+0xe0>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e002      	b.n	8001b02 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3730      	adds	r7, #48	; 0x30
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	431bde83 	.word	0x431bde83
 8001b18:	200043f8 	.word	0x200043f8
 8001b1c:	40010000 	.word	0x40010000
 8001b20:	2000000c 	.word	0x2000000c

08001b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <NMI_Handler+0x4>

08001b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2e:	e7fe      	b.n	8001b2e <HardFault_Handler+0x4>

08001b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <MemManage_Handler+0x4>

08001b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b3a:	e7fe      	b.n	8001b3a <BusFault_Handler+0x4>

08001b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <UsageFault_Handler+0x4>

08001b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <CAN1_RX0_IRQHandler+0x10>)
 8001b56:	f000 fd83 	bl	8002660 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000084 	.word	0x20000084

08001b64 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <CAN1_RX1_IRQHandler+0x10>)
 8001b6a:	f000 fd79 	bl	8002660 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000084 	.word	0x20000084

08001b78 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b7e:	f002 f9a5 	bl	8003ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200043f8 	.word	0x200043f8

08001b8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <USART2_IRQHandler+0x10>)
 8001b92:	f002 fc5f 	bl	8004454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20004440 	.word	0x20004440

08001ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <SystemInit+0x20>)
 8001ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001baa:	4a05      	ldr	r2, [pc, #20]	; (8001bc0 <SystemInit+0x20>)
 8001bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001bca:	4a12      	ldr	r2, [pc, #72]	; (8001c14 <MX_USART2_UART_Init+0x50>)
 8001bcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001bea:	220c      	movs	r2, #12
 8001bec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bee:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bfa:	4805      	ldr	r0, [pc, #20]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001bfc:	f002 fb4a 	bl	8004294 <HAL_UART_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c06:	f7ff fee9 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20004440 	.word	0x20004440
 8001c14:	40004400 	.word	0x40004400

08001c18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a1d      	ldr	r2, [pc, #116]	; (8001cac <HAL_UART_MspInit+0x94>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d133      	bne.n	8001ca2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <HAL_UART_MspInit+0x98>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	4a1b      	ldr	r2, [pc, #108]	; (8001cb0 <HAL_UART_MspInit+0x98>)
 8001c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c48:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4a:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_UART_MspInit+0x98>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <HAL_UART_MspInit+0x98>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a14      	ldr	r2, [pc, #80]	; (8001cb0 <HAL_UART_MspInit+0x98>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_UART_MspInit+0x98>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c72:	230c      	movs	r3, #12
 8001c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c82:	2307      	movs	r3, #7
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4809      	ldr	r0, [pc, #36]	; (8001cb4 <HAL_UART_MspInit+0x9c>)
 8001c8e:	f001 f88b 	bl	8002da8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2105      	movs	r1, #5
 8001c96:	2026      	movs	r0, #38	; 0x26
 8001c98:	f000 ffca 	bl	8002c30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c9c:	2026      	movs	r0, #38	; 0x26
 8001c9e:	f000 ffe3 	bl	8002c68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	3728      	adds	r7, #40	; 0x28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40004400 	.word	0x40004400
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020000 	.word	0x40020000

08001cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cbc:	480d      	ldr	r0, [pc, #52]	; (8001cf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cbe:	490e      	ldr	r1, [pc, #56]	; (8001cf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cc0:	4a0e      	ldr	r2, [pc, #56]	; (8001cfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc4:	e002      	b.n	8001ccc <LoopCopyDataInit>

08001cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cca:	3304      	adds	r3, #4

08001ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd0:	d3f9      	bcc.n	8001cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd2:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cd4:	4c0b      	ldr	r4, [pc, #44]	; (8001d04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd8:	e001      	b.n	8001cde <LoopFillZerobss>

08001cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cdc:	3204      	adds	r2, #4

08001cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce0:	d3fb      	bcc.n	8001cda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ce2:	f7ff ff5d 	bl	8001ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ce6:	f004 fdbf 	bl	8006868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cea:	f7fe fd67 	bl	80007bc <main>
  bx  lr    
 8001cee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001cfc:	08006b30 	.word	0x08006b30
  ldr r2, =_sbss
 8001d00:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001d04:	2000831c 	.word	0x2000831c

08001d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d08:	e7fe      	b.n	8001d08 <ADC_IRQHandler>
	...

08001d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0d      	ldr	r2, [pc, #52]	; (8001d4c <HAL_Init+0x40>)
 8001d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <HAL_Init+0x40>)
 8001d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <HAL_Init+0x40>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <HAL_Init+0x40>)
 8001d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d34:	2003      	movs	r0, #3
 8001d36:	f000 ff70 	bl	8002c1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d3a:	200f      	movs	r0, #15
 8001d3c:	f7ff fe80 	bl	8001a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d40:	f7ff fe52 	bl	80019e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023c00 	.word	0x40023c00

08001d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_IncTick+0x20>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_IncTick+0x24>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <HAL_IncTick+0x24>)
 8001d62:	6013      	str	r3, [r2, #0]
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20000010 	.word	0x20000010
 8001d74:	20004484 	.word	0x20004484

08001d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <HAL_GetTick+0x14>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20004484 	.word	0x20004484

08001d90 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e0ed      	b.n	8001f7e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d102      	bne.n	8001db4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7fe fc00 	bl	80005b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0201 	orr.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dc4:	f7ff ffd8 	bl	8001d78 <HAL_GetTick>
 8001dc8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dca:	e012      	b.n	8001df2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dcc:	f7ff ffd4 	bl	8001d78 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b0a      	cmp	r3, #10
 8001dd8:	d90b      	bls.n	8001df2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2205      	movs	r2, #5
 8001dea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e0c5      	b.n	8001f7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0e5      	beq.n	8001dcc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0202 	bic.w	r2, r2, #2
 8001e0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e10:	f7ff ffb2 	bl	8001d78 <HAL_GetTick>
 8001e14:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e16:	e012      	b.n	8001e3e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e18:	f7ff ffae 	bl	8001d78 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b0a      	cmp	r3, #10
 8001e24:	d90b      	bls.n	8001e3e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2205      	movs	r2, #5
 8001e36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e09f      	b.n	8001f7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1e5      	bne.n	8001e18 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7e1b      	ldrb	r3, [r3, #24]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d108      	bne.n	8001e66 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	e007      	b.n	8001e76 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7e5b      	ldrb	r3, [r3, #25]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d108      	bne.n	8001e90 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	e007      	b.n	8001ea0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7e9b      	ldrb	r3, [r3, #26]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d108      	bne.n	8001eba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0220 	orr.w	r2, r2, #32
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	e007      	b.n	8001eca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0220 	bic.w	r2, r2, #32
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	7edb      	ldrb	r3, [r3, #27]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d108      	bne.n	8001ee4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0210 	bic.w	r2, r2, #16
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	e007      	b.n	8001ef4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0210 	orr.w	r2, r2, #16
 8001ef2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	7f1b      	ldrb	r3, [r3, #28]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d108      	bne.n	8001f0e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0208 	orr.w	r2, r2, #8
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	e007      	b.n	8001f1e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0208 	bic.w	r2, r2, #8
 8001f1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	7f5b      	ldrb	r3, [r3, #29]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d108      	bne.n	8001f38 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f042 0204 	orr.w	r2, r2, #4
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	e007      	b.n	8001f48 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0204 	bic.w	r2, r2, #4
 8001f46:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	ea42 0103 	orr.w	r1, r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	1e5a      	subs	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b087      	sub	sp, #28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f9e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001fa0:	7cfb      	ldrb	r3, [r7, #19]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d003      	beq.n	8001fae <HAL_CAN_ConfigFilter+0x26>
 8001fa6:	7cfb      	ldrb	r3, [r7, #19]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	f040 80be 	bne.w	800212a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001fae:	4b65      	ldr	r3, [pc, #404]	; (8002144 <HAL_CAN_ConfigFilter+0x1bc>)
 8001fb0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fb8:	f043 0201 	orr.w	r2, r3, #1
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fc8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	021b      	lsls	r3, r3, #8
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	f003 031f 	and.w	r3, r3, #31
 8001fee:	2201      	movs	r2, #1
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	401a      	ands	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d123      	bne.n	8002058 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	43db      	mvns	r3, r3
 800201a:	401a      	ands	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002032:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	3248      	adds	r2, #72	; 0x48
 8002038:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800204c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800204e:	6979      	ldr	r1, [r7, #20]
 8002050:	3348      	adds	r3, #72	; 0x48
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	440b      	add	r3, r1
 8002056:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d122      	bne.n	80020a6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	431a      	orrs	r2, r3
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002080:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	3248      	adds	r2, #72	; 0x48
 8002086:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800209a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800209c:	6979      	ldr	r1, [r7, #20]
 800209e:	3348      	adds	r3, #72	; 0x48
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	440b      	add	r3, r1
 80020a4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d109      	bne.n	80020c2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	401a      	ands	r2, r3
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80020c0:	e007      	b.n	80020d2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	431a      	orrs	r2, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d109      	bne.n	80020ee <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	401a      	ands	r2, r3
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80020ec:	e007      	b.n	80020fe <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d107      	bne.n	8002116 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	431a      	orrs	r2, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800211c:	f023 0201 	bic.w	r2, r3, #1
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	e006      	b.n	8002138 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
  }
}
 8002138:	4618      	mov	r0, r3
 800213a:	371c      	adds	r7, #28
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40006400 	.word	0x40006400

08002148 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b01      	cmp	r3, #1
 800215a:	d12e      	bne.n	80021ba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0201 	bic.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002174:	f7ff fe00 	bl	8001d78 <HAL_GetTick>
 8002178:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800217a:	e012      	b.n	80021a2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800217c:	f7ff fdfc 	bl	8001d78 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b0a      	cmp	r3, #10
 8002188:	d90b      	bls.n	80021a2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2205      	movs	r2, #5
 800219a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e012      	b.n	80021c8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1e5      	bne.n	800217c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e006      	b.n	80021c8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
  }
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
 80021dc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021e4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80021ee:	7ffb      	ldrb	r3, [r7, #31]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d003      	beq.n	80021fc <HAL_CAN_AddTxMessage+0x2c>
 80021f4:	7ffb      	ldrb	r3, [r7, #31]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	f040 80b8 	bne.w	800236c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10a      	bne.n	800221c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800220c:	2b00      	cmp	r3, #0
 800220e:	d105      	bne.n	800221c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 80a0 	beq.w	800235c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	0e1b      	lsrs	r3, r3, #24
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2b02      	cmp	r3, #2
 800222a:	d907      	bls.n	800223c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e09e      	b.n	800237a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800223c:	2201      	movs	r2, #1
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	409a      	lsls	r2, r3
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10d      	bne.n	800226a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002258:	68f9      	ldr	r1, [r7, #12]
 800225a:	6809      	ldr	r1, [r1, #0]
 800225c:	431a      	orrs	r2, r3
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	3318      	adds	r3, #24
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	440b      	add	r3, r1
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	e00f      	b.n	800228a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002274:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800227a:	68f9      	ldr	r1, [r7, #12]
 800227c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800227e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	3318      	adds	r3, #24
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	440b      	add	r3, r1
 8002288:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6819      	ldr	r1, [r3, #0]
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	691a      	ldr	r2, [r3, #16]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	3318      	adds	r3, #24
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	440b      	add	r3, r1
 800229a:	3304      	adds	r3, #4
 800229c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	7d1b      	ldrb	r3, [r3, #20]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d111      	bne.n	80022ca <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	3318      	adds	r3, #24
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	4413      	add	r3, r2
 80022b2:	3304      	adds	r3, #4
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	6811      	ldr	r1, [r2, #0]
 80022ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	3318      	adds	r3, #24
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	440b      	add	r3, r1
 80022c6:	3304      	adds	r3, #4
 80022c8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3307      	adds	r3, #7
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	061a      	lsls	r2, r3, #24
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3306      	adds	r3, #6
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	041b      	lsls	r3, r3, #16
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3305      	adds	r3, #5
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	021b      	lsls	r3, r3, #8
 80022e4:	4313      	orrs	r3, r2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	3204      	adds	r2, #4
 80022ea:	7812      	ldrb	r2, [r2, #0]
 80022ec:	4610      	mov	r0, r2
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	6811      	ldr	r1, [r2, #0]
 80022f2:	ea43 0200 	orr.w	r2, r3, r0
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	440b      	add	r3, r1
 80022fc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002300:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3303      	adds	r3, #3
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	061a      	lsls	r2, r3, #24
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3302      	adds	r3, #2
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	041b      	lsls	r3, r3, #16
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3301      	adds	r3, #1
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	4313      	orrs	r3, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	7812      	ldrb	r2, [r2, #0]
 8002322:	4610      	mov	r0, r2
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	6811      	ldr	r1, [r2, #0]
 8002328:	ea43 0200 	orr.w	r2, r3, r0
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	440b      	add	r3, r1
 8002332:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002336:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	3318      	adds	r3, #24
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	4413      	add	r3, r2
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	6811      	ldr	r1, [r2, #0]
 800234a:	f043 0201 	orr.w	r2, r3, #1
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	3318      	adds	r3, #24
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	440b      	add	r3, r1
 8002356:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	e00e      	b.n	800237a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e006      	b.n	800237a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
  }
}
 800237a:	4618      	mov	r0, r3
 800237c:	3724      	adds	r7, #36	; 0x24
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002386:	b480      	push	{r7}
 8002388:	b085      	sub	sp, #20
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002398:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800239a:	7afb      	ldrb	r3, [r7, #11]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d002      	beq.n	80023a6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80023a0:	7afb      	ldrb	r3, [r7, #11]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d11d      	bne.n	80023e2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	3301      	adds	r3, #1
 80023b8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	3301      	adds	r3, #1
 80023cc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	3301      	adds	r3, #1
 80023e0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80023e2:	68fb      	ldr	r3, [r7, #12]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002404:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002406:	7dfb      	ldrb	r3, [r7, #23]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d003      	beq.n	8002414 <HAL_CAN_GetRxMessage+0x24>
 800240c:	7dfb      	ldrb	r3, [r7, #23]
 800240e:	2b02      	cmp	r3, #2
 8002410:	f040 80f3 	bne.w	80025fa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10e      	bne.n	8002438 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d116      	bne.n	8002456 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0e7      	b.n	8002608 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d107      	bne.n	8002456 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e0d8      	b.n	8002608 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	331b      	adds	r3, #27
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	4413      	add	r3, r2
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0204 	and.w	r2, r3, #4
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10c      	bne.n	800248e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	331b      	adds	r3, #27
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	4413      	add	r3, r2
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	0d5b      	lsrs	r3, r3, #21
 8002484:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	e00b      	b.n	80024a6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	331b      	adds	r3, #27
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	4413      	add	r3, r2
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	08db      	lsrs	r3, r3, #3
 800249e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	331b      	adds	r3, #27
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	4413      	add	r3, r2
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0202 	and.w	r2, r3, #2
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	331b      	adds	r3, #27
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	4413      	add	r3, r2
 80024c8:	3304      	adds	r3, #4
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 020f 	and.w	r2, r3, #15
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	331b      	adds	r3, #27
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	4413      	add	r3, r2
 80024e0:	3304      	adds	r3, #4
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	331b      	adds	r3, #27
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	4413      	add	r3, r2
 80024f8:	3304      	adds	r3, #4
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	0c1b      	lsrs	r3, r3, #16
 80024fe:	b29a      	uxth	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	4413      	add	r3, r2
 800250e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	b2da      	uxtb	r2, r3
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	4413      	add	r3, r2
 8002524:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	0a1a      	lsrs	r2, r3, #8
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	3301      	adds	r3, #1
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	4413      	add	r3, r2
 800253e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	0c1a      	lsrs	r2, r3, #16
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	3302      	adds	r3, #2
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	4413      	add	r3, r2
 8002558:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	0e1a      	lsrs	r2, r3, #24
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	3303      	adds	r3, #3
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	4413      	add	r3, r2
 8002572:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	3304      	adds	r3, #4
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	4413      	add	r3, r2
 800258a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	0a1a      	lsrs	r2, r3, #8
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	3305      	adds	r3, #5
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	0c1a      	lsrs	r2, r3, #16
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	3306      	adds	r3, #6
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	4413      	add	r3, r2
 80025be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	0e1a      	lsrs	r2, r3, #24
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	3307      	adds	r3, #7
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d108      	bne.n	80025e6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0220 	orr.w	r2, r2, #32
 80025e2:	60da      	str	r2, [r3, #12]
 80025e4:	e007      	b.n	80025f6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f042 0220 	orr.w	r2, r2, #32
 80025f4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	e006      	b.n	8002608 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
  }
}
 8002608:	4618      	mov	r0, r3
 800260a:	371c      	adds	r7, #28
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002624:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d002      	beq.n	8002632 <HAL_CAN_ActivateNotification+0x1e>
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d109      	bne.n	8002646 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6959      	ldr	r1, [r3, #20]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	e006      	b.n	8002654 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
  }
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08a      	sub	sp, #40	; 0x28
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002668:	2300      	movs	r3, #0
 800266a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d07c      	beq.n	80027a0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d023      	beq.n	80026f8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2201      	movs	r2, #1
 80026b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f983 	bl	80029ce <HAL_CAN_TxMailbox0CompleteCallback>
 80026c8:	e016      	b.n	80026f8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d004      	beq.n	80026de <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
 80026dc:	e00c      	b.n	80026f8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d004      	beq.n	80026f2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
 80026f0:	e002      	b.n	80026f8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f989 	bl	8002a0a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d024      	beq.n	800274c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f44f 7280 	mov.w	r2, #256	; 0x100
 800270a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f963 	bl	80029e2 <HAL_CAN_TxMailbox1CompleteCallback>
 800271c:	e016      	b.n	800274c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002724:	2b00      	cmp	r3, #0
 8002726:	d004      	beq.n	8002732 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
 8002730:	e00c      	b.n	800274c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002738:	2b00      	cmp	r3, #0
 800273a:	d004      	beq.n	8002746 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
 8002744:	e002      	b.n	800274c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f969 	bl	8002a1e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d024      	beq.n	80027a0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800275e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f943 	bl	80029f6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002770:	e016      	b.n	80027a0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d004      	beq.n	8002786 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002782:	627b      	str	r3, [r7, #36]	; 0x24
 8002784:	e00c      	b.n	80027a0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d004      	beq.n	800279a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
 8002798:	e002      	b.n	80027a0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f949 	bl	8002a32 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00c      	beq.n	80027c4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d007      	beq.n	80027c4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2210      	movs	r2, #16
 80027c2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00b      	beq.n	80027e6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d006      	beq.n	80027e6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2208      	movs	r2, #8
 80027de:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f930 	bl	8002a46 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d009      	beq.n	8002804 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7fe f934 	bl	8000a6c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00c      	beq.n	8002828 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f003 0310 	and.w	r3, r3, #16
 8002814:	2b00      	cmp	r3, #0
 8002816:	d007      	beq.n	8002828 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800281e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2210      	movs	r2, #16
 8002826:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	f003 0320 	and.w	r3, r3, #32
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00b      	beq.n	800284a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d006      	beq.n	800284a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2208      	movs	r2, #8
 8002842:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f912 	bl	8002a6e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	f003 0310 	and.w	r3, r3, #16
 8002850:	2b00      	cmp	r3, #0
 8002852:	d009      	beq.n	8002868 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f8f9 	bl	8002a5a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00b      	beq.n	800288a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	2b00      	cmp	r3, #0
 800287a:	d006      	beq.n	800288a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2210      	movs	r2, #16
 8002882:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f8fc 	bl	8002a82 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00b      	beq.n	80028ac <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d006      	beq.n	80028ac <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2208      	movs	r2, #8
 80028a4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f8f5 	bl	8002a96 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d07b      	beq.n	80029ae <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d072      	beq.n	80029a6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d008      	beq.n	80028dc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d008      	beq.n	80028f8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	f043 0302 	orr.w	r3, r3, #2
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d008      	beq.n	8002914 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	f043 0304 	orr.w	r3, r3, #4
 8002912:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800291a:	2b00      	cmp	r3, #0
 800291c:	d043      	beq.n	80029a6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002924:	2b00      	cmp	r3, #0
 8002926:	d03e      	beq.n	80029a6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800292e:	2b60      	cmp	r3, #96	; 0x60
 8002930:	d02b      	beq.n	800298a <HAL_CAN_IRQHandler+0x32a>
 8002932:	2b60      	cmp	r3, #96	; 0x60
 8002934:	d82e      	bhi.n	8002994 <HAL_CAN_IRQHandler+0x334>
 8002936:	2b50      	cmp	r3, #80	; 0x50
 8002938:	d022      	beq.n	8002980 <HAL_CAN_IRQHandler+0x320>
 800293a:	2b50      	cmp	r3, #80	; 0x50
 800293c:	d82a      	bhi.n	8002994 <HAL_CAN_IRQHandler+0x334>
 800293e:	2b40      	cmp	r3, #64	; 0x40
 8002940:	d019      	beq.n	8002976 <HAL_CAN_IRQHandler+0x316>
 8002942:	2b40      	cmp	r3, #64	; 0x40
 8002944:	d826      	bhi.n	8002994 <HAL_CAN_IRQHandler+0x334>
 8002946:	2b30      	cmp	r3, #48	; 0x30
 8002948:	d010      	beq.n	800296c <HAL_CAN_IRQHandler+0x30c>
 800294a:	2b30      	cmp	r3, #48	; 0x30
 800294c:	d822      	bhi.n	8002994 <HAL_CAN_IRQHandler+0x334>
 800294e:	2b10      	cmp	r3, #16
 8002950:	d002      	beq.n	8002958 <HAL_CAN_IRQHandler+0x2f8>
 8002952:	2b20      	cmp	r3, #32
 8002954:	d005      	beq.n	8002962 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002956:	e01d      	b.n	8002994 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	f043 0308 	orr.w	r3, r3, #8
 800295e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002960:	e019      	b.n	8002996 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	f043 0310 	orr.w	r3, r3, #16
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800296a:	e014      	b.n	8002996 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	f043 0320 	orr.w	r3, r3, #32
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002974:	e00f      	b.n	8002996 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800297e:	e00a      	b.n	8002996 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002988:	e005      	b.n	8002996 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002992:	e000      	b.n	8002996 <HAL_CAN_IRQHandler+0x336>
            break;
 8002994:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	699a      	ldr	r2, [r3, #24]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80029a4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2204      	movs	r2, #4
 80029ac:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f872 	bl	8002aaa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80029c6:	bf00      	nop
 80029c8:	3728      	adds	r7, #40	; 0x28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002adc:	4013      	ands	r3, r2
 8002ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002af2:	4a04      	ldr	r2, [pc, #16]	; (8002b04 <__NVIC_SetPriorityGrouping+0x44>)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	60d3      	str	r3, [r2, #12]
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <__NVIC_GetPriorityGrouping+0x18>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	0a1b      	lsrs	r3, r3, #8
 8002b12:	f003 0307 	and.w	r3, r3, #7
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	db0b      	blt.n	8002b4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	f003 021f 	and.w	r2, r3, #31
 8002b3c:	4907      	ldr	r1, [pc, #28]	; (8002b5c <__NVIC_EnableIRQ+0x38>)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	2001      	movs	r0, #1
 8002b46:	fa00 f202 	lsl.w	r2, r0, r2
 8002b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	e000e100 	.word	0xe000e100

08002b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	6039      	str	r1, [r7, #0]
 8002b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	db0a      	blt.n	8002b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	490c      	ldr	r1, [pc, #48]	; (8002bac <__NVIC_SetPriority+0x4c>)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	0112      	lsls	r2, r2, #4
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	440b      	add	r3, r1
 8002b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b88:	e00a      	b.n	8002ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	4908      	ldr	r1, [pc, #32]	; (8002bb0 <__NVIC_SetPriority+0x50>)
 8002b90:	79fb      	ldrb	r3, [r7, #7]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	3b04      	subs	r3, #4
 8002b98:	0112      	lsls	r2, r2, #4
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	761a      	strb	r2, [r3, #24]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	e000e100 	.word	0xe000e100
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b089      	sub	sp, #36	; 0x24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f1c3 0307 	rsb	r3, r3, #7
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	bf28      	it	cs
 8002bd2:	2304      	movcs	r3, #4
 8002bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	2b06      	cmp	r3, #6
 8002bdc:	d902      	bls.n	8002be4 <NVIC_EncodePriority+0x30>
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3b03      	subs	r3, #3
 8002be2:	e000      	b.n	8002be6 <NVIC_EncodePriority+0x32>
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43da      	mvns	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	fa01 f303 	lsl.w	r3, r1, r3
 8002c06:	43d9      	mvns	r1, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c0c:	4313      	orrs	r3, r2
         );
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3724      	adds	r7, #36	; 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff ff4c 	bl	8002ac0 <__NVIC_SetPriorityGrouping>
}
 8002c28:	bf00      	nop
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c42:	f7ff ff61 	bl	8002b08 <__NVIC_GetPriorityGrouping>
 8002c46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	68b9      	ldr	r1, [r7, #8]
 8002c4c:	6978      	ldr	r0, [r7, #20]
 8002c4e:	f7ff ffb1 	bl	8002bb4 <NVIC_EncodePriority>
 8002c52:	4602      	mov	r2, r0
 8002c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff ff80 	bl	8002b60 <__NVIC_SetPriority>
}
 8002c60:	bf00      	nop
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff ff54 	bl	8002b24 <__NVIC_EnableIRQ>
}
 8002c7c:	bf00      	nop
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c92:	f7ff f871 	bl	8001d78 <HAL_GetTick>
 8002c96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d008      	beq.n	8002cb6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2280      	movs	r2, #128	; 0x80
 8002ca8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e052      	b.n	8002d5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0216 	bic.w	r2, r2, #22
 8002cc4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695a      	ldr	r2, [r3, #20]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cd4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d103      	bne.n	8002ce6 <HAL_DMA_Abort+0x62>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d007      	beq.n	8002cf6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0208 	bic.w	r2, r2, #8
 8002cf4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0201 	bic.w	r2, r2, #1
 8002d04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d06:	e013      	b.n	8002d30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d08:	f7ff f836 	bl	8001d78 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b05      	cmp	r3, #5
 8002d14:	d90c      	bls.n	8002d30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2203      	movs	r2, #3
 8002d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e015      	b.n	8002d5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1e4      	bne.n	8002d08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d42:	223f      	movs	r2, #63	; 0x3f
 8002d44:	409a      	lsls	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d004      	beq.n	8002d82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2280      	movs	r2, #128	; 0x80
 8002d7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e00c      	b.n	8002d9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2205      	movs	r2, #5
 8002d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0201 	bic.w	r2, r2, #1
 8002d98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b089      	sub	sp, #36	; 0x24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	e165      	b.n	8003090 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	f040 8154 	bne.w	800308a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d005      	beq.n	8002dfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d130      	bne.n	8002e5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	2203      	movs	r2, #3
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e30:	2201      	movs	r2, #1
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	f003 0201 	and.w	r2, r3, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d017      	beq.n	8002e98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	2203      	movs	r2, #3
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d123      	bne.n	8002eec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	08da      	lsrs	r2, r3, #3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3208      	adds	r2, #8
 8002eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	220f      	movs	r2, #15
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	08da      	lsrs	r2, r3, #3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3208      	adds	r2, #8
 8002ee6:	69b9      	ldr	r1, [r7, #24]
 8002ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0203 	and.w	r2, r3, #3
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 80ae 	beq.w	800308a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	4b5d      	ldr	r3, [pc, #372]	; (80030a8 <HAL_GPIO_Init+0x300>)
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	4a5c      	ldr	r2, [pc, #368]	; (80030a8 <HAL_GPIO_Init+0x300>)
 8002f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3e:	4b5a      	ldr	r3, [pc, #360]	; (80030a8 <HAL_GPIO_Init+0x300>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f4a:	4a58      	ldr	r2, [pc, #352]	; (80030ac <HAL_GPIO_Init+0x304>)
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	089b      	lsrs	r3, r3, #2
 8002f50:	3302      	adds	r3, #2
 8002f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	220f      	movs	r2, #15
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a4f      	ldr	r2, [pc, #316]	; (80030b0 <HAL_GPIO_Init+0x308>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d025      	beq.n	8002fc2 <HAL_GPIO_Init+0x21a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a4e      	ldr	r2, [pc, #312]	; (80030b4 <HAL_GPIO_Init+0x30c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d01f      	beq.n	8002fbe <HAL_GPIO_Init+0x216>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a4d      	ldr	r2, [pc, #308]	; (80030b8 <HAL_GPIO_Init+0x310>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d019      	beq.n	8002fba <HAL_GPIO_Init+0x212>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a4c      	ldr	r2, [pc, #304]	; (80030bc <HAL_GPIO_Init+0x314>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d013      	beq.n	8002fb6 <HAL_GPIO_Init+0x20e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a4b      	ldr	r2, [pc, #300]	; (80030c0 <HAL_GPIO_Init+0x318>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d00d      	beq.n	8002fb2 <HAL_GPIO_Init+0x20a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a4a      	ldr	r2, [pc, #296]	; (80030c4 <HAL_GPIO_Init+0x31c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d007      	beq.n	8002fae <HAL_GPIO_Init+0x206>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a49      	ldr	r2, [pc, #292]	; (80030c8 <HAL_GPIO_Init+0x320>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d101      	bne.n	8002faa <HAL_GPIO_Init+0x202>
 8002fa6:	2306      	movs	r3, #6
 8002fa8:	e00c      	b.n	8002fc4 <HAL_GPIO_Init+0x21c>
 8002faa:	2307      	movs	r3, #7
 8002fac:	e00a      	b.n	8002fc4 <HAL_GPIO_Init+0x21c>
 8002fae:	2305      	movs	r3, #5
 8002fb0:	e008      	b.n	8002fc4 <HAL_GPIO_Init+0x21c>
 8002fb2:	2304      	movs	r3, #4
 8002fb4:	e006      	b.n	8002fc4 <HAL_GPIO_Init+0x21c>
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e004      	b.n	8002fc4 <HAL_GPIO_Init+0x21c>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e002      	b.n	8002fc4 <HAL_GPIO_Init+0x21c>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <HAL_GPIO_Init+0x21c>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	69fa      	ldr	r2, [r7, #28]
 8002fc6:	f002 0203 	and.w	r2, r2, #3
 8002fca:	0092      	lsls	r2, r2, #2
 8002fcc:	4093      	lsls	r3, r2
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fd4:	4935      	ldr	r1, [pc, #212]	; (80030ac <HAL_GPIO_Init+0x304>)
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	089b      	lsrs	r3, r3, #2
 8002fda:	3302      	adds	r3, #2
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fe2:	4b3a      	ldr	r3, [pc, #232]	; (80030cc <HAL_GPIO_Init+0x324>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003006:	4a31      	ldr	r2, [pc, #196]	; (80030cc <HAL_GPIO_Init+0x324>)
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800300c:	4b2f      	ldr	r3, [pc, #188]	; (80030cc <HAL_GPIO_Init+0x324>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	4313      	orrs	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003030:	4a26      	ldr	r2, [pc, #152]	; (80030cc <HAL_GPIO_Init+0x324>)
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003036:	4b25      	ldr	r3, [pc, #148]	; (80030cc <HAL_GPIO_Init+0x324>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	43db      	mvns	r3, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4013      	ands	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800305a:	4a1c      	ldr	r2, [pc, #112]	; (80030cc <HAL_GPIO_Init+0x324>)
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003060:	4b1a      	ldr	r3, [pc, #104]	; (80030cc <HAL_GPIO_Init+0x324>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003084:	4a11      	ldr	r2, [pc, #68]	; (80030cc <HAL_GPIO_Init+0x324>)
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3301      	adds	r3, #1
 800308e:	61fb      	str	r3, [r7, #28]
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	2b0f      	cmp	r3, #15
 8003094:	f67f ae96 	bls.w	8002dc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003098:	bf00      	nop
 800309a:	bf00      	nop
 800309c:	3724      	adds	r7, #36	; 0x24
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40023800 	.word	0x40023800
 80030ac:	40013800 	.word	0x40013800
 80030b0:	40020000 	.word	0x40020000
 80030b4:	40020400 	.word	0x40020400
 80030b8:	40020800 	.word	0x40020800
 80030bc:	40020c00 	.word	0x40020c00
 80030c0:	40021000 	.word	0x40021000
 80030c4:	40021400 	.word	0x40021400
 80030c8:	40021800 	.word	0x40021800
 80030cc:	40013c00 	.word	0x40013c00

080030d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	807b      	strh	r3, [r7, #2]
 80030dc:	4613      	mov	r3, r2
 80030de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030e0:	787b      	ldrb	r3, [r7, #1]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030e6:	887a      	ldrh	r2, [r7, #2]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030ec:	e003      	b.n	80030f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030ee:	887b      	ldrh	r3, [r7, #2]
 80030f0:	041a      	lsls	r2, r3, #16
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	619a      	str	r2, [r3, #24]
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0cc      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003118:	4b68      	ldr	r3, [pc, #416]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d90c      	bls.n	8003140 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b65      	ldr	r3, [pc, #404]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800312e:	4b63      	ldr	r3, [pc, #396]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0b8      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d020      	beq.n	800318e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003158:	4b59      	ldr	r3, [pc, #356]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	4a58      	ldr	r2, [pc, #352]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003162:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003170:	4b53      	ldr	r3, [pc, #332]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	4a52      	ldr	r2, [pc, #328]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800317a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800317c:	4b50      	ldr	r3, [pc, #320]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	494d      	ldr	r1, [pc, #308]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d044      	beq.n	8003224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d119      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e07f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d003      	beq.n	80031c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d107      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c2:	4b3f      	ldr	r3, [pc, #252]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e06f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d2:	4b3b      	ldr	r3, [pc, #236]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e067      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031e2:	4b37      	ldr	r3, [pc, #220]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f023 0203 	bic.w	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4934      	ldr	r1, [pc, #208]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031f4:	f7fe fdc0 	bl	8001d78 <HAL_GetTick>
 80031f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031fc:	f7fe fdbc 	bl	8001d78 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	; 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e04f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003212:	4b2b      	ldr	r3, [pc, #172]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 020c 	and.w	r2, r3, #12
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	429a      	cmp	r2, r3
 8003222:	d1eb      	bne.n	80031fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003224:	4b25      	ldr	r3, [pc, #148]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d20c      	bcs.n	800324c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003232:	4b22      	ldr	r3, [pc, #136]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	4b20      	ldr	r3, [pc, #128]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e032      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003258:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4916      	ldr	r1, [pc, #88]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d009      	beq.n	800328a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003276:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	490e      	ldr	r1, [pc, #56]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800328a:	f000 f887 	bl	800339c <HAL_RCC_GetSysClockFreq>
 800328e:	4602      	mov	r2, r0
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	490a      	ldr	r1, [pc, #40]	; (80032c4 <HAL_RCC_ClockConfig+0x1c0>)
 800329c:	5ccb      	ldrb	r3, [r1, r3]
 800329e:	fa22 f303 	lsr.w	r3, r2, r3
 80032a2:	4a09      	ldr	r2, [pc, #36]	; (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 80032a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fe fbc8 	bl	8001a40 <HAL_InitTick>

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40023c00 	.word	0x40023c00
 80032c0:	40023800 	.word	0x40023800
 80032c4:	08006b08 	.word	0x08006b08
 80032c8:	20000008 	.word	0x20000008
 80032cc:	2000000c 	.word	0x2000000c

080032d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d4:	4b03      	ldr	r3, [pc, #12]	; (80032e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032d6:	681b      	ldr	r3, [r3, #0]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	20000008 	.word	0x20000008

080032e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032ec:	f7ff fff0 	bl	80032d0 <HAL_RCC_GetHCLKFreq>
 80032f0:	4602      	mov	r2, r0
 80032f2:	4b05      	ldr	r3, [pc, #20]	; (8003308 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	0a9b      	lsrs	r3, r3, #10
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	4903      	ldr	r1, [pc, #12]	; (800330c <HAL_RCC_GetPCLK1Freq+0x24>)
 80032fe:	5ccb      	ldrb	r3, [r1, r3]
 8003300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003304:	4618      	mov	r0, r3
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40023800 	.word	0x40023800
 800330c:	08006b18 	.word	0x08006b18

08003310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003314:	f7ff ffdc 	bl	80032d0 <HAL_RCC_GetHCLKFreq>
 8003318:	4602      	mov	r2, r0
 800331a:	4b05      	ldr	r3, [pc, #20]	; (8003330 <HAL_RCC_GetPCLK2Freq+0x20>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	0b5b      	lsrs	r3, r3, #13
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	4903      	ldr	r1, [pc, #12]	; (8003334 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003326:	5ccb      	ldrb	r3, [r1, r3]
 8003328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800332c:	4618      	mov	r0, r3
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40023800 	.word	0x40023800
 8003334:	08006b18 	.word	0x08006b18

08003338 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	220f      	movs	r2, #15
 8003346:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003348:	4b12      	ldr	r3, [pc, #72]	; (8003394 <HAL_RCC_GetClockConfig+0x5c>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 0203 	and.w	r2, r3, #3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003354:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <HAL_RCC_GetClockConfig+0x5c>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003360:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <HAL_RCC_GetClockConfig+0x5c>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800336c:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_RCC_GetClockConfig+0x5c>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	08db      	lsrs	r3, r3, #3
 8003372:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800337a:	4b07      	ldr	r3, [pc, #28]	; (8003398 <HAL_RCC_GetClockConfig+0x60>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 020f 	and.w	r2, r3, #15
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	601a      	str	r2, [r3, #0]
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	40023800 	.word	0x40023800
 8003398:	40023c00 	.word	0x40023c00

0800339c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800339c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a0:	b0ae      	sub	sp, #184	; 0xb8
 80033a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033c2:	4bcb      	ldr	r3, [pc, #812]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b0c      	cmp	r3, #12
 80033cc:	f200 8206 	bhi.w	80037dc <HAL_RCC_GetSysClockFreq+0x440>
 80033d0:	a201      	add	r2, pc, #4	; (adr r2, 80033d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80033d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d6:	bf00      	nop
 80033d8:	0800340d 	.word	0x0800340d
 80033dc:	080037dd 	.word	0x080037dd
 80033e0:	080037dd 	.word	0x080037dd
 80033e4:	080037dd 	.word	0x080037dd
 80033e8:	08003415 	.word	0x08003415
 80033ec:	080037dd 	.word	0x080037dd
 80033f0:	080037dd 	.word	0x080037dd
 80033f4:	080037dd 	.word	0x080037dd
 80033f8:	0800341d 	.word	0x0800341d
 80033fc:	080037dd 	.word	0x080037dd
 8003400:	080037dd 	.word	0x080037dd
 8003404:	080037dd 	.word	0x080037dd
 8003408:	0800360d 	.word	0x0800360d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800340c:	4bb9      	ldr	r3, [pc, #740]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x358>)
 800340e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003412:	e1e7      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003414:	4bb8      	ldr	r3, [pc, #736]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003416:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800341a:	e1e3      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800341c:	4bb4      	ldr	r3, [pc, #720]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003424:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003428:	4bb1      	ldr	r3, [pc, #708]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d071      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003434:	4bae      	ldr	r3, [pc, #696]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	099b      	lsrs	r3, r3, #6
 800343a:	2200      	movs	r2, #0
 800343c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003440:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003444:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800344c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003450:	2300      	movs	r3, #0
 8003452:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003456:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800345a:	4622      	mov	r2, r4
 800345c:	462b      	mov	r3, r5
 800345e:	f04f 0000 	mov.w	r0, #0
 8003462:	f04f 0100 	mov.w	r1, #0
 8003466:	0159      	lsls	r1, r3, #5
 8003468:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800346c:	0150      	lsls	r0, r2, #5
 800346e:	4602      	mov	r2, r0
 8003470:	460b      	mov	r3, r1
 8003472:	4621      	mov	r1, r4
 8003474:	1a51      	subs	r1, r2, r1
 8003476:	6439      	str	r1, [r7, #64]	; 0x40
 8003478:	4629      	mov	r1, r5
 800347a:	eb63 0301 	sbc.w	r3, r3, r1
 800347e:	647b      	str	r3, [r7, #68]	; 0x44
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800348c:	4649      	mov	r1, r9
 800348e:	018b      	lsls	r3, r1, #6
 8003490:	4641      	mov	r1, r8
 8003492:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003496:	4641      	mov	r1, r8
 8003498:	018a      	lsls	r2, r1, #6
 800349a:	4641      	mov	r1, r8
 800349c:	1a51      	subs	r1, r2, r1
 800349e:	63b9      	str	r1, [r7, #56]	; 0x38
 80034a0:	4649      	mov	r1, r9
 80034a2:	eb63 0301 	sbc.w	r3, r3, r1
 80034a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	f04f 0300 	mov.w	r3, #0
 80034b0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80034b4:	4649      	mov	r1, r9
 80034b6:	00cb      	lsls	r3, r1, #3
 80034b8:	4641      	mov	r1, r8
 80034ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034be:	4641      	mov	r1, r8
 80034c0:	00ca      	lsls	r2, r1, #3
 80034c2:	4610      	mov	r0, r2
 80034c4:	4619      	mov	r1, r3
 80034c6:	4603      	mov	r3, r0
 80034c8:	4622      	mov	r2, r4
 80034ca:	189b      	adds	r3, r3, r2
 80034cc:	633b      	str	r3, [r7, #48]	; 0x30
 80034ce:	462b      	mov	r3, r5
 80034d0:	460a      	mov	r2, r1
 80034d2:	eb42 0303 	adc.w	r3, r2, r3
 80034d6:	637b      	str	r3, [r7, #52]	; 0x34
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034e4:	4629      	mov	r1, r5
 80034e6:	024b      	lsls	r3, r1, #9
 80034e8:	4621      	mov	r1, r4
 80034ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034ee:	4621      	mov	r1, r4
 80034f0:	024a      	lsls	r2, r1, #9
 80034f2:	4610      	mov	r0, r2
 80034f4:	4619      	mov	r1, r3
 80034f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034fa:	2200      	movs	r2, #0
 80034fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003500:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003504:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003508:	f7fc fe82 	bl	8000210 <__aeabi_uldivmod>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4613      	mov	r3, r2
 8003512:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003516:	e067      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003518:	4b75      	ldr	r3, [pc, #468]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	099b      	lsrs	r3, r3, #6
 800351e:	2200      	movs	r2, #0
 8003520:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003524:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003528:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800352c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003530:	67bb      	str	r3, [r7, #120]	; 0x78
 8003532:	2300      	movs	r3, #0
 8003534:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003536:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800353a:	4622      	mov	r2, r4
 800353c:	462b      	mov	r3, r5
 800353e:	f04f 0000 	mov.w	r0, #0
 8003542:	f04f 0100 	mov.w	r1, #0
 8003546:	0159      	lsls	r1, r3, #5
 8003548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800354c:	0150      	lsls	r0, r2, #5
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4621      	mov	r1, r4
 8003554:	1a51      	subs	r1, r2, r1
 8003556:	62b9      	str	r1, [r7, #40]	; 0x28
 8003558:	4629      	mov	r1, r5
 800355a:	eb63 0301 	sbc.w	r3, r3, r1
 800355e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800356c:	4649      	mov	r1, r9
 800356e:	018b      	lsls	r3, r1, #6
 8003570:	4641      	mov	r1, r8
 8003572:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003576:	4641      	mov	r1, r8
 8003578:	018a      	lsls	r2, r1, #6
 800357a:	4641      	mov	r1, r8
 800357c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003580:	4649      	mov	r1, r9
 8003582:	eb63 0b01 	sbc.w	fp, r3, r1
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003592:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003596:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800359a:	4692      	mov	sl, r2
 800359c:	469b      	mov	fp, r3
 800359e:	4623      	mov	r3, r4
 80035a0:	eb1a 0303 	adds.w	r3, sl, r3
 80035a4:	623b      	str	r3, [r7, #32]
 80035a6:	462b      	mov	r3, r5
 80035a8:	eb4b 0303 	adc.w	r3, fp, r3
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80035ba:	4629      	mov	r1, r5
 80035bc:	028b      	lsls	r3, r1, #10
 80035be:	4621      	mov	r1, r4
 80035c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035c4:	4621      	mov	r1, r4
 80035c6:	028a      	lsls	r2, r1, #10
 80035c8:	4610      	mov	r0, r2
 80035ca:	4619      	mov	r1, r3
 80035cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035d0:	2200      	movs	r2, #0
 80035d2:	673b      	str	r3, [r7, #112]	; 0x70
 80035d4:	677a      	str	r2, [r7, #116]	; 0x74
 80035d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80035da:	f7fc fe19 	bl	8000210 <__aeabi_uldivmod>
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	4613      	mov	r3, r2
 80035e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035e8:	4b41      	ldr	r3, [pc, #260]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	0c1b      	lsrs	r3, r3, #16
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	3301      	adds	r3, #1
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80035fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003602:	fbb2 f3f3 	udiv	r3, r2, r3
 8003606:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800360a:	e0eb      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800360c:	4b38      	ldr	r3, [pc, #224]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003614:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003618:	4b35      	ldr	r3, [pc, #212]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d06b      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003624:	4b32      	ldr	r3, [pc, #200]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	099b      	lsrs	r3, r3, #6
 800362a:	2200      	movs	r2, #0
 800362c:	66bb      	str	r3, [r7, #104]	; 0x68
 800362e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003630:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003636:	663b      	str	r3, [r7, #96]	; 0x60
 8003638:	2300      	movs	r3, #0
 800363a:	667b      	str	r3, [r7, #100]	; 0x64
 800363c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003640:	4622      	mov	r2, r4
 8003642:	462b      	mov	r3, r5
 8003644:	f04f 0000 	mov.w	r0, #0
 8003648:	f04f 0100 	mov.w	r1, #0
 800364c:	0159      	lsls	r1, r3, #5
 800364e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003652:	0150      	lsls	r0, r2, #5
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	4621      	mov	r1, r4
 800365a:	1a51      	subs	r1, r2, r1
 800365c:	61b9      	str	r1, [r7, #24]
 800365e:	4629      	mov	r1, r5
 8003660:	eb63 0301 	sbc.w	r3, r3, r1
 8003664:	61fb      	str	r3, [r7, #28]
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	f04f 0300 	mov.w	r3, #0
 800366e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003672:	4659      	mov	r1, fp
 8003674:	018b      	lsls	r3, r1, #6
 8003676:	4651      	mov	r1, sl
 8003678:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800367c:	4651      	mov	r1, sl
 800367e:	018a      	lsls	r2, r1, #6
 8003680:	4651      	mov	r1, sl
 8003682:	ebb2 0801 	subs.w	r8, r2, r1
 8003686:	4659      	mov	r1, fp
 8003688:	eb63 0901 	sbc.w	r9, r3, r1
 800368c:	f04f 0200 	mov.w	r2, #0
 8003690:	f04f 0300 	mov.w	r3, #0
 8003694:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003698:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800369c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036a0:	4690      	mov	r8, r2
 80036a2:	4699      	mov	r9, r3
 80036a4:	4623      	mov	r3, r4
 80036a6:	eb18 0303 	adds.w	r3, r8, r3
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	462b      	mov	r3, r5
 80036ae:	eb49 0303 	adc.w	r3, r9, r3
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80036c0:	4629      	mov	r1, r5
 80036c2:	024b      	lsls	r3, r1, #9
 80036c4:	4621      	mov	r1, r4
 80036c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036ca:	4621      	mov	r1, r4
 80036cc:	024a      	lsls	r2, r1, #9
 80036ce:	4610      	mov	r0, r2
 80036d0:	4619      	mov	r1, r3
 80036d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036d6:	2200      	movs	r2, #0
 80036d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80036da:	65fa      	str	r2, [r7, #92]	; 0x5c
 80036dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80036e0:	f7fc fd96 	bl	8000210 <__aeabi_uldivmod>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4613      	mov	r3, r2
 80036ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036ee:	e065      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0x420>
 80036f0:	40023800 	.word	0x40023800
 80036f4:	00f42400 	.word	0x00f42400
 80036f8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036fc:	4b3d      	ldr	r3, [pc, #244]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	099b      	lsrs	r3, r3, #6
 8003702:	2200      	movs	r2, #0
 8003704:	4618      	mov	r0, r3
 8003706:	4611      	mov	r1, r2
 8003708:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800370c:	653b      	str	r3, [r7, #80]	; 0x50
 800370e:	2300      	movs	r3, #0
 8003710:	657b      	str	r3, [r7, #84]	; 0x54
 8003712:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003716:	4642      	mov	r2, r8
 8003718:	464b      	mov	r3, r9
 800371a:	f04f 0000 	mov.w	r0, #0
 800371e:	f04f 0100 	mov.w	r1, #0
 8003722:	0159      	lsls	r1, r3, #5
 8003724:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003728:	0150      	lsls	r0, r2, #5
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	4641      	mov	r1, r8
 8003730:	1a51      	subs	r1, r2, r1
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	4649      	mov	r1, r9
 8003736:	eb63 0301 	sbc.w	r3, r3, r1
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003748:	4659      	mov	r1, fp
 800374a:	018b      	lsls	r3, r1, #6
 800374c:	4651      	mov	r1, sl
 800374e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003752:	4651      	mov	r1, sl
 8003754:	018a      	lsls	r2, r1, #6
 8003756:	4651      	mov	r1, sl
 8003758:	1a54      	subs	r4, r2, r1
 800375a:	4659      	mov	r1, fp
 800375c:	eb63 0501 	sbc.w	r5, r3, r1
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	00eb      	lsls	r3, r5, #3
 800376a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800376e:	00e2      	lsls	r2, r4, #3
 8003770:	4614      	mov	r4, r2
 8003772:	461d      	mov	r5, r3
 8003774:	4643      	mov	r3, r8
 8003776:	18e3      	adds	r3, r4, r3
 8003778:	603b      	str	r3, [r7, #0]
 800377a:	464b      	mov	r3, r9
 800377c:	eb45 0303 	adc.w	r3, r5, r3
 8003780:	607b      	str	r3, [r7, #4]
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800378e:	4629      	mov	r1, r5
 8003790:	028b      	lsls	r3, r1, #10
 8003792:	4621      	mov	r1, r4
 8003794:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003798:	4621      	mov	r1, r4
 800379a:	028a      	lsls	r2, r1, #10
 800379c:	4610      	mov	r0, r2
 800379e:	4619      	mov	r1, r3
 80037a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037a4:	2200      	movs	r2, #0
 80037a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80037a8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80037aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037ae:	f7fc fd2f 	bl	8000210 <__aeabi_uldivmod>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4613      	mov	r3, r2
 80037b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80037bc:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	0f1b      	lsrs	r3, r3, #28
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80037ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80037d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80037da:	e003      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037dc:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80037de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80037e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	37b8      	adds	r7, #184	; 0xb8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800
 80037f8:	00f42400 	.word	0x00f42400

080037fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e28d      	b.n	8003d2a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 8083 	beq.w	8003922 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800381c:	4b94      	ldr	r3, [pc, #592]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 030c 	and.w	r3, r3, #12
 8003824:	2b04      	cmp	r3, #4
 8003826:	d019      	beq.n	800385c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003828:	4b91      	ldr	r3, [pc, #580]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003830:	2b08      	cmp	r3, #8
 8003832:	d106      	bne.n	8003842 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003834:	4b8e      	ldr	r3, [pc, #568]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800383c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003840:	d00c      	beq.n	800385c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003842:	4b8b      	ldr	r3, [pc, #556]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800384a:	2b0c      	cmp	r3, #12
 800384c:	d112      	bne.n	8003874 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800384e:	4b88      	ldr	r3, [pc, #544]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003856:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800385a:	d10b      	bne.n	8003874 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800385c:	4b84      	ldr	r3, [pc, #528]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d05b      	beq.n	8003920 <HAL_RCC_OscConfig+0x124>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d157      	bne.n	8003920 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e25a      	b.n	8003d2a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800387c:	d106      	bne.n	800388c <HAL_RCC_OscConfig+0x90>
 800387e:	4b7c      	ldr	r3, [pc, #496]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a7b      	ldr	r2, [pc, #492]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 8003884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	e01d      	b.n	80038c8 <HAL_RCC_OscConfig+0xcc>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003894:	d10c      	bne.n	80038b0 <HAL_RCC_OscConfig+0xb4>
 8003896:	4b76      	ldr	r3, [pc, #472]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a75      	ldr	r2, [pc, #468]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 800389c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	4b73      	ldr	r3, [pc, #460]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a72      	ldr	r2, [pc, #456]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 80038a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	e00b      	b.n	80038c8 <HAL_RCC_OscConfig+0xcc>
 80038b0:	4b6f      	ldr	r3, [pc, #444]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a6e      	ldr	r2, [pc, #440]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 80038b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ba:	6013      	str	r3, [r2, #0]
 80038bc:	4b6c      	ldr	r3, [pc, #432]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a6b      	ldr	r2, [pc, #428]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 80038c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d013      	beq.n	80038f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d0:	f7fe fa52 	bl	8001d78 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d8:	f7fe fa4e 	bl	8001d78 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b64      	cmp	r3, #100	; 0x64
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e21f      	b.n	8003d2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ea:	4b61      	ldr	r3, [pc, #388]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0f0      	beq.n	80038d8 <HAL_RCC_OscConfig+0xdc>
 80038f6:	e014      	b.n	8003922 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f8:	f7fe fa3e 	bl	8001d78 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003900:	f7fe fa3a 	bl	8001d78 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b64      	cmp	r3, #100	; 0x64
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e20b      	b.n	8003d2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003912:	4b57      	ldr	r3, [pc, #348]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f0      	bne.n	8003900 <HAL_RCC_OscConfig+0x104>
 800391e:	e000      	b.n	8003922 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d06f      	beq.n	8003a0e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800392e:	4b50      	ldr	r3, [pc, #320]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
 8003936:	2b00      	cmp	r3, #0
 8003938:	d017      	beq.n	800396a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800393a:	4b4d      	ldr	r3, [pc, #308]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003942:	2b08      	cmp	r3, #8
 8003944:	d105      	bne.n	8003952 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003946:	4b4a      	ldr	r3, [pc, #296]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00b      	beq.n	800396a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003952:	4b47      	ldr	r3, [pc, #284]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800395a:	2b0c      	cmp	r3, #12
 800395c:	d11c      	bne.n	8003998 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800395e:	4b44      	ldr	r3, [pc, #272]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d116      	bne.n	8003998 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396a:	4b41      	ldr	r3, [pc, #260]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d005      	beq.n	8003982 <HAL_RCC_OscConfig+0x186>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d001      	beq.n	8003982 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e1d3      	b.n	8003d2a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003982:	4b3b      	ldr	r3, [pc, #236]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4937      	ldr	r1, [pc, #220]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 8003992:	4313      	orrs	r3, r2
 8003994:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003996:	e03a      	b.n	8003a0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d020      	beq.n	80039e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039a0:	4b34      	ldr	r3, [pc, #208]	; (8003a74 <HAL_RCC_OscConfig+0x278>)
 80039a2:	2201      	movs	r2, #1
 80039a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a6:	f7fe f9e7 	bl	8001d78 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039ae:	f7fe f9e3 	bl	8001d78 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e1b4      	b.n	8003d2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c0:	4b2b      	ldr	r3, [pc, #172]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0f0      	beq.n	80039ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039cc:	4b28      	ldr	r3, [pc, #160]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4925      	ldr	r1, [pc, #148]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	600b      	str	r3, [r1, #0]
 80039e0:	e015      	b.n	8003a0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039e2:	4b24      	ldr	r3, [pc, #144]	; (8003a74 <HAL_RCC_OscConfig+0x278>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fe f9c6 	bl	8001d78 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039f0:	f7fe f9c2 	bl	8001d78 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e193      	b.n	8003d2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a02:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d036      	beq.n	8003a88 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d016      	beq.n	8003a50 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a22:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <HAL_RCC_OscConfig+0x27c>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a28:	f7fe f9a6 	bl	8001d78 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a30:	f7fe f9a2 	bl	8001d78 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e173      	b.n	8003d2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a42:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 8003a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0x234>
 8003a4e:	e01b      	b.n	8003a88 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a50:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <HAL_RCC_OscConfig+0x27c>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a56:	f7fe f98f 	bl	8001d78 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a5c:	e00e      	b.n	8003a7c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a5e:	f7fe f98b 	bl	8001d78 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d907      	bls.n	8003a7c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e15c      	b.n	8003d2a <HAL_RCC_OscConfig+0x52e>
 8003a70:	40023800 	.word	0x40023800
 8003a74:	42470000 	.word	0x42470000
 8003a78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a7c:	4b8a      	ldr	r3, [pc, #552]	; (8003ca8 <HAL_RCC_OscConfig+0x4ac>)
 8003a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1ea      	bne.n	8003a5e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 8097 	beq.w	8003bc4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a96:	2300      	movs	r3, #0
 8003a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a9a:	4b83      	ldr	r3, [pc, #524]	; (8003ca8 <HAL_RCC_OscConfig+0x4ac>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10f      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60bb      	str	r3, [r7, #8]
 8003aaa:	4b7f      	ldr	r3, [pc, #508]	; (8003ca8 <HAL_RCC_OscConfig+0x4ac>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	4a7e      	ldr	r2, [pc, #504]	; (8003ca8 <HAL_RCC_OscConfig+0x4ac>)
 8003ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ab6:	4b7c      	ldr	r3, [pc, #496]	; (8003ca8 <HAL_RCC_OscConfig+0x4ac>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003abe:	60bb      	str	r3, [r7, #8]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac6:	4b79      	ldr	r3, [pc, #484]	; (8003cac <HAL_RCC_OscConfig+0x4b0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d118      	bne.n	8003b04 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ad2:	4b76      	ldr	r3, [pc, #472]	; (8003cac <HAL_RCC_OscConfig+0x4b0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a75      	ldr	r2, [pc, #468]	; (8003cac <HAL_RCC_OscConfig+0x4b0>)
 8003ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ade:	f7fe f94b 	bl	8001d78 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae6:	f7fe f947 	bl	8001d78 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e118      	b.n	8003d2a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af8:	4b6c      	ldr	r3, [pc, #432]	; (8003cac <HAL_RCC_OscConfig+0x4b0>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d106      	bne.n	8003b1a <HAL_RCC_OscConfig+0x31e>
 8003b0c:	4b66      	ldr	r3, [pc, #408]	; (8003ca8 <HAL_RCC_OscConfig+0x4ac>)
 8003b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b10:	4a65      	ldr	r2, [pc, #404]	; (8003ca8 <HAL_RCC_OscConfig+0x4ac>)
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	6713      	str	r3, [r2, #112]	; 0x70
 8003b18:	e01c      	b.n	8003b54 <HAL_RCC_OscConfig+0x358>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b05      	cmp	r3, #5
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCC_OscConfig+0x340>
 8003b22:	4b61      	ldr	r3, [pc, #388]	; (8003ca8 <HAL_RCC_OscConfig+0x4ac>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	4a60      	ldr	r2, [pc, #384]	; (8003ca8 <HAL_RCC_OscConfig+0x4ac>)
 8003b28:	f043 0304 	orr.w	r3, r3, #4
 8003b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2e:	4b5e      	ldr	r3, [pc, #376]	; (8003ca8 <HAL_RCC_OscConfig+0x4ac>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b32:	4a5d      	ldr	r2, [pc, #372]	; (8003ca8 <HAL_RCC_OscConfig+0x4ac>)
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	6713      	str	r3, [r2, #112]	; 0x70
 8003b3a:	e00b      	b.n	8003b54 <HAL_RCC_OscConfig+0x358>
 8003b3c:	4b5a      	ldr	r3, [pc, #360]	; (8003ca8 <HAL_RCC_OscConfig+0x4ac>)
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b40:	4a59      	ldr	r2, [pc, #356]	; (8003ca8 <HAL_RCC_OscConfig+0x4ac>)
 8003b42:	f023 0301 	bic.w	r3, r3, #1
 8003b46:	6713      	str	r3, [r2, #112]	; 0x70
 8003b48:	4b57      	ldr	r3, [pc, #348]	; (8003ca8 <HAL_RCC_OscConfig+0x4ac>)
 8003b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4c:	4a56      	ldr	r2, [pc, #344]	; (8003ca8 <HAL_RCC_OscConfig+0x4ac>)
 8003b4e:	f023 0304 	bic.w	r3, r3, #4
 8003b52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d015      	beq.n	8003b88 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5c:	f7fe f90c 	bl	8001d78 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b62:	e00a      	b.n	8003b7a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b64:	f7fe f908 	bl	8001d78 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e0d7      	b.n	8003d2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7a:	4b4b      	ldr	r3, [pc, #300]	; (8003ca8 <HAL_RCC_OscConfig+0x4ac>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0ee      	beq.n	8003b64 <HAL_RCC_OscConfig+0x368>
 8003b86:	e014      	b.n	8003bb2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b88:	f7fe f8f6 	bl	8001d78 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b8e:	e00a      	b.n	8003ba6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b90:	f7fe f8f2 	bl	8001d78 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e0c1      	b.n	8003d2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba6:	4b40      	ldr	r3, [pc, #256]	; (8003ca8 <HAL_RCC_OscConfig+0x4ac>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1ee      	bne.n	8003b90 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d105      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb8:	4b3b      	ldr	r3, [pc, #236]	; (8003ca8 <HAL_RCC_OscConfig+0x4ac>)
 8003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbc:	4a3a      	ldr	r2, [pc, #232]	; (8003ca8 <HAL_RCC_OscConfig+0x4ac>)
 8003bbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 80ad 	beq.w	8003d28 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bce:	4b36      	ldr	r3, [pc, #216]	; (8003ca8 <HAL_RCC_OscConfig+0x4ac>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d060      	beq.n	8003c9c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d145      	bne.n	8003c6e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be2:	4b33      	ldr	r3, [pc, #204]	; (8003cb0 <HAL_RCC_OscConfig+0x4b4>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be8:	f7fe f8c6 	bl	8001d78 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf0:	f7fe f8c2 	bl	8001d78 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e093      	b.n	8003d2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c02:	4b29      	ldr	r3, [pc, #164]	; (8003ca8 <HAL_RCC_OscConfig+0x4ac>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f0      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69da      	ldr	r2, [r3, #28]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	019b      	lsls	r3, r3, #6
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c24:	085b      	lsrs	r3, r3, #1
 8003c26:	3b01      	subs	r3, #1
 8003c28:	041b      	lsls	r3, r3, #16
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	061b      	lsls	r3, r3, #24
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c38:	071b      	lsls	r3, r3, #28
 8003c3a:	491b      	ldr	r1, [pc, #108]	; (8003ca8 <HAL_RCC_OscConfig+0x4ac>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c40:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <HAL_RCC_OscConfig+0x4b4>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c46:	f7fe f897 	bl	8001d78 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c4e:	f7fe f893 	bl	8001d78 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e064      	b.n	8003d2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c60:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <HAL_RCC_OscConfig+0x4ac>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <HAL_RCC_OscConfig+0x452>
 8003c6c:	e05c      	b.n	8003d28 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6e:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <HAL_RCC_OscConfig+0x4b4>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fe f880 	bl	8001d78 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c7c:	f7fe f87c 	bl	8001d78 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e04d      	b.n	8003d2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8e:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <HAL_RCC_OscConfig+0x4ac>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x480>
 8003c9a:	e045      	b.n	8003d28 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d107      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e040      	b.n	8003d2a <HAL_RCC_OscConfig+0x52e>
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	40007000 	.word	0x40007000
 8003cb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cb4:	4b1f      	ldr	r3, [pc, #124]	; (8003d34 <HAL_RCC_OscConfig+0x538>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d030      	beq.n	8003d24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d129      	bne.n	8003d24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d122      	bne.n	8003d24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d119      	bne.n	8003d24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfa:	085b      	lsrs	r3, r3, #1
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d10f      	bne.n	8003d24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d107      	bne.n	8003d24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d001      	beq.n	8003d28 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e000      	b.n	8003d2a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40023800 	.word	0x40023800

08003d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e041      	b.n	8003dce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d106      	bne.n	8003d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f839 	bl	8003dd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3304      	adds	r3, #4
 8003d74:	4619      	mov	r1, r3
 8003d76:	4610      	mov	r0, r2
 8003d78:	f000 f9d8 	bl	800412c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
	...

08003dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d001      	beq.n	8003e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e04e      	b.n	8003ea2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0201 	orr.w	r2, r2, #1
 8003e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a23      	ldr	r2, [pc, #140]	; (8003eb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d022      	beq.n	8003e6c <HAL_TIM_Base_Start_IT+0x80>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2e:	d01d      	beq.n	8003e6c <HAL_TIM_Base_Start_IT+0x80>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a1f      	ldr	r2, [pc, #124]	; (8003eb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d018      	beq.n	8003e6c <HAL_TIM_Base_Start_IT+0x80>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a1e      	ldr	r2, [pc, #120]	; (8003eb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d013      	beq.n	8003e6c <HAL_TIM_Base_Start_IT+0x80>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a1c      	ldr	r2, [pc, #112]	; (8003ebc <HAL_TIM_Base_Start_IT+0xd0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00e      	beq.n	8003e6c <HAL_TIM_Base_Start_IT+0x80>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a1b      	ldr	r2, [pc, #108]	; (8003ec0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d009      	beq.n	8003e6c <HAL_TIM_Base_Start_IT+0x80>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a19      	ldr	r2, [pc, #100]	; (8003ec4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d004      	beq.n	8003e6c <HAL_TIM_Base_Start_IT+0x80>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a18      	ldr	r2, [pc, #96]	; (8003ec8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d111      	bne.n	8003e90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b06      	cmp	r3, #6
 8003e7c:	d010      	beq.n	8003ea0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0201 	orr.w	r2, r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e8e:	e007      	b.n	8003ea0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0201 	orr.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40010000 	.word	0x40010000
 8003eb4:	40000400 	.word	0x40000400
 8003eb8:	40000800 	.word	0x40000800
 8003ebc:	40000c00 	.word	0x40000c00
 8003ec0:	40010400 	.word	0x40010400
 8003ec4:	40014000 	.word	0x40014000
 8003ec8:	40001800 	.word	0x40001800

08003ecc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d122      	bne.n	8003f28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d11b      	bne.n	8003f28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f06f 0202 	mvn.w	r2, #2
 8003ef8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f8ee 	bl	80040f0 <HAL_TIM_IC_CaptureCallback>
 8003f14:	e005      	b.n	8003f22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f8e0 	bl	80040dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f8f1 	bl	8004104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	f003 0304 	and.w	r3, r3, #4
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d122      	bne.n	8003f7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d11b      	bne.n	8003f7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f06f 0204 	mvn.w	r2, #4
 8003f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2202      	movs	r2, #2
 8003f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f8c4 	bl	80040f0 <HAL_TIM_IC_CaptureCallback>
 8003f68:	e005      	b.n	8003f76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f8b6 	bl	80040dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f8c7 	bl	8004104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d122      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d11b      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f06f 0208 	mvn.w	r2, #8
 8003fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2204      	movs	r2, #4
 8003fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f89a 	bl	80040f0 <HAL_TIM_IC_CaptureCallback>
 8003fbc:	e005      	b.n	8003fca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f88c 	bl	80040dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f89d 	bl	8004104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f003 0310 	and.w	r3, r3, #16
 8003fda:	2b10      	cmp	r3, #16
 8003fdc:	d122      	bne.n	8004024 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	2b10      	cmp	r3, #16
 8003fea:	d11b      	bne.n	8004024 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f06f 0210 	mvn.w	r2, #16
 8003ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2208      	movs	r2, #8
 8003ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f870 	bl	80040f0 <HAL_TIM_IC_CaptureCallback>
 8004010:	e005      	b.n	800401e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f862 	bl	80040dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f873 	bl	8004104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b01      	cmp	r3, #1
 8004030:	d10e      	bne.n	8004050 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b01      	cmp	r3, #1
 800403e:	d107      	bne.n	8004050 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0201 	mvn.w	r2, #1
 8004048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7fd fcb4 	bl	80019b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405a:	2b80      	cmp	r3, #128	; 0x80
 800405c:	d10e      	bne.n	800407c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004068:	2b80      	cmp	r3, #128	; 0x80
 800406a:	d107      	bne.n	800407c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f902 	bl	8004280 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004086:	2b40      	cmp	r3, #64	; 0x40
 8004088:	d10e      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004094:	2b40      	cmp	r3, #64	; 0x40
 8004096:	d107      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f838 	bl	8004118 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	2b20      	cmp	r3, #32
 80040b4:	d10e      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 0320 	and.w	r3, r3, #32
 80040c0:	2b20      	cmp	r3, #32
 80040c2:	d107      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f06f 0220 	mvn.w	r2, #32
 80040cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f8cc 	bl	800426c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040d4:	bf00      	nop
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a40      	ldr	r2, [pc, #256]	; (8004240 <TIM_Base_SetConfig+0x114>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d013      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414a:	d00f      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a3d      	ldr	r2, [pc, #244]	; (8004244 <TIM_Base_SetConfig+0x118>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d00b      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a3c      	ldr	r2, [pc, #240]	; (8004248 <TIM_Base_SetConfig+0x11c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d007      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a3b      	ldr	r2, [pc, #236]	; (800424c <TIM_Base_SetConfig+0x120>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d003      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a3a      	ldr	r2, [pc, #232]	; (8004250 <TIM_Base_SetConfig+0x124>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d108      	bne.n	800417e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a2f      	ldr	r2, [pc, #188]	; (8004240 <TIM_Base_SetConfig+0x114>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d02b      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418c:	d027      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a2c      	ldr	r2, [pc, #176]	; (8004244 <TIM_Base_SetConfig+0x118>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d023      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a2b      	ldr	r2, [pc, #172]	; (8004248 <TIM_Base_SetConfig+0x11c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d01f      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a2a      	ldr	r2, [pc, #168]	; (800424c <TIM_Base_SetConfig+0x120>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d01b      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a29      	ldr	r2, [pc, #164]	; (8004250 <TIM_Base_SetConfig+0x124>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d017      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a28      	ldr	r2, [pc, #160]	; (8004254 <TIM_Base_SetConfig+0x128>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d013      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a27      	ldr	r2, [pc, #156]	; (8004258 <TIM_Base_SetConfig+0x12c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00f      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a26      	ldr	r2, [pc, #152]	; (800425c <TIM_Base_SetConfig+0x130>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00b      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a25      	ldr	r2, [pc, #148]	; (8004260 <TIM_Base_SetConfig+0x134>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d007      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a24      	ldr	r2, [pc, #144]	; (8004264 <TIM_Base_SetConfig+0x138>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d003      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a23      	ldr	r2, [pc, #140]	; (8004268 <TIM_Base_SetConfig+0x13c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d108      	bne.n	80041f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a0a      	ldr	r2, [pc, #40]	; (8004240 <TIM_Base_SetConfig+0x114>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d003      	beq.n	8004224 <TIM_Base_SetConfig+0xf8>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a0c      	ldr	r2, [pc, #48]	; (8004250 <TIM_Base_SetConfig+0x124>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d103      	bne.n	800422c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	615a      	str	r2, [r3, #20]
}
 8004232:	bf00      	nop
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40010000 	.word	0x40010000
 8004244:	40000400 	.word	0x40000400
 8004248:	40000800 	.word	0x40000800
 800424c:	40000c00 	.word	0x40000c00
 8004250:	40010400 	.word	0x40010400
 8004254:	40014000 	.word	0x40014000
 8004258:	40014400 	.word	0x40014400
 800425c:	40014800 	.word	0x40014800
 8004260:	40001800 	.word	0x40001800
 8004264:	40001c00 	.word	0x40001c00
 8004268:	40002000 	.word	0x40002000

0800426c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e03f      	b.n	8004326 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fd fcac 	bl	8001c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2224      	movs	r2, #36	; 0x24
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 fd7b 	bl	8004dd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695a      	ldr	r2, [r3, #20]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800430c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b08a      	sub	sp, #40	; 0x28
 8004332:	af02      	add	r7, sp, #8
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	603b      	str	r3, [r7, #0]
 800433a:	4613      	mov	r3, r2
 800433c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b20      	cmp	r3, #32
 800434c:	d17c      	bne.n	8004448 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <HAL_UART_Transmit+0x2c>
 8004354:	88fb      	ldrh	r3, [r7, #6]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e075      	b.n	800444a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_UART_Transmit+0x3e>
 8004368:	2302      	movs	r3, #2
 800436a:	e06e      	b.n	800444a <HAL_UART_Transmit+0x11c>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2221      	movs	r2, #33	; 0x21
 800437e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004382:	f7fd fcf9 	bl	8001d78 <HAL_GetTick>
 8004386:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	88fa      	ldrh	r2, [r7, #6]
 800438c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	88fa      	ldrh	r2, [r7, #6]
 8004392:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439c:	d108      	bne.n	80043b0 <HAL_UART_Transmit+0x82>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d104      	bne.n	80043b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	61bb      	str	r3, [r7, #24]
 80043ae:	e003      	b.n	80043b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043b4:	2300      	movs	r3, #0
 80043b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043c0:	e02a      	b.n	8004418 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2200      	movs	r2, #0
 80043ca:	2180      	movs	r1, #128	; 0x80
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 faf9 	bl	80049c4 <UART_WaitOnFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e036      	b.n	800444a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10b      	bne.n	80043fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	3302      	adds	r3, #2
 80043f6:	61bb      	str	r3, [r7, #24]
 80043f8:	e007      	b.n	800440a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	781a      	ldrb	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	3301      	adds	r3, #1
 8004408:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800441c:	b29b      	uxth	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1cf      	bne.n	80043c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2200      	movs	r2, #0
 800442a:	2140      	movs	r1, #64	; 0x40
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 fac9 	bl	80049c4 <UART_WaitOnFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e006      	b.n	800444a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	e000      	b.n	800444a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004448:	2302      	movs	r3, #2
  }
}
 800444a:	4618      	mov	r0, r3
 800444c:	3720      	adds	r7, #32
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b0ba      	sub	sp, #232	; 0xe8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800447a:	2300      	movs	r3, #0
 800447c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004480:	2300      	movs	r3, #0
 8004482:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004492:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10f      	bne.n	80044ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800449a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800449e:	f003 0320 	and.w	r3, r3, #32
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d009      	beq.n	80044ba <HAL_UART_IRQHandler+0x66>
 80044a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fbd3 	bl	8004c5e <UART_Receive_IT>
      return;
 80044b8:	e256      	b.n	8004968 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80044ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 80de 	beq.w	8004680 <HAL_UART_IRQHandler+0x22c>
 80044c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d106      	bne.n	80044de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 80d1 	beq.w	8004680 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00b      	beq.n	8004502 <HAL_UART_IRQHandler+0xae>
 80044ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	f043 0201 	orr.w	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004506:	f003 0304 	and.w	r3, r3, #4
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00b      	beq.n	8004526 <HAL_UART_IRQHandler+0xd2>
 800450e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	f043 0202 	orr.w	r2, r3, #2
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00b      	beq.n	800454a <HAL_UART_IRQHandler+0xf6>
 8004532:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d005      	beq.n	800454a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	f043 0204 	orr.w	r2, r3, #4
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800454a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d011      	beq.n	800457a <HAL_UART_IRQHandler+0x126>
 8004556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800455a:	f003 0320 	and.w	r3, r3, #32
 800455e:	2b00      	cmp	r3, #0
 8004560:	d105      	bne.n	800456e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d005      	beq.n	800457a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	f043 0208 	orr.w	r2, r3, #8
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 81ed 	beq.w	800495e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	d008      	beq.n	80045a2 <HAL_UART_IRQHandler+0x14e>
 8004590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	2b00      	cmp	r3, #0
 800459a:	d002      	beq.n	80045a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 fb5e 	bl	8004c5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ac:	2b40      	cmp	r3, #64	; 0x40
 80045ae:	bf0c      	ite	eq
 80045b0:	2301      	moveq	r3, #1
 80045b2:	2300      	movne	r3, #0
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d103      	bne.n	80045ce <HAL_UART_IRQHandler+0x17a>
 80045c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d04f      	beq.n	800466e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fa66 	bl	8004aa0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045de:	2b40      	cmp	r3, #64	; 0x40
 80045e0:	d141      	bne.n	8004666 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	3314      	adds	r3, #20
 80045e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045f0:	e853 3f00 	ldrex	r3, [r3]
 80045f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80045f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004600:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3314      	adds	r3, #20
 800460a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800460e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004612:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800461a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800461e:	e841 2300 	strex	r3, r2, [r1]
 8004622:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004626:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1d9      	bne.n	80045e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004632:	2b00      	cmp	r3, #0
 8004634:	d013      	beq.n	800465e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463a:	4a7d      	ldr	r2, [pc, #500]	; (8004830 <HAL_UART_IRQHandler+0x3dc>)
 800463c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	4618      	mov	r0, r3
 8004644:	f7fe fb8e 	bl	8002d64 <HAL_DMA_Abort_IT>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d016      	beq.n	800467c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004658:	4610      	mov	r0, r2
 800465a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800465c:	e00e      	b.n	800467c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f99a 	bl	8004998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004664:	e00a      	b.n	800467c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f996 	bl	8004998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800466c:	e006      	b.n	800467c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f992 	bl	8004998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800467a:	e170      	b.n	800495e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800467c:	bf00      	nop
    return;
 800467e:	e16e      	b.n	800495e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004684:	2b01      	cmp	r3, #1
 8004686:	f040 814a 	bne.w	800491e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800468a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800468e:	f003 0310 	and.w	r3, r3, #16
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 8143 	beq.w	800491e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 813c 	beq.w	800491e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046a6:	2300      	movs	r3, #0
 80046a8:	60bb      	str	r3, [r7, #8]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	60bb      	str	r3, [r7, #8]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	60bb      	str	r3, [r7, #8]
 80046ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c6:	2b40      	cmp	r3, #64	; 0x40
 80046c8:	f040 80b4 	bne.w	8004834 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 8140 	beq.w	8004962 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046ea:	429a      	cmp	r2, r3
 80046ec:	f080 8139 	bcs.w	8004962 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004702:	f000 8088 	beq.w	8004816 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	330c      	adds	r3, #12
 800470c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004710:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800471c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004724:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	330c      	adds	r3, #12
 800472e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004732:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800473e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004742:	e841 2300 	strex	r3, r2, [r1]
 8004746:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800474a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1d9      	bne.n	8004706 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	3314      	adds	r3, #20
 8004758:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004762:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004764:	f023 0301 	bic.w	r3, r3, #1
 8004768:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3314      	adds	r3, #20
 8004772:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004776:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800477a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800477e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004782:	e841 2300 	strex	r3, r2, [r1]
 8004786:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1e1      	bne.n	8004752 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3314      	adds	r3, #20
 8004794:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004796:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004798:	e853 3f00 	ldrex	r3, [r3]
 800479c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800479e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3314      	adds	r3, #20
 80047ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80047b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047ba:	e841 2300 	strex	r3, r2, [r1]
 80047be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1e3      	bne.n	800478e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	330c      	adds	r3, #12
 80047da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047de:	e853 3f00 	ldrex	r3, [r3]
 80047e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e6:	f023 0310 	bic.w	r3, r3, #16
 80047ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	330c      	adds	r3, #12
 80047f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80047f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80047fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e3      	bne.n	80047d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004810:	4618      	mov	r0, r3
 8004812:	f7fe fa37 	bl	8002c84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800481e:	b29b      	uxth	r3, r3
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	b29b      	uxth	r3, r3
 8004824:	4619      	mov	r1, r3
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f8c0 	bl	80049ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800482c:	e099      	b.n	8004962 <HAL_UART_IRQHandler+0x50e>
 800482e:	bf00      	nop
 8004830:	08004b67 	.word	0x08004b67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800483c:	b29b      	uxth	r3, r3
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004848:	b29b      	uxth	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 808b 	beq.w	8004966 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004850:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 8086 	beq.w	8004966 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	330c      	adds	r3, #12
 8004860:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004864:	e853 3f00 	ldrex	r3, [r3]
 8004868:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800486a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800486c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004870:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	330c      	adds	r3, #12
 800487a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800487e:	647a      	str	r2, [r7, #68]	; 0x44
 8004880:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004884:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800488c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e3      	bne.n	800485a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	3314      	adds	r3, #20
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	e853 3f00 	ldrex	r3, [r3]
 80048a0:	623b      	str	r3, [r7, #32]
   return(result);
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	f023 0301 	bic.w	r3, r3, #1
 80048a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3314      	adds	r3, #20
 80048b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80048b6:	633a      	str	r2, [r7, #48]	; 0x30
 80048b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e3      	bne.n	8004892 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	330c      	adds	r3, #12
 80048de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	e853 3f00 	ldrex	r3, [r3]
 80048e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0310 	bic.w	r3, r3, #16
 80048ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	330c      	adds	r3, #12
 80048f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80048fc:	61fa      	str	r2, [r7, #28]
 80048fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004900:	69b9      	ldr	r1, [r7, #24]
 8004902:	69fa      	ldr	r2, [r7, #28]
 8004904:	e841 2300 	strex	r3, r2, [r1]
 8004908:	617b      	str	r3, [r7, #20]
   return(result);
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e3      	bne.n	80048d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004910:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004914:	4619      	mov	r1, r3
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f848 	bl	80049ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800491c:	e023      	b.n	8004966 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800491e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004926:	2b00      	cmp	r3, #0
 8004928:	d009      	beq.n	800493e <HAL_UART_IRQHandler+0x4ea>
 800492a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800492e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f929 	bl	8004b8e <UART_Transmit_IT>
    return;
 800493c:	e014      	b.n	8004968 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800493e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00e      	beq.n	8004968 <HAL_UART_IRQHandler+0x514>
 800494a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800494e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004952:	2b00      	cmp	r3, #0
 8004954:	d008      	beq.n	8004968 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f969 	bl	8004c2e <UART_EndTransmit_IT>
    return;
 800495c:	e004      	b.n	8004968 <HAL_UART_IRQHandler+0x514>
    return;
 800495e:	bf00      	nop
 8004960:	e002      	b.n	8004968 <HAL_UART_IRQHandler+0x514>
      return;
 8004962:	bf00      	nop
 8004964:	e000      	b.n	8004968 <HAL_UART_IRQHandler+0x514>
      return;
 8004966:	bf00      	nop
  }
}
 8004968:	37e8      	adds	r7, #232	; 0xe8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop

08004970 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b090      	sub	sp, #64	; 0x40
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	603b      	str	r3, [r7, #0]
 80049d0:	4613      	mov	r3, r2
 80049d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d4:	e050      	b.n	8004a78 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049dc:	d04c      	beq.n	8004a78 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d007      	beq.n	80049f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80049e4:	f7fd f9c8 	bl	8001d78 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d241      	bcs.n	8004a78 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	330c      	adds	r3, #12
 80049fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fe:	e853 3f00 	ldrex	r3, [r3]
 8004a02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	330c      	adds	r3, #12
 8004a12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a14:	637a      	str	r2, [r7, #52]	; 0x34
 8004a16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a1c:	e841 2300 	strex	r3, r2, [r1]
 8004a20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1e5      	bne.n	80049f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3314      	adds	r3, #20
 8004a2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	e853 3f00 	ldrex	r3, [r3]
 8004a36:	613b      	str	r3, [r7, #16]
   return(result);
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	f023 0301 	bic.w	r3, r3, #1
 8004a3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3314      	adds	r3, #20
 8004a46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a48:	623a      	str	r2, [r7, #32]
 8004a4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4c:	69f9      	ldr	r1, [r7, #28]
 8004a4e:	6a3a      	ldr	r2, [r7, #32]
 8004a50:	e841 2300 	strex	r3, r2, [r1]
 8004a54:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1e5      	bne.n	8004a28 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e00f      	b.n	8004a98 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	4013      	ands	r3, r2
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	bf0c      	ite	eq
 8004a88:	2301      	moveq	r3, #1
 8004a8a:	2300      	movne	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	461a      	mov	r2, r3
 8004a90:	79fb      	ldrb	r3, [r7, #7]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d09f      	beq.n	80049d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3740      	adds	r7, #64	; 0x40
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b095      	sub	sp, #84	; 0x54
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	330c      	adds	r3, #12
 8004aae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	330c      	adds	r3, #12
 8004ac6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ac8:	643a      	str	r2, [r7, #64]	; 0x40
 8004aca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ace:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ad0:	e841 2300 	strex	r3, r2, [r1]
 8004ad4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e5      	bne.n	8004aa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3314      	adds	r3, #20
 8004ae2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	e853 3f00 	ldrex	r3, [r3]
 8004aea:	61fb      	str	r3, [r7, #28]
   return(result);
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	f023 0301 	bic.w	r3, r3, #1
 8004af2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3314      	adds	r3, #20
 8004afa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004afc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004afe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b04:	e841 2300 	strex	r3, r2, [r1]
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e5      	bne.n	8004adc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d119      	bne.n	8004b4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	330c      	adds	r3, #12
 8004b1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f023 0310 	bic.w	r3, r3, #16
 8004b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	330c      	adds	r3, #12
 8004b36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b38:	61ba      	str	r2, [r7, #24]
 8004b3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	6979      	ldr	r1, [r7, #20]
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	e841 2300 	strex	r3, r2, [r1]
 8004b44:	613b      	str	r3, [r7, #16]
   return(result);
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e5      	bne.n	8004b18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b5a:	bf00      	nop
 8004b5c:	3754      	adds	r7, #84	; 0x54
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f7ff ff09 	bl	8004998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b86:	bf00      	nop
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b085      	sub	sp, #20
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b21      	cmp	r3, #33	; 0x21
 8004ba0:	d13e      	bne.n	8004c20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004baa:	d114      	bne.n	8004bd6 <UART_Transmit_IT+0x48>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d110      	bne.n	8004bd6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	1c9a      	adds	r2, r3, #2
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	621a      	str	r2, [r3, #32]
 8004bd4:	e008      	b.n	8004be8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	1c59      	adds	r1, r3, #1
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6211      	str	r1, [r2, #32]
 8004be0:	781a      	ldrb	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10f      	bne.n	8004c1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e000      	b.n	8004c22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c20:	2302      	movs	r3, #2
  }
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b082      	sub	sp, #8
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68da      	ldr	r2, [r3, #12]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7ff fe8e 	bl	8004970 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b08c      	sub	sp, #48	; 0x30
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b22      	cmp	r3, #34	; 0x22
 8004c70:	f040 80ab 	bne.w	8004dca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7c:	d117      	bne.n	8004cae <UART_Receive_IT+0x50>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d113      	bne.n	8004cae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca6:	1c9a      	adds	r2, r3, #2
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	629a      	str	r2, [r3, #40]	; 0x28
 8004cac:	e026      	b.n	8004cfc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cc0:	d007      	beq.n	8004cd2 <UART_Receive_IT+0x74>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10a      	bne.n	8004ce0 <UART_Receive_IT+0x82>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d106      	bne.n	8004ce0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cdc:	701a      	strb	r2, [r3, #0]
 8004cde:	e008      	b.n	8004cf2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	4619      	mov	r1, r3
 8004d0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d15a      	bne.n	8004dc6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0220 	bic.w	r2, r2, #32
 8004d1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695a      	ldr	r2, [r3, #20]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0201 	bic.w	r2, r2, #1
 8004d3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d135      	bne.n	8004dbc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	330c      	adds	r3, #12
 8004d5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	e853 3f00 	ldrex	r3, [r3]
 8004d64:	613b      	str	r3, [r7, #16]
   return(result);
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f023 0310 	bic.w	r3, r3, #16
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	330c      	adds	r3, #12
 8004d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d76:	623a      	str	r2, [r7, #32]
 8004d78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7a:	69f9      	ldr	r1, [r7, #28]
 8004d7c:	6a3a      	ldr	r2, [r7, #32]
 8004d7e:	e841 2300 	strex	r3, r2, [r1]
 8004d82:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1e5      	bne.n	8004d56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0310 	and.w	r3, r3, #16
 8004d94:	2b10      	cmp	r3, #16
 8004d96:	d10a      	bne.n	8004dae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004db2:	4619      	mov	r1, r3
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff fdf9 	bl	80049ac <HAL_UARTEx_RxEventCallback>
 8004dba:	e002      	b.n	8004dc2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff fde1 	bl	8004984 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	e002      	b.n	8004dcc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	e000      	b.n	8004dcc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004dca:	2302      	movs	r3, #2
  }
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3730      	adds	r7, #48	; 0x30
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dd8:	b0c0      	sub	sp, #256	; 0x100
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df0:	68d9      	ldr	r1, [r3, #12]
 8004df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	ea40 0301 	orr.w	r3, r0, r1
 8004dfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	431a      	orrs	r2, r3
 8004e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e2c:	f021 010c 	bic.w	r1, r1, #12
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e3a:	430b      	orrs	r3, r1
 8004e3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4e:	6999      	ldr	r1, [r3, #24]
 8004e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	ea40 0301 	orr.w	r3, r0, r1
 8004e5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	4b8f      	ldr	r3, [pc, #572]	; (80050a0 <UART_SetConfig+0x2cc>)
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d005      	beq.n	8004e74 <UART_SetConfig+0xa0>
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	4b8d      	ldr	r3, [pc, #564]	; (80050a4 <UART_SetConfig+0x2d0>)
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d104      	bne.n	8004e7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e74:	f7fe fa4c 	bl	8003310 <HAL_RCC_GetPCLK2Freq>
 8004e78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e7c:	e003      	b.n	8004e86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e7e:	f7fe fa33 	bl	80032e8 <HAL_RCC_GetPCLK1Freq>
 8004e82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e90:	f040 810c 	bne.w	80050ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ea2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ea6:	4622      	mov	r2, r4
 8004ea8:	462b      	mov	r3, r5
 8004eaa:	1891      	adds	r1, r2, r2
 8004eac:	65b9      	str	r1, [r7, #88]	; 0x58
 8004eae:	415b      	adcs	r3, r3
 8004eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004eb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	eb12 0801 	adds.w	r8, r2, r1
 8004ebc:	4629      	mov	r1, r5
 8004ebe:	eb43 0901 	adc.w	r9, r3, r1
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	f04f 0300 	mov.w	r3, #0
 8004eca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ece:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ed2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ed6:	4690      	mov	r8, r2
 8004ed8:	4699      	mov	r9, r3
 8004eda:	4623      	mov	r3, r4
 8004edc:	eb18 0303 	adds.w	r3, r8, r3
 8004ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ee4:	462b      	mov	r3, r5
 8004ee6:	eb49 0303 	adc.w	r3, r9, r3
 8004eea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004efa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004efe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f02:	460b      	mov	r3, r1
 8004f04:	18db      	adds	r3, r3, r3
 8004f06:	653b      	str	r3, [r7, #80]	; 0x50
 8004f08:	4613      	mov	r3, r2
 8004f0a:	eb42 0303 	adc.w	r3, r2, r3
 8004f0e:	657b      	str	r3, [r7, #84]	; 0x54
 8004f10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f18:	f7fb f97a 	bl	8000210 <__aeabi_uldivmod>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4b61      	ldr	r3, [pc, #388]	; (80050a8 <UART_SetConfig+0x2d4>)
 8004f22:	fba3 2302 	umull	r2, r3, r3, r2
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	011c      	lsls	r4, r3, #4
 8004f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f3c:	4642      	mov	r2, r8
 8004f3e:	464b      	mov	r3, r9
 8004f40:	1891      	adds	r1, r2, r2
 8004f42:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f44:	415b      	adcs	r3, r3
 8004f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f4c:	4641      	mov	r1, r8
 8004f4e:	eb12 0a01 	adds.w	sl, r2, r1
 8004f52:	4649      	mov	r1, r9
 8004f54:	eb43 0b01 	adc.w	fp, r3, r1
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	f04f 0300 	mov.w	r3, #0
 8004f60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f6c:	4692      	mov	sl, r2
 8004f6e:	469b      	mov	fp, r3
 8004f70:	4643      	mov	r3, r8
 8004f72:	eb1a 0303 	adds.w	r3, sl, r3
 8004f76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f7a:	464b      	mov	r3, r9
 8004f7c:	eb4b 0303 	adc.w	r3, fp, r3
 8004f80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	18db      	adds	r3, r3, r3
 8004f9c:	643b      	str	r3, [r7, #64]	; 0x40
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	eb42 0303 	adc.w	r3, r2, r3
 8004fa4:	647b      	str	r3, [r7, #68]	; 0x44
 8004fa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004faa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004fae:	f7fb f92f 	bl	8000210 <__aeabi_uldivmod>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4611      	mov	r1, r2
 8004fb8:	4b3b      	ldr	r3, [pc, #236]	; (80050a8 <UART_SetConfig+0x2d4>)
 8004fba:	fba3 2301 	umull	r2, r3, r3, r1
 8004fbe:	095b      	lsrs	r3, r3, #5
 8004fc0:	2264      	movs	r2, #100	; 0x64
 8004fc2:	fb02 f303 	mul.w	r3, r2, r3
 8004fc6:	1acb      	subs	r3, r1, r3
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004fce:	4b36      	ldr	r3, [pc, #216]	; (80050a8 <UART_SetConfig+0x2d4>)
 8004fd0:	fba3 2302 	umull	r2, r3, r3, r2
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fdc:	441c      	add	r4, r3
 8004fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fe8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004fec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ff0:	4642      	mov	r2, r8
 8004ff2:	464b      	mov	r3, r9
 8004ff4:	1891      	adds	r1, r2, r2
 8004ff6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ff8:	415b      	adcs	r3, r3
 8004ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ffc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005000:	4641      	mov	r1, r8
 8005002:	1851      	adds	r1, r2, r1
 8005004:	6339      	str	r1, [r7, #48]	; 0x30
 8005006:	4649      	mov	r1, r9
 8005008:	414b      	adcs	r3, r1
 800500a:	637b      	str	r3, [r7, #52]	; 0x34
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	f04f 0300 	mov.w	r3, #0
 8005014:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005018:	4659      	mov	r1, fp
 800501a:	00cb      	lsls	r3, r1, #3
 800501c:	4651      	mov	r1, sl
 800501e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005022:	4651      	mov	r1, sl
 8005024:	00ca      	lsls	r2, r1, #3
 8005026:	4610      	mov	r0, r2
 8005028:	4619      	mov	r1, r3
 800502a:	4603      	mov	r3, r0
 800502c:	4642      	mov	r2, r8
 800502e:	189b      	adds	r3, r3, r2
 8005030:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005034:	464b      	mov	r3, r9
 8005036:	460a      	mov	r2, r1
 8005038:	eb42 0303 	adc.w	r3, r2, r3
 800503c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800504c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005050:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005054:	460b      	mov	r3, r1
 8005056:	18db      	adds	r3, r3, r3
 8005058:	62bb      	str	r3, [r7, #40]	; 0x28
 800505a:	4613      	mov	r3, r2
 800505c:	eb42 0303 	adc.w	r3, r2, r3
 8005060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005062:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005066:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800506a:	f7fb f8d1 	bl	8000210 <__aeabi_uldivmod>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	4b0d      	ldr	r3, [pc, #52]	; (80050a8 <UART_SetConfig+0x2d4>)
 8005074:	fba3 1302 	umull	r1, r3, r3, r2
 8005078:	095b      	lsrs	r3, r3, #5
 800507a:	2164      	movs	r1, #100	; 0x64
 800507c:	fb01 f303 	mul.w	r3, r1, r3
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	3332      	adds	r3, #50	; 0x32
 8005086:	4a08      	ldr	r2, [pc, #32]	; (80050a8 <UART_SetConfig+0x2d4>)
 8005088:	fba2 2303 	umull	r2, r3, r2, r3
 800508c:	095b      	lsrs	r3, r3, #5
 800508e:	f003 0207 	and.w	r2, r3, #7
 8005092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4422      	add	r2, r4
 800509a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800509c:	e106      	b.n	80052ac <UART_SetConfig+0x4d8>
 800509e:	bf00      	nop
 80050a0:	40011000 	.word	0x40011000
 80050a4:	40011400 	.word	0x40011400
 80050a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050b0:	2200      	movs	r2, #0
 80050b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80050ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80050be:	4642      	mov	r2, r8
 80050c0:	464b      	mov	r3, r9
 80050c2:	1891      	adds	r1, r2, r2
 80050c4:	6239      	str	r1, [r7, #32]
 80050c6:	415b      	adcs	r3, r3
 80050c8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050ce:	4641      	mov	r1, r8
 80050d0:	1854      	adds	r4, r2, r1
 80050d2:	4649      	mov	r1, r9
 80050d4:	eb43 0501 	adc.w	r5, r3, r1
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	00eb      	lsls	r3, r5, #3
 80050e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050e6:	00e2      	lsls	r2, r4, #3
 80050e8:	4614      	mov	r4, r2
 80050ea:	461d      	mov	r5, r3
 80050ec:	4643      	mov	r3, r8
 80050ee:	18e3      	adds	r3, r4, r3
 80050f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050f4:	464b      	mov	r3, r9
 80050f6:	eb45 0303 	adc.w	r3, r5, r3
 80050fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800510a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800510e:	f04f 0200 	mov.w	r2, #0
 8005112:	f04f 0300 	mov.w	r3, #0
 8005116:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800511a:	4629      	mov	r1, r5
 800511c:	008b      	lsls	r3, r1, #2
 800511e:	4621      	mov	r1, r4
 8005120:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005124:	4621      	mov	r1, r4
 8005126:	008a      	lsls	r2, r1, #2
 8005128:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800512c:	f7fb f870 	bl	8000210 <__aeabi_uldivmod>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	4b60      	ldr	r3, [pc, #384]	; (80052b8 <UART_SetConfig+0x4e4>)
 8005136:	fba3 2302 	umull	r2, r3, r3, r2
 800513a:	095b      	lsrs	r3, r3, #5
 800513c:	011c      	lsls	r4, r3, #4
 800513e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005142:	2200      	movs	r2, #0
 8005144:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005148:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800514c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005150:	4642      	mov	r2, r8
 8005152:	464b      	mov	r3, r9
 8005154:	1891      	adds	r1, r2, r2
 8005156:	61b9      	str	r1, [r7, #24]
 8005158:	415b      	adcs	r3, r3
 800515a:	61fb      	str	r3, [r7, #28]
 800515c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005160:	4641      	mov	r1, r8
 8005162:	1851      	adds	r1, r2, r1
 8005164:	6139      	str	r1, [r7, #16]
 8005166:	4649      	mov	r1, r9
 8005168:	414b      	adcs	r3, r1
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	f04f 0200 	mov.w	r2, #0
 8005170:	f04f 0300 	mov.w	r3, #0
 8005174:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005178:	4659      	mov	r1, fp
 800517a:	00cb      	lsls	r3, r1, #3
 800517c:	4651      	mov	r1, sl
 800517e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005182:	4651      	mov	r1, sl
 8005184:	00ca      	lsls	r2, r1, #3
 8005186:	4610      	mov	r0, r2
 8005188:	4619      	mov	r1, r3
 800518a:	4603      	mov	r3, r0
 800518c:	4642      	mov	r2, r8
 800518e:	189b      	adds	r3, r3, r2
 8005190:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005194:	464b      	mov	r3, r9
 8005196:	460a      	mov	r2, r1
 8005198:	eb42 0303 	adc.w	r3, r2, r3
 800519c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80051aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80051b8:	4649      	mov	r1, r9
 80051ba:	008b      	lsls	r3, r1, #2
 80051bc:	4641      	mov	r1, r8
 80051be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051c2:	4641      	mov	r1, r8
 80051c4:	008a      	lsls	r2, r1, #2
 80051c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80051ca:	f7fb f821 	bl	8000210 <__aeabi_uldivmod>
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4611      	mov	r1, r2
 80051d4:	4b38      	ldr	r3, [pc, #224]	; (80052b8 <UART_SetConfig+0x4e4>)
 80051d6:	fba3 2301 	umull	r2, r3, r3, r1
 80051da:	095b      	lsrs	r3, r3, #5
 80051dc:	2264      	movs	r2, #100	; 0x64
 80051de:	fb02 f303 	mul.w	r3, r2, r3
 80051e2:	1acb      	subs	r3, r1, r3
 80051e4:	011b      	lsls	r3, r3, #4
 80051e6:	3332      	adds	r3, #50	; 0x32
 80051e8:	4a33      	ldr	r2, [pc, #204]	; (80052b8 <UART_SetConfig+0x4e4>)
 80051ea:	fba2 2303 	umull	r2, r3, r2, r3
 80051ee:	095b      	lsrs	r3, r3, #5
 80051f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051f4:	441c      	add	r4, r3
 80051f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051fa:	2200      	movs	r2, #0
 80051fc:	673b      	str	r3, [r7, #112]	; 0x70
 80051fe:	677a      	str	r2, [r7, #116]	; 0x74
 8005200:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005204:	4642      	mov	r2, r8
 8005206:	464b      	mov	r3, r9
 8005208:	1891      	adds	r1, r2, r2
 800520a:	60b9      	str	r1, [r7, #8]
 800520c:	415b      	adcs	r3, r3
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005214:	4641      	mov	r1, r8
 8005216:	1851      	adds	r1, r2, r1
 8005218:	6039      	str	r1, [r7, #0]
 800521a:	4649      	mov	r1, r9
 800521c:	414b      	adcs	r3, r1
 800521e:	607b      	str	r3, [r7, #4]
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800522c:	4659      	mov	r1, fp
 800522e:	00cb      	lsls	r3, r1, #3
 8005230:	4651      	mov	r1, sl
 8005232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005236:	4651      	mov	r1, sl
 8005238:	00ca      	lsls	r2, r1, #3
 800523a:	4610      	mov	r0, r2
 800523c:	4619      	mov	r1, r3
 800523e:	4603      	mov	r3, r0
 8005240:	4642      	mov	r2, r8
 8005242:	189b      	adds	r3, r3, r2
 8005244:	66bb      	str	r3, [r7, #104]	; 0x68
 8005246:	464b      	mov	r3, r9
 8005248:	460a      	mov	r2, r1
 800524a:	eb42 0303 	adc.w	r3, r2, r3
 800524e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	663b      	str	r3, [r7, #96]	; 0x60
 800525a:	667a      	str	r2, [r7, #100]	; 0x64
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	f04f 0300 	mov.w	r3, #0
 8005264:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005268:	4649      	mov	r1, r9
 800526a:	008b      	lsls	r3, r1, #2
 800526c:	4641      	mov	r1, r8
 800526e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005272:	4641      	mov	r1, r8
 8005274:	008a      	lsls	r2, r1, #2
 8005276:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800527a:	f7fa ffc9 	bl	8000210 <__aeabi_uldivmod>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	4b0d      	ldr	r3, [pc, #52]	; (80052b8 <UART_SetConfig+0x4e4>)
 8005284:	fba3 1302 	umull	r1, r3, r3, r2
 8005288:	095b      	lsrs	r3, r3, #5
 800528a:	2164      	movs	r1, #100	; 0x64
 800528c:	fb01 f303 	mul.w	r3, r1, r3
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	3332      	adds	r3, #50	; 0x32
 8005296:	4a08      	ldr	r2, [pc, #32]	; (80052b8 <UART_SetConfig+0x4e4>)
 8005298:	fba2 2303 	umull	r2, r3, r2, r3
 800529c:	095b      	lsrs	r3, r3, #5
 800529e:	f003 020f 	and.w	r2, r3, #15
 80052a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4422      	add	r2, r4
 80052aa:	609a      	str	r2, [r3, #8]
}
 80052ac:	bf00      	nop
 80052ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80052b2:	46bd      	mov	sp, r7
 80052b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052b8:	51eb851f 	.word	0x51eb851f

080052bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	4603      	mov	r3, r0
 80052c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80052c6:	2300      	movs	r3, #0
 80052c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80052ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052ce:	2b84      	cmp	r3, #132	; 0x84
 80052d0:	d005      	beq.n	80052de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80052d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4413      	add	r3, r2
 80052da:	3303      	adds	r3, #3
 80052dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80052de:	68fb      	ldr	r3, [r7, #12]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80052f0:	f000 faf6 	bl	80058e0 <vTaskStartScheduler>
  
  return osOK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	bd80      	pop	{r7, pc}

080052fa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80052fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052fc:	b089      	sub	sp, #36	; 0x24
 80052fe:	af04      	add	r7, sp, #16
 8005300:	6078      	str	r0, [r7, #4]
 8005302:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d020      	beq.n	800534e <osThreadCreate+0x54>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01c      	beq.n	800534e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685c      	ldr	r4, [r3, #4]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691e      	ldr	r6, [r3, #16]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff ffc8 	bl	80052bc <makeFreeRtosPriority>
 800532c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005336:	9202      	str	r2, [sp, #8]
 8005338:	9301      	str	r3, [sp, #4]
 800533a:	9100      	str	r1, [sp, #0]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	4632      	mov	r2, r6
 8005340:	4629      	mov	r1, r5
 8005342:	4620      	mov	r0, r4
 8005344:	f000 f8ed 	bl	8005522 <xTaskCreateStatic>
 8005348:	4603      	mov	r3, r0
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	e01c      	b.n	8005388 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685c      	ldr	r4, [r3, #4]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800535a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff ffaa 	bl	80052bc <makeFreeRtosPriority>
 8005368:	4602      	mov	r2, r0
 800536a:	f107 030c 	add.w	r3, r7, #12
 800536e:	9301      	str	r3, [sp, #4]
 8005370:	9200      	str	r2, [sp, #0]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	4632      	mov	r2, r6
 8005376:	4629      	mov	r1, r5
 8005378:	4620      	mov	r0, r4
 800537a:	f000 f92f 	bl	80055dc <xTaskCreate>
 800537e:	4603      	mov	r3, r0
 8005380:	2b01      	cmp	r3, #1
 8005382:	d001      	beq.n	8005388 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005384:	2300      	movs	r3, #0
 8005386:	e000      	b.n	800538a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005388:	68fb      	ldr	r3, [r7, #12]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005392 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b084      	sub	sp, #16
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <osDelay+0x16>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	e000      	b.n	80053aa <osDelay+0x18>
 80053a8:	2301      	movs	r3, #1
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fa64 	bl	8005878 <vTaskDelay>
  
  return osOK;
 80053b0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f103 0208 	add.w	r2, r3, #8
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f04f 32ff 	mov.w	r2, #4294967295
 80053d2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f103 0208 	add.w	r2, r3, #8
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f103 0208 	add.w	r2, r3, #8
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	601a      	str	r2, [r3, #0]
}
 8005450:	bf00      	nop
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005472:	d103      	bne.n	800547c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	e00c      	b.n	8005496 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3308      	adds	r3, #8
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	e002      	b.n	800548a <vListInsert+0x2e>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	429a      	cmp	r2, r3
 8005494:	d2f6      	bcs.n	8005484 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	601a      	str	r2, [r3, #0]
}
 80054c2:	bf00      	nop
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054ce:	b480      	push	{r7}
 80054d0:	b085      	sub	sp, #20
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6892      	ldr	r2, [r2, #8]
 80054e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6852      	ldr	r2, [r2, #4]
 80054ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d103      	bne.n	8005502 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	1e5a      	subs	r2, r3, #1
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005522:	b580      	push	{r7, lr}
 8005524:	b08e      	sub	sp, #56	; 0x38
 8005526:	af04      	add	r7, sp, #16
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	607a      	str	r2, [r7, #4]
 800552e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10a      	bne.n	800554c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005548:	bf00      	nop
 800554a:	e7fe      	b.n	800554a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800554c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10a      	bne.n	8005568 <xTaskCreateStatic+0x46>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	61fb      	str	r3, [r7, #28]
}
 8005564:	bf00      	nop
 8005566:	e7fe      	b.n	8005566 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005568:	23a0      	movs	r3, #160	; 0xa0
 800556a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	2ba0      	cmp	r3, #160	; 0xa0
 8005570:	d00a      	beq.n	8005588 <xTaskCreateStatic+0x66>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	61bb      	str	r3, [r7, #24]
}
 8005584:	bf00      	nop
 8005586:	e7fe      	b.n	8005586 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005588:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800558a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558c:	2b00      	cmp	r3, #0
 800558e:	d01e      	beq.n	80055ce <xTaskCreateStatic+0xac>
 8005590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005592:	2b00      	cmp	r3, #0
 8005594:	d01b      	beq.n	80055ce <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005598:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800559e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80055a8:	2300      	movs	r3, #0
 80055aa:	9303      	str	r3, [sp, #12]
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	9302      	str	r3, [sp, #8]
 80055b0:	f107 0314 	add.w	r3, r7, #20
 80055b4:	9301      	str	r3, [sp, #4]
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	68b9      	ldr	r1, [r7, #8]
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 f851 	bl	8005668 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055c8:	f000 f8ec 	bl	80057a4 <prvAddNewTaskToReadyList>
 80055cc:	e001      	b.n	80055d2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80055ce:	2300      	movs	r3, #0
 80055d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80055d2:	697b      	ldr	r3, [r7, #20]
	}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3728      	adds	r7, #40	; 0x28
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b08c      	sub	sp, #48	; 0x30
 80055e0:	af04      	add	r7, sp, #16
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	603b      	str	r3, [r7, #0]
 80055e8:	4613      	mov	r3, r2
 80055ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80055ec:	88fb      	ldrh	r3, [r7, #6]
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 fef1 	bl	80063d8 <pvPortMalloc>
 80055f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00e      	beq.n	800561c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80055fe:	20a0      	movs	r0, #160	; 0xa0
 8005600:	f000 feea 	bl	80063d8 <pvPortMalloc>
 8005604:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	631a      	str	r2, [r3, #48]	; 0x30
 8005612:	e005      	b.n	8005620 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005614:	6978      	ldr	r0, [r7, #20]
 8005616:	f000 ffab 	bl	8006570 <vPortFree>
 800561a:	e001      	b.n	8005620 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800561c:	2300      	movs	r3, #0
 800561e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d017      	beq.n	8005656 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800562e:	88fa      	ldrh	r2, [r7, #6]
 8005630:	2300      	movs	r3, #0
 8005632:	9303      	str	r3, [sp, #12]
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	9302      	str	r3, [sp, #8]
 8005638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563a:	9301      	str	r3, [sp, #4]
 800563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	68b9      	ldr	r1, [r7, #8]
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f80f 	bl	8005668 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800564a:	69f8      	ldr	r0, [r7, #28]
 800564c:	f000 f8aa 	bl	80057a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005650:	2301      	movs	r3, #1
 8005652:	61bb      	str	r3, [r7, #24]
 8005654:	e002      	b.n	800565c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005656:	f04f 33ff 	mov.w	r3, #4294967295
 800565a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800565c:	69bb      	ldr	r3, [r7, #24]
	}
 800565e:	4618      	mov	r0, r3
 8005660:	3720      	adds	r7, #32
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
	...

08005668 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005680:	3b01      	subs	r3, #1
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	f023 0307 	bic.w	r3, r3, #7
 800568e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800569a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	617b      	str	r3, [r7, #20]
}
 80056ac:	bf00      	nop
 80056ae:	e7fe      	b.n	80056ae <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d01f      	beq.n	80056f6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056b6:	2300      	movs	r3, #0
 80056b8:	61fb      	str	r3, [r7, #28]
 80056ba:	e012      	b.n	80056e2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	4413      	add	r3, r2
 80056c2:	7819      	ldrb	r1, [r3, #0]
 80056c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	4413      	add	r3, r2
 80056ca:	3334      	adds	r3, #52	; 0x34
 80056cc:	460a      	mov	r2, r1
 80056ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	4413      	add	r3, r2
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d006      	beq.n	80056ea <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	3301      	adds	r3, #1
 80056e0:	61fb      	str	r3, [r7, #28]
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	2b0f      	cmp	r3, #15
 80056e6:	d9e9      	bls.n	80056bc <prvInitialiseNewTask+0x54>
 80056e8:	e000      	b.n	80056ec <prvInitialiseNewTask+0x84>
			{
				break;
 80056ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056f4:	e003      	b.n	80056fe <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80056f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005700:	2b06      	cmp	r3, #6
 8005702:	d901      	bls.n	8005708 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005704:	2306      	movs	r3, #6
 8005706:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800570c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005712:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	2200      	movs	r2, #0
 8005718:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	3304      	adds	r3, #4
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff fe6b 	bl	80053fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005726:	3318      	adds	r3, #24
 8005728:	4618      	mov	r0, r3
 800572a:	f7ff fe66 	bl	80053fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005732:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005736:	f1c3 0207 	rsb	r2, r3, #7
 800573a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005742:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	2200      	movs	r2, #0
 8005748:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	2200      	movs	r2, #0
 8005750:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005756:	334c      	adds	r3, #76	; 0x4c
 8005758:	224c      	movs	r2, #76	; 0x4c
 800575a:	2100      	movs	r1, #0
 800575c:	4618      	mov	r0, r3
 800575e:	f001 f825 	bl	80067ac <memset>
 8005762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005764:	4a0c      	ldr	r2, [pc, #48]	; (8005798 <prvInitialiseNewTask+0x130>)
 8005766:	651a      	str	r2, [r3, #80]	; 0x50
 8005768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576a:	4a0c      	ldr	r2, [pc, #48]	; (800579c <prvInitialiseNewTask+0x134>)
 800576c:	655a      	str	r2, [r3, #84]	; 0x54
 800576e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005770:	4a0b      	ldr	r2, [pc, #44]	; (80057a0 <prvInitialiseNewTask+0x138>)
 8005772:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	68f9      	ldr	r1, [r7, #12]
 8005778:	69b8      	ldr	r0, [r7, #24]
 800577a:	f000 fc1f 	bl	8005fbc <pxPortInitialiseStack>
 800577e:	4602      	mov	r2, r0
 8005780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005782:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800578a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800578e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005790:	bf00      	nop
 8005792:	3720      	adds	r7, #32
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	200081dc 	.word	0x200081dc
 800579c:	20008244 	.word	0x20008244
 80057a0:	200082ac 	.word	0x200082ac

080057a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80057ac:	f000 fd32 	bl	8006214 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80057b0:	4b2a      	ldr	r3, [pc, #168]	; (800585c <prvAddNewTaskToReadyList+0xb8>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3301      	adds	r3, #1
 80057b6:	4a29      	ldr	r2, [pc, #164]	; (800585c <prvAddNewTaskToReadyList+0xb8>)
 80057b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80057ba:	4b29      	ldr	r3, [pc, #164]	; (8005860 <prvAddNewTaskToReadyList+0xbc>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d109      	bne.n	80057d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80057c2:	4a27      	ldr	r2, [pc, #156]	; (8005860 <prvAddNewTaskToReadyList+0xbc>)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80057c8:	4b24      	ldr	r3, [pc, #144]	; (800585c <prvAddNewTaskToReadyList+0xb8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d110      	bne.n	80057f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80057d0:	f000 facc 	bl	8005d6c <prvInitialiseTaskLists>
 80057d4:	e00d      	b.n	80057f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80057d6:	4b23      	ldr	r3, [pc, #140]	; (8005864 <prvAddNewTaskToReadyList+0xc0>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d109      	bne.n	80057f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057de:	4b20      	ldr	r3, [pc, #128]	; (8005860 <prvAddNewTaskToReadyList+0xbc>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d802      	bhi.n	80057f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80057ec:	4a1c      	ldr	r2, [pc, #112]	; (8005860 <prvAddNewTaskToReadyList+0xbc>)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80057f2:	4b1d      	ldr	r3, [pc, #116]	; (8005868 <prvAddNewTaskToReadyList+0xc4>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3301      	adds	r3, #1
 80057f8:	4a1b      	ldr	r2, [pc, #108]	; (8005868 <prvAddNewTaskToReadyList+0xc4>)
 80057fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005800:	2201      	movs	r2, #1
 8005802:	409a      	lsls	r2, r3
 8005804:	4b19      	ldr	r3, [pc, #100]	; (800586c <prvAddNewTaskToReadyList+0xc8>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4313      	orrs	r3, r2
 800580a:	4a18      	ldr	r2, [pc, #96]	; (800586c <prvAddNewTaskToReadyList+0xc8>)
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4a15      	ldr	r2, [pc, #84]	; (8005870 <prvAddNewTaskToReadyList+0xcc>)
 800581c:	441a      	add	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	3304      	adds	r3, #4
 8005822:	4619      	mov	r1, r3
 8005824:	4610      	mov	r0, r2
 8005826:	f7ff fdf5 	bl	8005414 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800582a:	f000 fd23 	bl	8006274 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800582e:	4b0d      	ldr	r3, [pc, #52]	; (8005864 <prvAddNewTaskToReadyList+0xc0>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00e      	beq.n	8005854 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005836:	4b0a      	ldr	r3, [pc, #40]	; (8005860 <prvAddNewTaskToReadyList+0xbc>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	429a      	cmp	r2, r3
 8005842:	d207      	bcs.n	8005854 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005844:	4b0b      	ldr	r3, [pc, #44]	; (8005874 <prvAddNewTaskToReadyList+0xd0>)
 8005846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005854:	bf00      	nop
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	20004588 	.word	0x20004588
 8005860:	20004488 	.word	0x20004488
 8005864:	20004594 	.word	0x20004594
 8005868:	200045a4 	.word	0x200045a4
 800586c:	20004590 	.word	0x20004590
 8005870:	2000448c 	.word	0x2000448c
 8005874:	e000ed04 	.word	0xe000ed04

08005878 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005880:	2300      	movs	r3, #0
 8005882:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d017      	beq.n	80058ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800588a:	4b13      	ldr	r3, [pc, #76]	; (80058d8 <vTaskDelay+0x60>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00a      	beq.n	80058a8 <vTaskDelay+0x30>
	__asm volatile
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	60bb      	str	r3, [r7, #8]
}
 80058a4:	bf00      	nop
 80058a6:	e7fe      	b.n	80058a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80058a8:	f000 f884 	bl	80059b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80058ac:	2100      	movs	r1, #0
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fb1e 	bl	8005ef0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80058b4:	f000 f88c 	bl	80059d0 <xTaskResumeAll>
 80058b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d107      	bne.n	80058d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80058c0:	4b06      	ldr	r3, [pc, #24]	; (80058dc <vTaskDelay+0x64>)
 80058c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058d0:	bf00      	nop
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	200045b0 	.word	0x200045b0
 80058dc:	e000ed04 	.word	0xe000ed04

080058e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08a      	sub	sp, #40	; 0x28
 80058e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80058ea:	2300      	movs	r3, #0
 80058ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80058ee:	463a      	mov	r2, r7
 80058f0:	1d39      	adds	r1, r7, #4
 80058f2:	f107 0308 	add.w	r3, r7, #8
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7fa feb4 	bl	8000664 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058fc:	6839      	ldr	r1, [r7, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	9202      	str	r2, [sp, #8]
 8005904:	9301      	str	r3, [sp, #4]
 8005906:	2300      	movs	r3, #0
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	2300      	movs	r3, #0
 800590c:	460a      	mov	r2, r1
 800590e:	4921      	ldr	r1, [pc, #132]	; (8005994 <vTaskStartScheduler+0xb4>)
 8005910:	4821      	ldr	r0, [pc, #132]	; (8005998 <vTaskStartScheduler+0xb8>)
 8005912:	f7ff fe06 	bl	8005522 <xTaskCreateStatic>
 8005916:	4603      	mov	r3, r0
 8005918:	4a20      	ldr	r2, [pc, #128]	; (800599c <vTaskStartScheduler+0xbc>)
 800591a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800591c:	4b1f      	ldr	r3, [pc, #124]	; (800599c <vTaskStartScheduler+0xbc>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005924:	2301      	movs	r3, #1
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	e001      	b.n	800592e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800592a:	2300      	movs	r3, #0
 800592c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d11b      	bne.n	800596c <vTaskStartScheduler+0x8c>
	__asm volatile
 8005934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	613b      	str	r3, [r7, #16]
}
 8005946:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005948:	4b15      	ldr	r3, [pc, #84]	; (80059a0 <vTaskStartScheduler+0xc0>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	334c      	adds	r3, #76	; 0x4c
 800594e:	4a15      	ldr	r2, [pc, #84]	; (80059a4 <vTaskStartScheduler+0xc4>)
 8005950:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005952:	4b15      	ldr	r3, [pc, #84]	; (80059a8 <vTaskStartScheduler+0xc8>)
 8005954:	f04f 32ff 	mov.w	r2, #4294967295
 8005958:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800595a:	4b14      	ldr	r3, [pc, #80]	; (80059ac <vTaskStartScheduler+0xcc>)
 800595c:	2201      	movs	r2, #1
 800595e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005960:	4b13      	ldr	r3, [pc, #76]	; (80059b0 <vTaskStartScheduler+0xd0>)
 8005962:	2200      	movs	r2, #0
 8005964:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005966:	f000 fbb3 	bl	80060d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800596a:	e00e      	b.n	800598a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005972:	d10a      	bne.n	800598a <vTaskStartScheduler+0xaa>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	60fb      	str	r3, [r7, #12]
}
 8005986:	bf00      	nop
 8005988:	e7fe      	b.n	8005988 <vTaskStartScheduler+0xa8>
}
 800598a:	bf00      	nop
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	08006b00 	.word	0x08006b00
 8005998:	08005d3d 	.word	0x08005d3d
 800599c:	200045ac 	.word	0x200045ac
 80059a0:	20004488 	.word	0x20004488
 80059a4:	20000064 	.word	0x20000064
 80059a8:	200045a8 	.word	0x200045a8
 80059ac:	20004594 	.word	0x20004594
 80059b0:	2000458c 	.word	0x2000458c

080059b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80059b8:	4b04      	ldr	r3, [pc, #16]	; (80059cc <vTaskSuspendAll+0x18>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3301      	adds	r3, #1
 80059be:	4a03      	ldr	r2, [pc, #12]	; (80059cc <vTaskSuspendAll+0x18>)
 80059c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80059c2:	bf00      	nop
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	200045b0 	.word	0x200045b0

080059d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80059da:	2300      	movs	r3, #0
 80059dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80059de:	4b41      	ldr	r3, [pc, #260]	; (8005ae4 <xTaskResumeAll+0x114>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10a      	bne.n	80059fc <xTaskResumeAll+0x2c>
	__asm volatile
 80059e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ea:	f383 8811 	msr	BASEPRI, r3
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	603b      	str	r3, [r7, #0]
}
 80059f8:	bf00      	nop
 80059fa:	e7fe      	b.n	80059fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80059fc:	f000 fc0a 	bl	8006214 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a00:	4b38      	ldr	r3, [pc, #224]	; (8005ae4 <xTaskResumeAll+0x114>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	3b01      	subs	r3, #1
 8005a06:	4a37      	ldr	r2, [pc, #220]	; (8005ae4 <xTaskResumeAll+0x114>)
 8005a08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a0a:	4b36      	ldr	r3, [pc, #216]	; (8005ae4 <xTaskResumeAll+0x114>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d161      	bne.n	8005ad6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a12:	4b35      	ldr	r3, [pc, #212]	; (8005ae8 <xTaskResumeAll+0x118>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d05d      	beq.n	8005ad6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a1a:	e02e      	b.n	8005a7a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a1c:	4b33      	ldr	r3, [pc, #204]	; (8005aec <xTaskResumeAll+0x11c>)
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	3318      	adds	r3, #24
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff fd50 	bl	80054ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	3304      	adds	r3, #4
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff fd4b 	bl	80054ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	409a      	lsls	r2, r3
 8005a40:	4b2b      	ldr	r3, [pc, #172]	; (8005af0 <xTaskResumeAll+0x120>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	4a2a      	ldr	r2, [pc, #168]	; (8005af0 <xTaskResumeAll+0x120>)
 8005a48:	6013      	str	r3, [r2, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4e:	4613      	mov	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4a27      	ldr	r2, [pc, #156]	; (8005af4 <xTaskResumeAll+0x124>)
 8005a58:	441a      	add	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4610      	mov	r0, r2
 8005a62:	f7ff fcd7 	bl	8005414 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6a:	4b23      	ldr	r3, [pc, #140]	; (8005af8 <xTaskResumeAll+0x128>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d302      	bcc.n	8005a7a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005a74:	4b21      	ldr	r3, [pc, #132]	; (8005afc <xTaskResumeAll+0x12c>)
 8005a76:	2201      	movs	r2, #1
 8005a78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a7a:	4b1c      	ldr	r3, [pc, #112]	; (8005aec <xTaskResumeAll+0x11c>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1cc      	bne.n	8005a1c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a88:	f000 fa12 	bl	8005eb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a8c:	4b1c      	ldr	r3, [pc, #112]	; (8005b00 <xTaskResumeAll+0x130>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d010      	beq.n	8005aba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a98:	f000 f836 	bl	8005b08 <xTaskIncrementTick>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005aa2:	4b16      	ldr	r3, [pc, #88]	; (8005afc <xTaskResumeAll+0x12c>)
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1f1      	bne.n	8005a98 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005ab4:	4b12      	ldr	r3, [pc, #72]	; (8005b00 <xTaskResumeAll+0x130>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005aba:	4b10      	ldr	r3, [pc, #64]	; (8005afc <xTaskResumeAll+0x12c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d009      	beq.n	8005ad6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ac6:	4b0f      	ldr	r3, [pc, #60]	; (8005b04 <xTaskResumeAll+0x134>)
 8005ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ad6:	f000 fbcd 	bl	8006274 <vPortExitCritical>

	return xAlreadyYielded;
 8005ada:	68bb      	ldr	r3, [r7, #8]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	200045b0 	.word	0x200045b0
 8005ae8:	20004588 	.word	0x20004588
 8005aec:	20004548 	.word	0x20004548
 8005af0:	20004590 	.word	0x20004590
 8005af4:	2000448c 	.word	0x2000448c
 8005af8:	20004488 	.word	0x20004488
 8005afc:	2000459c 	.word	0x2000459c
 8005b00:	20004598 	.word	0x20004598
 8005b04:	e000ed04 	.word	0xe000ed04

08005b08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b12:	4b4e      	ldr	r3, [pc, #312]	; (8005c4c <xTaskIncrementTick+0x144>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f040 808e 	bne.w	8005c38 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b1c:	4b4c      	ldr	r3, [pc, #304]	; (8005c50 <xTaskIncrementTick+0x148>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3301      	adds	r3, #1
 8005b22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b24:	4a4a      	ldr	r2, [pc, #296]	; (8005c50 <xTaskIncrementTick+0x148>)
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d120      	bne.n	8005b72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b30:	4b48      	ldr	r3, [pc, #288]	; (8005c54 <xTaskIncrementTick+0x14c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00a      	beq.n	8005b50 <xTaskIncrementTick+0x48>
	__asm volatile
 8005b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3e:	f383 8811 	msr	BASEPRI, r3
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	603b      	str	r3, [r7, #0]
}
 8005b4c:	bf00      	nop
 8005b4e:	e7fe      	b.n	8005b4e <xTaskIncrementTick+0x46>
 8005b50:	4b40      	ldr	r3, [pc, #256]	; (8005c54 <xTaskIncrementTick+0x14c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	4b40      	ldr	r3, [pc, #256]	; (8005c58 <xTaskIncrementTick+0x150>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a3e      	ldr	r2, [pc, #248]	; (8005c54 <xTaskIncrementTick+0x14c>)
 8005b5c:	6013      	str	r3, [r2, #0]
 8005b5e:	4a3e      	ldr	r2, [pc, #248]	; (8005c58 <xTaskIncrementTick+0x150>)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6013      	str	r3, [r2, #0]
 8005b64:	4b3d      	ldr	r3, [pc, #244]	; (8005c5c <xTaskIncrementTick+0x154>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	4a3c      	ldr	r2, [pc, #240]	; (8005c5c <xTaskIncrementTick+0x154>)
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	f000 f99f 	bl	8005eb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b72:	4b3b      	ldr	r3, [pc, #236]	; (8005c60 <xTaskIncrementTick+0x158>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d348      	bcc.n	8005c0e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b7c:	4b35      	ldr	r3, [pc, #212]	; (8005c54 <xTaskIncrementTick+0x14c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d104      	bne.n	8005b90 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b86:	4b36      	ldr	r3, [pc, #216]	; (8005c60 <xTaskIncrementTick+0x158>)
 8005b88:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8c:	601a      	str	r2, [r3, #0]
					break;
 8005b8e:	e03e      	b.n	8005c0e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b90:	4b30      	ldr	r3, [pc, #192]	; (8005c54 <xTaskIncrementTick+0x14c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d203      	bcs.n	8005bb0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ba8:	4a2d      	ldr	r2, [pc, #180]	; (8005c60 <xTaskIncrementTick+0x158>)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005bae:	e02e      	b.n	8005c0e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7ff fc8a 	bl	80054ce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d004      	beq.n	8005bcc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	3318      	adds	r3, #24
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7ff fc81 	bl	80054ce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	409a      	lsls	r2, r3
 8005bd4:	4b23      	ldr	r3, [pc, #140]	; (8005c64 <xTaskIncrementTick+0x15c>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	4a22      	ldr	r2, [pc, #136]	; (8005c64 <xTaskIncrementTick+0x15c>)
 8005bdc:	6013      	str	r3, [r2, #0]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be2:	4613      	mov	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4a1f      	ldr	r2, [pc, #124]	; (8005c68 <xTaskIncrementTick+0x160>)
 8005bec:	441a      	add	r2, r3
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	4610      	mov	r0, r2
 8005bf6:	f7ff fc0d 	bl	8005414 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfe:	4b1b      	ldr	r3, [pc, #108]	; (8005c6c <xTaskIncrementTick+0x164>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d3b9      	bcc.n	8005b7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c0c:	e7b6      	b.n	8005b7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c0e:	4b17      	ldr	r3, [pc, #92]	; (8005c6c <xTaskIncrementTick+0x164>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c14:	4914      	ldr	r1, [pc, #80]	; (8005c68 <xTaskIncrementTick+0x160>)
 8005c16:	4613      	mov	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4413      	add	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	440b      	add	r3, r1
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d901      	bls.n	8005c2a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005c26:	2301      	movs	r3, #1
 8005c28:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005c2a:	4b11      	ldr	r3, [pc, #68]	; (8005c70 <xTaskIncrementTick+0x168>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d007      	beq.n	8005c42 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005c32:	2301      	movs	r3, #1
 8005c34:	617b      	str	r3, [r7, #20]
 8005c36:	e004      	b.n	8005c42 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005c38:	4b0e      	ldr	r3, [pc, #56]	; (8005c74 <xTaskIncrementTick+0x16c>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	4a0d      	ldr	r2, [pc, #52]	; (8005c74 <xTaskIncrementTick+0x16c>)
 8005c40:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005c42:	697b      	ldr	r3, [r7, #20]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	200045b0 	.word	0x200045b0
 8005c50:	2000458c 	.word	0x2000458c
 8005c54:	20004540 	.word	0x20004540
 8005c58:	20004544 	.word	0x20004544
 8005c5c:	200045a0 	.word	0x200045a0
 8005c60:	200045a8 	.word	0x200045a8
 8005c64:	20004590 	.word	0x20004590
 8005c68:	2000448c 	.word	0x2000448c
 8005c6c:	20004488 	.word	0x20004488
 8005c70:	2000459c 	.word	0x2000459c
 8005c74:	20004598 	.word	0x20004598

08005c78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c7e:	4b29      	ldr	r3, [pc, #164]	; (8005d24 <vTaskSwitchContext+0xac>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c86:	4b28      	ldr	r3, [pc, #160]	; (8005d28 <vTaskSwitchContext+0xb0>)
 8005c88:	2201      	movs	r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c8c:	e044      	b.n	8005d18 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005c8e:	4b26      	ldr	r3, [pc, #152]	; (8005d28 <vTaskSwitchContext+0xb0>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c94:	4b25      	ldr	r3, [pc, #148]	; (8005d2c <vTaskSwitchContext+0xb4>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	fab3 f383 	clz	r3, r3
 8005ca0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005ca2:	7afb      	ldrb	r3, [r7, #11]
 8005ca4:	f1c3 031f 	rsb	r3, r3, #31
 8005ca8:	617b      	str	r3, [r7, #20]
 8005caa:	4921      	ldr	r1, [pc, #132]	; (8005d30 <vTaskSwitchContext+0xb8>)
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	440b      	add	r3, r1
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10a      	bne.n	8005cd4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	607b      	str	r3, [r7, #4]
}
 8005cd0:	bf00      	nop
 8005cd2:	e7fe      	b.n	8005cd2 <vTaskSwitchContext+0x5a>
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4a14      	ldr	r2, [pc, #80]	; (8005d30 <vTaskSwitchContext+0xb8>)
 8005ce0:	4413      	add	r3, r2
 8005ce2:	613b      	str	r3, [r7, #16]
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	605a      	str	r2, [r3, #4]
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	3308      	adds	r3, #8
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d104      	bne.n	8005d04 <vTaskSwitchContext+0x8c>
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	605a      	str	r2, [r3, #4]
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	4a0a      	ldr	r2, [pc, #40]	; (8005d34 <vTaskSwitchContext+0xbc>)
 8005d0c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d0e:	4b09      	ldr	r3, [pc, #36]	; (8005d34 <vTaskSwitchContext+0xbc>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	334c      	adds	r3, #76	; 0x4c
 8005d14:	4a08      	ldr	r2, [pc, #32]	; (8005d38 <vTaskSwitchContext+0xc0>)
 8005d16:	6013      	str	r3, [r2, #0]
}
 8005d18:	bf00      	nop
 8005d1a:	371c      	adds	r7, #28
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	200045b0 	.word	0x200045b0
 8005d28:	2000459c 	.word	0x2000459c
 8005d2c:	20004590 	.word	0x20004590
 8005d30:	2000448c 	.word	0x2000448c
 8005d34:	20004488 	.word	0x20004488
 8005d38:	20000064 	.word	0x20000064

08005d3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d44:	f000 f852 	bl	8005dec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d48:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <prvIdleTask+0x28>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d9f9      	bls.n	8005d44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d50:	4b05      	ldr	r3, [pc, #20]	; (8005d68 <prvIdleTask+0x2c>)
 8005d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d60:	e7f0      	b.n	8005d44 <prvIdleTask+0x8>
 8005d62:	bf00      	nop
 8005d64:	2000448c 	.word	0x2000448c
 8005d68:	e000ed04 	.word	0xe000ed04

08005d6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d72:	2300      	movs	r3, #0
 8005d74:	607b      	str	r3, [r7, #4]
 8005d76:	e00c      	b.n	8005d92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4a12      	ldr	r2, [pc, #72]	; (8005dcc <prvInitialiseTaskLists+0x60>)
 8005d84:	4413      	add	r3, r2
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff fb17 	bl	80053ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	607b      	str	r3, [r7, #4]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b06      	cmp	r3, #6
 8005d96:	d9ef      	bls.n	8005d78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d98:	480d      	ldr	r0, [pc, #52]	; (8005dd0 <prvInitialiseTaskLists+0x64>)
 8005d9a:	f7ff fb0e 	bl	80053ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d9e:	480d      	ldr	r0, [pc, #52]	; (8005dd4 <prvInitialiseTaskLists+0x68>)
 8005da0:	f7ff fb0b 	bl	80053ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005da4:	480c      	ldr	r0, [pc, #48]	; (8005dd8 <prvInitialiseTaskLists+0x6c>)
 8005da6:	f7ff fb08 	bl	80053ba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005daa:	480c      	ldr	r0, [pc, #48]	; (8005ddc <prvInitialiseTaskLists+0x70>)
 8005dac:	f7ff fb05 	bl	80053ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005db0:	480b      	ldr	r0, [pc, #44]	; (8005de0 <prvInitialiseTaskLists+0x74>)
 8005db2:	f7ff fb02 	bl	80053ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005db6:	4b0b      	ldr	r3, [pc, #44]	; (8005de4 <prvInitialiseTaskLists+0x78>)
 8005db8:	4a05      	ldr	r2, [pc, #20]	; (8005dd0 <prvInitialiseTaskLists+0x64>)
 8005dba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dbc:	4b0a      	ldr	r3, [pc, #40]	; (8005de8 <prvInitialiseTaskLists+0x7c>)
 8005dbe:	4a05      	ldr	r2, [pc, #20]	; (8005dd4 <prvInitialiseTaskLists+0x68>)
 8005dc0:	601a      	str	r2, [r3, #0]
}
 8005dc2:	bf00      	nop
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	2000448c 	.word	0x2000448c
 8005dd0:	20004518 	.word	0x20004518
 8005dd4:	2000452c 	.word	0x2000452c
 8005dd8:	20004548 	.word	0x20004548
 8005ddc:	2000455c 	.word	0x2000455c
 8005de0:	20004574 	.word	0x20004574
 8005de4:	20004540 	.word	0x20004540
 8005de8:	20004544 	.word	0x20004544

08005dec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005df2:	e019      	b.n	8005e28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005df4:	f000 fa0e 	bl	8006214 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005df8:	4b10      	ldr	r3, [pc, #64]	; (8005e3c <prvCheckTasksWaitingTermination+0x50>)
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	3304      	adds	r3, #4
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7ff fb62 	bl	80054ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e0a:	4b0d      	ldr	r3, [pc, #52]	; (8005e40 <prvCheckTasksWaitingTermination+0x54>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	4a0b      	ldr	r2, [pc, #44]	; (8005e40 <prvCheckTasksWaitingTermination+0x54>)
 8005e12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e14:	4b0b      	ldr	r3, [pc, #44]	; (8005e44 <prvCheckTasksWaitingTermination+0x58>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	4a0a      	ldr	r2, [pc, #40]	; (8005e44 <prvCheckTasksWaitingTermination+0x58>)
 8005e1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e1e:	f000 fa29 	bl	8006274 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f810 	bl	8005e48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e28:	4b06      	ldr	r3, [pc, #24]	; (8005e44 <prvCheckTasksWaitingTermination+0x58>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1e1      	bne.n	8005df4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e30:	bf00      	nop
 8005e32:	bf00      	nop
 8005e34:	3708      	adds	r7, #8
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	2000455c 	.word	0x2000455c
 8005e40:	20004588 	.word	0x20004588
 8005e44:	20004570 	.word	0x20004570

08005e48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	334c      	adds	r3, #76	; 0x4c
 8005e54:	4618      	mov	r0, r3
 8005e56:	f000 fcb1 	bl	80067bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d108      	bne.n	8005e76 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f000 fb81 	bl	8006570 <vPortFree>
				vPortFree( pxTCB );
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fb7e 	bl	8006570 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e74:	e018      	b.n	8005ea8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d103      	bne.n	8005e88 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fb75 	bl	8006570 <vPortFree>
	}
 8005e86:	e00f      	b.n	8005ea8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d00a      	beq.n	8005ea8 <prvDeleteTCB+0x60>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	60fb      	str	r3, [r7, #12]
}
 8005ea4:	bf00      	nop
 8005ea6:	e7fe      	b.n	8005ea6 <prvDeleteTCB+0x5e>
	}
 8005ea8:	bf00      	nop
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eb6:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <prvResetNextTaskUnblockTime+0x38>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d104      	bne.n	8005eca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ec0:	4b0a      	ldr	r3, [pc, #40]	; (8005eec <prvResetNextTaskUnblockTime+0x3c>)
 8005ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ec8:	e008      	b.n	8005edc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eca:	4b07      	ldr	r3, [pc, #28]	; (8005ee8 <prvResetNextTaskUnblockTime+0x38>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	4a04      	ldr	r2, [pc, #16]	; (8005eec <prvResetNextTaskUnblockTime+0x3c>)
 8005eda:	6013      	str	r3, [r2, #0]
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	20004540 	.word	0x20004540
 8005eec:	200045a8 	.word	0x200045a8

08005ef0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005efa:	4b29      	ldr	r3, [pc, #164]	; (8005fa0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f00:	4b28      	ldr	r3, [pc, #160]	; (8005fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3304      	adds	r3, #4
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff fae1 	bl	80054ce <uxListRemove>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10b      	bne.n	8005f2a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005f12:	4b24      	ldr	r3, [pc, #144]	; (8005fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f18:	2201      	movs	r2, #1
 8005f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1e:	43da      	mvns	r2, r3
 8005f20:	4b21      	ldr	r3, [pc, #132]	; (8005fa8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4013      	ands	r3, r2
 8005f26:	4a20      	ldr	r2, [pc, #128]	; (8005fa8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f28:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f30:	d10a      	bne.n	8005f48 <prvAddCurrentTaskToDelayedList+0x58>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d007      	beq.n	8005f48 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f38:	4b1a      	ldr	r3, [pc, #104]	; (8005fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	4619      	mov	r1, r3
 8005f40:	481a      	ldr	r0, [pc, #104]	; (8005fac <prvAddCurrentTaskToDelayedList+0xbc>)
 8005f42:	f7ff fa67 	bl	8005414 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f46:	e026      	b.n	8005f96 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f50:	4b14      	ldr	r3, [pc, #80]	; (8005fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d209      	bcs.n	8005f74 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f60:	4b13      	ldr	r3, [pc, #76]	; (8005fb0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	4b0f      	ldr	r3, [pc, #60]	; (8005fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3304      	adds	r3, #4
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	f7ff fa75 	bl	800545c <vListInsert>
}
 8005f72:	e010      	b.n	8005f96 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f74:	4b0f      	ldr	r3, [pc, #60]	; (8005fb4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	4b0a      	ldr	r3, [pc, #40]	; (8005fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4610      	mov	r0, r2
 8005f82:	f7ff fa6b 	bl	800545c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f86:	4b0c      	ldr	r3, [pc, #48]	; (8005fb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d202      	bcs.n	8005f96 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f90:	4a09      	ldr	r2, [pc, #36]	; (8005fb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	6013      	str	r3, [r2, #0]
}
 8005f96:	bf00      	nop
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	2000458c 	.word	0x2000458c
 8005fa4:	20004488 	.word	0x20004488
 8005fa8:	20004590 	.word	0x20004590
 8005fac:	20004574 	.word	0x20004574
 8005fb0:	20004544 	.word	0x20004544
 8005fb4:	20004540 	.word	0x20004540
 8005fb8:	200045a8 	.word	0x200045a8

08005fbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	3b04      	subs	r3, #4
 8005fcc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	3b04      	subs	r3, #4
 8005fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f023 0201 	bic.w	r2, r3, #1
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3b04      	subs	r3, #4
 8005fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fec:	4a0c      	ldr	r2, [pc, #48]	; (8006020 <pxPortInitialiseStack+0x64>)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3b14      	subs	r3, #20
 8005ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	3b04      	subs	r3, #4
 8006002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f06f 0202 	mvn.w	r2, #2
 800600a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	3b20      	subs	r3, #32
 8006010:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006012:	68fb      	ldr	r3, [r7, #12]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	08006025 	.word	0x08006025

08006024 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800602a:	2300      	movs	r3, #0
 800602c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800602e:	4b12      	ldr	r3, [pc, #72]	; (8006078 <prvTaskExitError+0x54>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006036:	d00a      	beq.n	800604e <prvTaskExitError+0x2a>
	__asm volatile
 8006038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	60fb      	str	r3, [r7, #12]
}
 800604a:	bf00      	nop
 800604c:	e7fe      	b.n	800604c <prvTaskExitError+0x28>
	__asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	60bb      	str	r3, [r7, #8]
}
 8006060:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006062:	bf00      	nop
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0fc      	beq.n	8006064 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800606a:	bf00      	nop
 800606c:	bf00      	nop
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	20000014 	.word	0x20000014
 800607c:	00000000 	.word	0x00000000

08006080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006080:	4b07      	ldr	r3, [pc, #28]	; (80060a0 <pxCurrentTCBConst2>)
 8006082:	6819      	ldr	r1, [r3, #0]
 8006084:	6808      	ldr	r0, [r1, #0]
 8006086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608a:	f380 8809 	msr	PSP, r0
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f04f 0000 	mov.w	r0, #0
 8006096:	f380 8811 	msr	BASEPRI, r0
 800609a:	4770      	bx	lr
 800609c:	f3af 8000 	nop.w

080060a0 <pxCurrentTCBConst2>:
 80060a0:	20004488 	.word	0x20004488
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80060a4:	bf00      	nop
 80060a6:	bf00      	nop

080060a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80060a8:	4808      	ldr	r0, [pc, #32]	; (80060cc <prvPortStartFirstTask+0x24>)
 80060aa:	6800      	ldr	r0, [r0, #0]
 80060ac:	6800      	ldr	r0, [r0, #0]
 80060ae:	f380 8808 	msr	MSP, r0
 80060b2:	f04f 0000 	mov.w	r0, #0
 80060b6:	f380 8814 	msr	CONTROL, r0
 80060ba:	b662      	cpsie	i
 80060bc:	b661      	cpsie	f
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	df00      	svc	0
 80060c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060ca:	bf00      	nop
 80060cc:	e000ed08 	.word	0xe000ed08

080060d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060d6:	4b46      	ldr	r3, [pc, #280]	; (80061f0 <xPortStartScheduler+0x120>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a46      	ldr	r2, [pc, #280]	; (80061f4 <xPortStartScheduler+0x124>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d10a      	bne.n	80060f6 <xPortStartScheduler+0x26>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	613b      	str	r3, [r7, #16]
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060f6:	4b3e      	ldr	r3, [pc, #248]	; (80061f0 <xPortStartScheduler+0x120>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a3f      	ldr	r2, [pc, #252]	; (80061f8 <xPortStartScheduler+0x128>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d10a      	bne.n	8006116 <xPortStartScheduler+0x46>
	__asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	60fb      	str	r3, [r7, #12]
}
 8006112:	bf00      	nop
 8006114:	e7fe      	b.n	8006114 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006116:	4b39      	ldr	r3, [pc, #228]	; (80061fc <xPortStartScheduler+0x12c>)
 8006118:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	b2db      	uxtb	r3, r3
 8006120:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	22ff      	movs	r2, #255	; 0xff
 8006126:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	b2db      	uxtb	r3, r3
 800612e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006130:	78fb      	ldrb	r3, [r7, #3]
 8006132:	b2db      	uxtb	r3, r3
 8006134:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006138:	b2da      	uxtb	r2, r3
 800613a:	4b31      	ldr	r3, [pc, #196]	; (8006200 <xPortStartScheduler+0x130>)
 800613c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800613e:	4b31      	ldr	r3, [pc, #196]	; (8006204 <xPortStartScheduler+0x134>)
 8006140:	2207      	movs	r2, #7
 8006142:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006144:	e009      	b.n	800615a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006146:	4b2f      	ldr	r3, [pc, #188]	; (8006204 <xPortStartScheduler+0x134>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3b01      	subs	r3, #1
 800614c:	4a2d      	ldr	r2, [pc, #180]	; (8006204 <xPortStartScheduler+0x134>)
 800614e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006150:	78fb      	ldrb	r3, [r7, #3]
 8006152:	b2db      	uxtb	r3, r3
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	b2db      	uxtb	r3, r3
 8006158:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800615a:	78fb      	ldrb	r3, [r7, #3]
 800615c:	b2db      	uxtb	r3, r3
 800615e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006162:	2b80      	cmp	r3, #128	; 0x80
 8006164:	d0ef      	beq.n	8006146 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006166:	4b27      	ldr	r3, [pc, #156]	; (8006204 <xPortStartScheduler+0x134>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f1c3 0307 	rsb	r3, r3, #7
 800616e:	2b04      	cmp	r3, #4
 8006170:	d00a      	beq.n	8006188 <xPortStartScheduler+0xb8>
	__asm volatile
 8006172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006176:	f383 8811 	msr	BASEPRI, r3
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	60bb      	str	r3, [r7, #8]
}
 8006184:	bf00      	nop
 8006186:	e7fe      	b.n	8006186 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006188:	4b1e      	ldr	r3, [pc, #120]	; (8006204 <xPortStartScheduler+0x134>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	021b      	lsls	r3, r3, #8
 800618e:	4a1d      	ldr	r2, [pc, #116]	; (8006204 <xPortStartScheduler+0x134>)
 8006190:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006192:	4b1c      	ldr	r3, [pc, #112]	; (8006204 <xPortStartScheduler+0x134>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800619a:	4a1a      	ldr	r2, [pc, #104]	; (8006204 <xPortStartScheduler+0x134>)
 800619c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80061a6:	4b18      	ldr	r3, [pc, #96]	; (8006208 <xPortStartScheduler+0x138>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a17      	ldr	r2, [pc, #92]	; (8006208 <xPortStartScheduler+0x138>)
 80061ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061b2:	4b15      	ldr	r3, [pc, #84]	; (8006208 <xPortStartScheduler+0x138>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a14      	ldr	r2, [pc, #80]	; (8006208 <xPortStartScheduler+0x138>)
 80061b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80061bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80061be:	f000 f8dd 	bl	800637c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061c2:	4b12      	ldr	r3, [pc, #72]	; (800620c <xPortStartScheduler+0x13c>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061c8:	f000 f8fc 	bl	80063c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061cc:	4b10      	ldr	r3, [pc, #64]	; (8006210 <xPortStartScheduler+0x140>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a0f      	ldr	r2, [pc, #60]	; (8006210 <xPortStartScheduler+0x140>)
 80061d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061d8:	f7ff ff66 	bl	80060a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061dc:	f7ff fd4c 	bl	8005c78 <vTaskSwitchContext>
	prvTaskExitError();
 80061e0:	f7ff ff20 	bl	8006024 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3718      	adds	r7, #24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	e000ed00 	.word	0xe000ed00
 80061f4:	410fc271 	.word	0x410fc271
 80061f8:	410fc270 	.word	0x410fc270
 80061fc:	e000e400 	.word	0xe000e400
 8006200:	200045b4 	.word	0x200045b4
 8006204:	200045b8 	.word	0x200045b8
 8006208:	e000ed20 	.word	0xe000ed20
 800620c:	20000014 	.word	0x20000014
 8006210:	e000ef34 	.word	0xe000ef34

08006214 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	607b      	str	r3, [r7, #4]
}
 800622c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800622e:	4b0f      	ldr	r3, [pc, #60]	; (800626c <vPortEnterCritical+0x58>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3301      	adds	r3, #1
 8006234:	4a0d      	ldr	r2, [pc, #52]	; (800626c <vPortEnterCritical+0x58>)
 8006236:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006238:	4b0c      	ldr	r3, [pc, #48]	; (800626c <vPortEnterCritical+0x58>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d10f      	bne.n	8006260 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006240:	4b0b      	ldr	r3, [pc, #44]	; (8006270 <vPortEnterCritical+0x5c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <vPortEnterCritical+0x4c>
	__asm volatile
 800624a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	603b      	str	r3, [r7, #0]
}
 800625c:	bf00      	nop
 800625e:	e7fe      	b.n	800625e <vPortEnterCritical+0x4a>
	}
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	20000014 	.word	0x20000014
 8006270:	e000ed04 	.word	0xe000ed04

08006274 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800627a:	4b12      	ldr	r3, [pc, #72]	; (80062c4 <vPortExitCritical+0x50>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10a      	bne.n	8006298 <vPortExitCritical+0x24>
	__asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	607b      	str	r3, [r7, #4]
}
 8006294:	bf00      	nop
 8006296:	e7fe      	b.n	8006296 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006298:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <vPortExitCritical+0x50>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3b01      	subs	r3, #1
 800629e:	4a09      	ldr	r2, [pc, #36]	; (80062c4 <vPortExitCritical+0x50>)
 80062a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062a2:	4b08      	ldr	r3, [pc, #32]	; (80062c4 <vPortExitCritical+0x50>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d105      	bne.n	80062b6 <vPortExitCritical+0x42>
 80062aa:	2300      	movs	r3, #0
 80062ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80062b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80062b6:	bf00      	nop
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	20000014 	.word	0x20000014
	...

080062d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062d0:	f3ef 8009 	mrs	r0, PSP
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	4b15      	ldr	r3, [pc, #84]	; (8006330 <pxCurrentTCBConst>)
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	f01e 0f10 	tst.w	lr, #16
 80062e0:	bf08      	it	eq
 80062e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ea:	6010      	str	r0, [r2, #0]
 80062ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062f4:	f380 8811 	msr	BASEPRI, r0
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f7ff fcba 	bl	8005c78 <vTaskSwitchContext>
 8006304:	f04f 0000 	mov.w	r0, #0
 8006308:	f380 8811 	msr	BASEPRI, r0
 800630c:	bc09      	pop	{r0, r3}
 800630e:	6819      	ldr	r1, [r3, #0]
 8006310:	6808      	ldr	r0, [r1, #0]
 8006312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006316:	f01e 0f10 	tst.w	lr, #16
 800631a:	bf08      	it	eq
 800631c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006320:	f380 8809 	msr	PSP, r0
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	f3af 8000 	nop.w

08006330 <pxCurrentTCBConst>:
 8006330:	20004488 	.word	0x20004488
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006334:	bf00      	nop
 8006336:	bf00      	nop

08006338 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	607b      	str	r3, [r7, #4]
}
 8006350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006352:	f7ff fbd9 	bl	8005b08 <xTaskIncrementTick>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800635c:	4b06      	ldr	r3, [pc, #24]	; (8006378 <SysTick_Handler+0x40>)
 800635e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	2300      	movs	r3, #0
 8006366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	f383 8811 	msr	BASEPRI, r3
}
 800636e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006370:	bf00      	nop
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	e000ed04 	.word	0xe000ed04

0800637c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006380:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <vPortSetupTimerInterrupt+0x34>)
 8006382:	2200      	movs	r2, #0
 8006384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006386:	4b0b      	ldr	r3, [pc, #44]	; (80063b4 <vPortSetupTimerInterrupt+0x38>)
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800638c:	4b0a      	ldr	r3, [pc, #40]	; (80063b8 <vPortSetupTimerInterrupt+0x3c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a0a      	ldr	r2, [pc, #40]	; (80063bc <vPortSetupTimerInterrupt+0x40>)
 8006392:	fba2 2303 	umull	r2, r3, r2, r3
 8006396:	099b      	lsrs	r3, r3, #6
 8006398:	4a09      	ldr	r2, [pc, #36]	; (80063c0 <vPortSetupTimerInterrupt+0x44>)
 800639a:	3b01      	subs	r3, #1
 800639c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800639e:	4b04      	ldr	r3, [pc, #16]	; (80063b0 <vPortSetupTimerInterrupt+0x34>)
 80063a0:	2207      	movs	r2, #7
 80063a2:	601a      	str	r2, [r3, #0]
}
 80063a4:	bf00      	nop
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	e000e010 	.word	0xe000e010
 80063b4:	e000e018 	.word	0xe000e018
 80063b8:	20000008 	.word	0x20000008
 80063bc:	10624dd3 	.word	0x10624dd3
 80063c0:	e000e014 	.word	0xe000e014

080063c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80063c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80063d4 <vPortEnableVFP+0x10>
 80063c8:	6801      	ldr	r1, [r0, #0]
 80063ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80063ce:	6001      	str	r1, [r0, #0]
 80063d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063d2:	bf00      	nop
 80063d4:	e000ed88 	.word	0xe000ed88

080063d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08a      	sub	sp, #40	; 0x28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063e0:	2300      	movs	r3, #0
 80063e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063e4:	f7ff fae6 	bl	80059b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063e8:	4b5b      	ldr	r3, [pc, #364]	; (8006558 <pvPortMalloc+0x180>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063f0:	f000 f920 	bl	8006634 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063f4:	4b59      	ldr	r3, [pc, #356]	; (800655c <pvPortMalloc+0x184>)
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4013      	ands	r3, r2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f040 8093 	bne.w	8006528 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d01d      	beq.n	8006444 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006408:	2208      	movs	r2, #8
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4413      	add	r3, r2
 800640e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	2b00      	cmp	r3, #0
 8006418:	d014      	beq.n	8006444 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f023 0307 	bic.w	r3, r3, #7
 8006420:	3308      	adds	r3, #8
 8006422:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f003 0307 	and.w	r3, r3, #7
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00a      	beq.n	8006444 <pvPortMalloc+0x6c>
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	617b      	str	r3, [r7, #20]
}
 8006440:	bf00      	nop
 8006442:	e7fe      	b.n	8006442 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d06e      	beq.n	8006528 <pvPortMalloc+0x150>
 800644a:	4b45      	ldr	r3, [pc, #276]	; (8006560 <pvPortMalloc+0x188>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	429a      	cmp	r2, r3
 8006452:	d869      	bhi.n	8006528 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006454:	4b43      	ldr	r3, [pc, #268]	; (8006564 <pvPortMalloc+0x18c>)
 8006456:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006458:	4b42      	ldr	r3, [pc, #264]	; (8006564 <pvPortMalloc+0x18c>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800645e:	e004      	b.n	800646a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	429a      	cmp	r2, r3
 8006472:	d903      	bls.n	800647c <pvPortMalloc+0xa4>
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1f1      	bne.n	8006460 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800647c:	4b36      	ldr	r3, [pc, #216]	; (8006558 <pvPortMalloc+0x180>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006482:	429a      	cmp	r2, r3
 8006484:	d050      	beq.n	8006528 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006486:	6a3b      	ldr	r3, [r7, #32]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2208      	movs	r2, #8
 800648c:	4413      	add	r3, r2
 800648e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	1ad2      	subs	r2, r2, r3
 80064a0:	2308      	movs	r3, #8
 80064a2:	005b      	lsls	r3, r3, #1
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d91f      	bls.n	80064e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80064a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4413      	add	r3, r2
 80064ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	f003 0307 	and.w	r3, r3, #7
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <pvPortMalloc+0xf8>
	__asm volatile
 80064ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	613b      	str	r3, [r7, #16]
}
 80064cc:	bf00      	nop
 80064ce:	e7fe      	b.n	80064ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	1ad2      	subs	r2, r2, r3
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064e2:	69b8      	ldr	r0, [r7, #24]
 80064e4:	f000 f908 	bl	80066f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064e8:	4b1d      	ldr	r3, [pc, #116]	; (8006560 <pvPortMalloc+0x188>)
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	4a1b      	ldr	r2, [pc, #108]	; (8006560 <pvPortMalloc+0x188>)
 80064f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064f6:	4b1a      	ldr	r3, [pc, #104]	; (8006560 <pvPortMalloc+0x188>)
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	4b1b      	ldr	r3, [pc, #108]	; (8006568 <pvPortMalloc+0x190>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d203      	bcs.n	800650a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006502:	4b17      	ldr	r3, [pc, #92]	; (8006560 <pvPortMalloc+0x188>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a18      	ldr	r2, [pc, #96]	; (8006568 <pvPortMalloc+0x190>)
 8006508:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	4b13      	ldr	r3, [pc, #76]	; (800655c <pvPortMalloc+0x184>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	431a      	orrs	r2, r3
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	2200      	movs	r2, #0
 800651c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800651e:	4b13      	ldr	r3, [pc, #76]	; (800656c <pvPortMalloc+0x194>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3301      	adds	r3, #1
 8006524:	4a11      	ldr	r2, [pc, #68]	; (800656c <pvPortMalloc+0x194>)
 8006526:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006528:	f7ff fa52 	bl	80059d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	f003 0307 	and.w	r3, r3, #7
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00a      	beq.n	800654c <pvPortMalloc+0x174>
	__asm volatile
 8006536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653a:	f383 8811 	msr	BASEPRI, r3
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f3bf 8f4f 	dsb	sy
 8006546:	60fb      	str	r3, [r7, #12]
}
 8006548:	bf00      	nop
 800654a:	e7fe      	b.n	800654a <pvPortMalloc+0x172>
	return pvReturn;
 800654c:	69fb      	ldr	r3, [r7, #28]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3728      	adds	r7, #40	; 0x28
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	200081c4 	.word	0x200081c4
 800655c:	200081d8 	.word	0x200081d8
 8006560:	200081c8 	.word	0x200081c8
 8006564:	200081bc 	.word	0x200081bc
 8006568:	200081cc 	.word	0x200081cc
 800656c:	200081d0 	.word	0x200081d0

08006570 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d04d      	beq.n	800661e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006582:	2308      	movs	r3, #8
 8006584:	425b      	negs	r3, r3
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	4413      	add	r3, r2
 800658a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	4b24      	ldr	r3, [pc, #144]	; (8006628 <vPortFree+0xb8>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4013      	ands	r3, r2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10a      	bne.n	80065b4 <vPortFree+0x44>
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	60fb      	str	r3, [r7, #12]
}
 80065b0:	bf00      	nop
 80065b2:	e7fe      	b.n	80065b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00a      	beq.n	80065d2 <vPortFree+0x62>
	__asm volatile
 80065bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	60bb      	str	r3, [r7, #8]
}
 80065ce:	bf00      	nop
 80065d0:	e7fe      	b.n	80065d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	4b14      	ldr	r3, [pc, #80]	; (8006628 <vPortFree+0xb8>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4013      	ands	r3, r2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d01e      	beq.n	800661e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d11a      	bne.n	800661e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	4b0e      	ldr	r3, [pc, #56]	; (8006628 <vPortFree+0xb8>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	43db      	mvns	r3, r3
 80065f2:	401a      	ands	r2, r3
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065f8:	f7ff f9dc 	bl	80059b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	4b0a      	ldr	r3, [pc, #40]	; (800662c <vPortFree+0xbc>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4413      	add	r3, r2
 8006606:	4a09      	ldr	r2, [pc, #36]	; (800662c <vPortFree+0xbc>)
 8006608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800660a:	6938      	ldr	r0, [r7, #16]
 800660c:	f000 f874 	bl	80066f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006610:	4b07      	ldr	r3, [pc, #28]	; (8006630 <vPortFree+0xc0>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3301      	adds	r3, #1
 8006616:	4a06      	ldr	r2, [pc, #24]	; (8006630 <vPortFree+0xc0>)
 8006618:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800661a:	f7ff f9d9 	bl	80059d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800661e:	bf00      	nop
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	200081d8 	.word	0x200081d8
 800662c:	200081c8 	.word	0x200081c8
 8006630:	200081d4 	.word	0x200081d4

08006634 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800663a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800663e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006640:	4b27      	ldr	r3, [pc, #156]	; (80066e0 <prvHeapInit+0xac>)
 8006642:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f003 0307 	and.w	r3, r3, #7
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00c      	beq.n	8006668 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3307      	adds	r3, #7
 8006652:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0307 	bic.w	r3, r3, #7
 800665a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	4a1f      	ldr	r2, [pc, #124]	; (80066e0 <prvHeapInit+0xac>)
 8006664:	4413      	add	r3, r2
 8006666:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800666c:	4a1d      	ldr	r2, [pc, #116]	; (80066e4 <prvHeapInit+0xb0>)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006672:	4b1c      	ldr	r3, [pc, #112]	; (80066e4 <prvHeapInit+0xb0>)
 8006674:	2200      	movs	r2, #0
 8006676:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	4413      	add	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006680:	2208      	movs	r2, #8
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	1a9b      	subs	r3, r3, r2
 8006686:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f023 0307 	bic.w	r3, r3, #7
 800668e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4a15      	ldr	r2, [pc, #84]	; (80066e8 <prvHeapInit+0xb4>)
 8006694:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006696:	4b14      	ldr	r3, [pc, #80]	; (80066e8 <prvHeapInit+0xb4>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2200      	movs	r2, #0
 800669c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800669e:	4b12      	ldr	r3, [pc, #72]	; (80066e8 <prvHeapInit+0xb4>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2200      	movs	r2, #0
 80066a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	1ad2      	subs	r2, r2, r3
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066b4:	4b0c      	ldr	r3, [pc, #48]	; (80066e8 <prvHeapInit+0xb4>)
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	4a0a      	ldr	r2, [pc, #40]	; (80066ec <prvHeapInit+0xb8>)
 80066c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	4a09      	ldr	r2, [pc, #36]	; (80066f0 <prvHeapInit+0xbc>)
 80066ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066cc:	4b09      	ldr	r3, [pc, #36]	; (80066f4 <prvHeapInit+0xc0>)
 80066ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80066d2:	601a      	str	r2, [r3, #0]
}
 80066d4:	bf00      	nop
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	200045bc 	.word	0x200045bc
 80066e4:	200081bc 	.word	0x200081bc
 80066e8:	200081c4 	.word	0x200081c4
 80066ec:	200081cc 	.word	0x200081cc
 80066f0:	200081c8 	.word	0x200081c8
 80066f4:	200081d8 	.word	0x200081d8

080066f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006700:	4b28      	ldr	r3, [pc, #160]	; (80067a4 <prvInsertBlockIntoFreeList+0xac>)
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	e002      	b.n	800670c <prvInsertBlockIntoFreeList+0x14>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	429a      	cmp	r2, r3
 8006714:	d8f7      	bhi.n	8006706 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	4413      	add	r3, r2
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	429a      	cmp	r2, r3
 8006726:	d108      	bne.n	800673a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	441a      	add	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	441a      	add	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	429a      	cmp	r2, r3
 800674c:	d118      	bne.n	8006780 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	4b15      	ldr	r3, [pc, #84]	; (80067a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	429a      	cmp	r2, r3
 8006758:	d00d      	beq.n	8006776 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685a      	ldr	r2, [r3, #4]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	441a      	add	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	e008      	b.n	8006788 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006776:	4b0c      	ldr	r3, [pc, #48]	; (80067a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	e003      	b.n	8006788 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	429a      	cmp	r2, r3
 800678e:	d002      	beq.n	8006796 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006796:	bf00      	nop
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	200081bc 	.word	0x200081bc
 80067a8:	200081c4 	.word	0x200081c4

080067ac <memset>:
 80067ac:	4402      	add	r2, r0
 80067ae:	4603      	mov	r3, r0
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d100      	bne.n	80067b6 <memset+0xa>
 80067b4:	4770      	bx	lr
 80067b6:	f803 1b01 	strb.w	r1, [r3], #1
 80067ba:	e7f9      	b.n	80067b0 <memset+0x4>

080067bc <_reclaim_reent>:
 80067bc:	4b29      	ldr	r3, [pc, #164]	; (8006864 <_reclaim_reent+0xa8>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4283      	cmp	r3, r0
 80067c2:	b570      	push	{r4, r5, r6, lr}
 80067c4:	4604      	mov	r4, r0
 80067c6:	d04b      	beq.n	8006860 <_reclaim_reent+0xa4>
 80067c8:	69c3      	ldr	r3, [r0, #28]
 80067ca:	b143      	cbz	r3, 80067de <_reclaim_reent+0x22>
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d144      	bne.n	800685c <_reclaim_reent+0xa0>
 80067d2:	69e3      	ldr	r3, [r4, #28]
 80067d4:	6819      	ldr	r1, [r3, #0]
 80067d6:	b111      	cbz	r1, 80067de <_reclaim_reent+0x22>
 80067d8:	4620      	mov	r0, r4
 80067da:	f000 f86b 	bl	80068b4 <_free_r>
 80067de:	6961      	ldr	r1, [r4, #20]
 80067e0:	b111      	cbz	r1, 80067e8 <_reclaim_reent+0x2c>
 80067e2:	4620      	mov	r0, r4
 80067e4:	f000 f866 	bl	80068b4 <_free_r>
 80067e8:	69e1      	ldr	r1, [r4, #28]
 80067ea:	b111      	cbz	r1, 80067f2 <_reclaim_reent+0x36>
 80067ec:	4620      	mov	r0, r4
 80067ee:	f000 f861 	bl	80068b4 <_free_r>
 80067f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80067f4:	b111      	cbz	r1, 80067fc <_reclaim_reent+0x40>
 80067f6:	4620      	mov	r0, r4
 80067f8:	f000 f85c 	bl	80068b4 <_free_r>
 80067fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067fe:	b111      	cbz	r1, 8006806 <_reclaim_reent+0x4a>
 8006800:	4620      	mov	r0, r4
 8006802:	f000 f857 	bl	80068b4 <_free_r>
 8006806:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006808:	b111      	cbz	r1, 8006810 <_reclaim_reent+0x54>
 800680a:	4620      	mov	r0, r4
 800680c:	f000 f852 	bl	80068b4 <_free_r>
 8006810:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006812:	b111      	cbz	r1, 800681a <_reclaim_reent+0x5e>
 8006814:	4620      	mov	r0, r4
 8006816:	f000 f84d 	bl	80068b4 <_free_r>
 800681a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800681c:	b111      	cbz	r1, 8006824 <_reclaim_reent+0x68>
 800681e:	4620      	mov	r0, r4
 8006820:	f000 f848 	bl	80068b4 <_free_r>
 8006824:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006826:	b111      	cbz	r1, 800682e <_reclaim_reent+0x72>
 8006828:	4620      	mov	r0, r4
 800682a:	f000 f843 	bl	80068b4 <_free_r>
 800682e:	6a23      	ldr	r3, [r4, #32]
 8006830:	b1b3      	cbz	r3, 8006860 <_reclaim_reent+0xa4>
 8006832:	4620      	mov	r0, r4
 8006834:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006838:	4718      	bx	r3
 800683a:	5949      	ldr	r1, [r1, r5]
 800683c:	b941      	cbnz	r1, 8006850 <_reclaim_reent+0x94>
 800683e:	3504      	adds	r5, #4
 8006840:	69e3      	ldr	r3, [r4, #28]
 8006842:	2d80      	cmp	r5, #128	; 0x80
 8006844:	68d9      	ldr	r1, [r3, #12]
 8006846:	d1f8      	bne.n	800683a <_reclaim_reent+0x7e>
 8006848:	4620      	mov	r0, r4
 800684a:	f000 f833 	bl	80068b4 <_free_r>
 800684e:	e7c0      	b.n	80067d2 <_reclaim_reent+0x16>
 8006850:	680e      	ldr	r6, [r1, #0]
 8006852:	4620      	mov	r0, r4
 8006854:	f000 f82e 	bl	80068b4 <_free_r>
 8006858:	4631      	mov	r1, r6
 800685a:	e7ef      	b.n	800683c <_reclaim_reent+0x80>
 800685c:	2500      	movs	r5, #0
 800685e:	e7ef      	b.n	8006840 <_reclaim_reent+0x84>
 8006860:	bd70      	pop	{r4, r5, r6, pc}
 8006862:	bf00      	nop
 8006864:	20000064 	.word	0x20000064

08006868 <__libc_init_array>:
 8006868:	b570      	push	{r4, r5, r6, lr}
 800686a:	4d0d      	ldr	r5, [pc, #52]	; (80068a0 <__libc_init_array+0x38>)
 800686c:	4c0d      	ldr	r4, [pc, #52]	; (80068a4 <__libc_init_array+0x3c>)
 800686e:	1b64      	subs	r4, r4, r5
 8006870:	10a4      	asrs	r4, r4, #2
 8006872:	2600      	movs	r6, #0
 8006874:	42a6      	cmp	r6, r4
 8006876:	d109      	bne.n	800688c <__libc_init_array+0x24>
 8006878:	4d0b      	ldr	r5, [pc, #44]	; (80068a8 <__libc_init_array+0x40>)
 800687a:	4c0c      	ldr	r4, [pc, #48]	; (80068ac <__libc_init_array+0x44>)
 800687c:	f000 f872 	bl	8006964 <_init>
 8006880:	1b64      	subs	r4, r4, r5
 8006882:	10a4      	asrs	r4, r4, #2
 8006884:	2600      	movs	r6, #0
 8006886:	42a6      	cmp	r6, r4
 8006888:	d105      	bne.n	8006896 <__libc_init_array+0x2e>
 800688a:	bd70      	pop	{r4, r5, r6, pc}
 800688c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006890:	4798      	blx	r3
 8006892:	3601      	adds	r6, #1
 8006894:	e7ee      	b.n	8006874 <__libc_init_array+0xc>
 8006896:	f855 3b04 	ldr.w	r3, [r5], #4
 800689a:	4798      	blx	r3
 800689c:	3601      	adds	r6, #1
 800689e:	e7f2      	b.n	8006886 <__libc_init_array+0x1e>
 80068a0:	08006b28 	.word	0x08006b28
 80068a4:	08006b28 	.word	0x08006b28
 80068a8:	08006b28 	.word	0x08006b28
 80068ac:	08006b2c 	.word	0x08006b2c

080068b0 <__retarget_lock_acquire_recursive>:
 80068b0:	4770      	bx	lr

080068b2 <__retarget_lock_release_recursive>:
 80068b2:	4770      	bx	lr

080068b4 <_free_r>:
 80068b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068b6:	2900      	cmp	r1, #0
 80068b8:	d044      	beq.n	8006944 <_free_r+0x90>
 80068ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068be:	9001      	str	r0, [sp, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f1a1 0404 	sub.w	r4, r1, #4
 80068c6:	bfb8      	it	lt
 80068c8:	18e4      	addlt	r4, r4, r3
 80068ca:	f000 f83f 	bl	800694c <__malloc_lock>
 80068ce:	4a1e      	ldr	r2, [pc, #120]	; (8006948 <_free_r+0x94>)
 80068d0:	9801      	ldr	r0, [sp, #4]
 80068d2:	6813      	ldr	r3, [r2, #0]
 80068d4:	b933      	cbnz	r3, 80068e4 <_free_r+0x30>
 80068d6:	6063      	str	r3, [r4, #4]
 80068d8:	6014      	str	r4, [r2, #0]
 80068da:	b003      	add	sp, #12
 80068dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068e0:	f000 b83a 	b.w	8006958 <__malloc_unlock>
 80068e4:	42a3      	cmp	r3, r4
 80068e6:	d908      	bls.n	80068fa <_free_r+0x46>
 80068e8:	6825      	ldr	r5, [r4, #0]
 80068ea:	1961      	adds	r1, r4, r5
 80068ec:	428b      	cmp	r3, r1
 80068ee:	bf01      	itttt	eq
 80068f0:	6819      	ldreq	r1, [r3, #0]
 80068f2:	685b      	ldreq	r3, [r3, #4]
 80068f4:	1949      	addeq	r1, r1, r5
 80068f6:	6021      	streq	r1, [r4, #0]
 80068f8:	e7ed      	b.n	80068d6 <_free_r+0x22>
 80068fa:	461a      	mov	r2, r3
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	b10b      	cbz	r3, 8006904 <_free_r+0x50>
 8006900:	42a3      	cmp	r3, r4
 8006902:	d9fa      	bls.n	80068fa <_free_r+0x46>
 8006904:	6811      	ldr	r1, [r2, #0]
 8006906:	1855      	adds	r5, r2, r1
 8006908:	42a5      	cmp	r5, r4
 800690a:	d10b      	bne.n	8006924 <_free_r+0x70>
 800690c:	6824      	ldr	r4, [r4, #0]
 800690e:	4421      	add	r1, r4
 8006910:	1854      	adds	r4, r2, r1
 8006912:	42a3      	cmp	r3, r4
 8006914:	6011      	str	r1, [r2, #0]
 8006916:	d1e0      	bne.n	80068da <_free_r+0x26>
 8006918:	681c      	ldr	r4, [r3, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	6053      	str	r3, [r2, #4]
 800691e:	440c      	add	r4, r1
 8006920:	6014      	str	r4, [r2, #0]
 8006922:	e7da      	b.n	80068da <_free_r+0x26>
 8006924:	d902      	bls.n	800692c <_free_r+0x78>
 8006926:	230c      	movs	r3, #12
 8006928:	6003      	str	r3, [r0, #0]
 800692a:	e7d6      	b.n	80068da <_free_r+0x26>
 800692c:	6825      	ldr	r5, [r4, #0]
 800692e:	1961      	adds	r1, r4, r5
 8006930:	428b      	cmp	r3, r1
 8006932:	bf04      	itt	eq
 8006934:	6819      	ldreq	r1, [r3, #0]
 8006936:	685b      	ldreq	r3, [r3, #4]
 8006938:	6063      	str	r3, [r4, #4]
 800693a:	bf04      	itt	eq
 800693c:	1949      	addeq	r1, r1, r5
 800693e:	6021      	streq	r1, [r4, #0]
 8006940:	6054      	str	r4, [r2, #4]
 8006942:	e7ca      	b.n	80068da <_free_r+0x26>
 8006944:	b003      	add	sp, #12
 8006946:	bd30      	pop	{r4, r5, pc}
 8006948:	20008318 	.word	0x20008318

0800694c <__malloc_lock>:
 800694c:	4801      	ldr	r0, [pc, #4]	; (8006954 <__malloc_lock+0x8>)
 800694e:	f7ff bfaf 	b.w	80068b0 <__retarget_lock_acquire_recursive>
 8006952:	bf00      	nop
 8006954:	20008314 	.word	0x20008314

08006958 <__malloc_unlock>:
 8006958:	4801      	ldr	r0, [pc, #4]	; (8006960 <__malloc_unlock+0x8>)
 800695a:	f7ff bfaa 	b.w	80068b2 <__retarget_lock_release_recursive>
 800695e:	bf00      	nop
 8006960:	20008314 	.word	0x20008314

08006964 <_init>:
 8006964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006966:	bf00      	nop
 8006968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800696a:	bc08      	pop	{r3}
 800696c:	469e      	mov	lr, r3
 800696e:	4770      	bx	lr

08006970 <_fini>:
 8006970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006972:	bf00      	nop
 8006974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006976:	bc08      	pop	{r3}
 8006978:	469e      	mov	lr, r3
 800697a:	4770      	bx	lr
