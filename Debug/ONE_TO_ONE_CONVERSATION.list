
ONE_TO_ONE_CONVERSATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069dc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08006bac  08006bac  00016bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e3c  08006e3c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006e3c  08006e3c  00016e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e44  08006e44  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e44  08006e44  00016e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e48  08006e48  00016e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008308  20000074  08006ec0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000837c  08006ec0  0002837c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019360  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004095  00000000  00000000  00039447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d8  00000000  00000000  0003d4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001015  00000000  00000000  0003e9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002531c  00000000  00000000  0003f9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ab9a  00000000  00000000  00064ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc84c  00000000  00000000  0007f883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000583c  00000000  00000000  0015c0d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0016190c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006b94 	.word	0x08006b94

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006b94 	.word	0x08006b94

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <UDS_Write_Data_Server>:
		return 0; // Invalid character
	}
}

void UDS_Write_Data_Server(uint8_t* received_data, uint16_t received_length)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	460b      	mov	r3, r1
 8000516:	807b      	strh	r3, [r7, #2]
	/*???????????????????????*/
	uint8_t received_data_l = sizeof(received_data);
 8000518:	2304      	movs	r3, #4
 800051a:	73fb      	strb	r3, [r7, #15]
	//	arr[4] = (data >> 16) & 0xFF;
	//	arr[5] = (data >> 8) & 0xFF;
	//	arr[6] = data & 0xFF;		  // Least significant byte of data


	pos_Response.SID = Write_Service ;
 800051c:	4b2a      	ldr	r3, [pc, #168]	; (80005c8 <UDS_Write_Data_Server+0xbc>)
 800051e:	222e      	movs	r2, #46	; 0x2e
 8000520:	701a      	strb	r2, [r3, #0]
	pos_Response.DID[0]=received_data[2];
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3302      	adds	r3, #2
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b25a      	sxtb	r2, r3
 800052a:	4b27      	ldr	r3, [pc, #156]	; (80005c8 <UDS_Write_Data_Server+0xbc>)
 800052c:	709a      	strb	r2, [r3, #2]
	pos_Response.DID[1]=received_data[3];
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3303      	adds	r3, #3
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	b25a      	sxtb	r2, r3
 8000536:	4b24      	ldr	r3, [pc, #144]	; (80005c8 <UDS_Write_Data_Server+0xbc>)
 8000538:	70da      	strb	r2, [r3, #3]
	pos_Response.DID_Length=2;
 800053a:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <UDS_Write_Data_Server+0xbc>)
 800053c:	2202      	movs	r2, #2
 800053e:	711a      	strb	r2, [r3, #4]
	pos_Response.Data_Length = 0;
 8000540:	4b21      	ldr	r3, [pc, #132]	; (80005c8 <UDS_Write_Data_Server+0xbc>)
 8000542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000546:	2200      	movs	r2, #0
 8000548:	715a      	strb	r2, [r3, #5]
	pos_Response.SUB_FUNC = -1;
 800054a:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <UDS_Write_Data_Server+0xbc>)
 800054c:	22ff      	movs	r2, #255	; 0xff
 800054e:	705a      	strb	r2, [r3, #1]

	if(received_data[DID_1] == Oil_Temp_First_byte && received_data[DID_2] == Oil_Temp_Second_byte){
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3302      	adds	r3, #2
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2bf1      	cmp	r3, #241	; 0xf1
 8000558:	d110      	bne.n	800057c <UDS_Write_Data_Server+0x70>
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	3303      	adds	r3, #3
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b3d      	cmp	r3, #61	; 0x3d
 8000562:	d10b      	bne.n	800057c <UDS_Write_Data_Server+0x70>
		Oil_Temp_var = received_data[4] << 8 | received_data[5];
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3304      	adds	r3, #4
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	021b      	lsls	r3, r3, #8
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	3205      	adds	r2, #5
 8000570:	7812      	ldrb	r2, [r2, #0]
 8000572:	4313      	orrs	r3, r2
 8000574:	461a      	mov	r2, r3
 8000576:	4b15      	ldr	r3, [pc, #84]	; (80005cc <UDS_Write_Data_Server+0xc0>)
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	e01e      	b.n	80005ba <UDS_Write_Data_Server+0xae>
	}
	else if(received_data[DID_1] == Oil_Pressure_First_byte && received_data[DID_2] == Oil_Pressure_Second_byte){
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3302      	adds	r3, #2
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2bf5      	cmp	r3, #245	; 0xf5
 8000584:	d119      	bne.n	80005ba <UDS_Write_Data_Server+0xae>
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	3303      	adds	r3, #3
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b3d      	cmp	r3, #61	; 0x3d
 800058e:	d114      	bne.n	80005ba <UDS_Write_Data_Server+0xae>
		Oil_Pressure_var = received_data[4] << 24 | received_data[5] << 16 | received_data[6] << 8 | received_data[7];
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	3304      	adds	r3, #4
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	061a      	lsls	r2, r3, #24
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3305      	adds	r3, #5
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	041b      	lsls	r3, r3, #16
 80005a0:	431a      	orrs	r2, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	3306      	adds	r3, #6
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	021b      	lsls	r3, r3, #8
 80005aa:	4313      	orrs	r3, r2
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	3207      	adds	r2, #7
 80005b0:	7812      	ldrb	r2, [r2, #0]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <UDS_Write_Data_Server+0xc4>)
 80005b8:	601a      	str	r2, [r3, #0]
	}
	UDS_Send_Pos_Res(&pos_Response);
 80005ba:	4803      	ldr	r0, [pc, #12]	; (80005c8 <UDS_Write_Data_Server+0xbc>)
 80005bc:	f000 f80a 	bl	80005d4 <UDS_Send_Pos_Res>
	}
	hamada_write.Length = sizeof(arr);

	// Transmit the data through CAN_TP using this function
	CanTP_Transmit(0, &hamada_write);*/
}
 80005c0:	bf00      	nop
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	2000009c 	.word	0x2000009c
 80005cc:	20000008 	.word	0x20000008
 80005d0:	20000004 	.word	0x20000004

080005d4 <UDS_Send_Pos_Res>:


/*****************************************************************************/

void UDS_Send_Pos_Res(ServiceInfo* Response)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

	uint8_t PCI = 2 + Response->DID_Length + Response->Data_Length;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	791a      	ldrb	r2, [r3, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80005e6:	795b      	ldrb	r3, [r3, #5]
 80005e8:	4413      	add	r3, r2
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	3302      	adds	r3, #2
 80005ee:	73fb      	strb	r3, [r7, #15]
	msg.Data[1] = Response->SID + 0x40;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	3340      	adds	r3, #64	; 0x40
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b2c      	ldr	r3, [pc, #176]	; (80006ac <UDS_Send_Pos_Res+0xd8>)
 80005fa:	705a      	strb	r2, [r3, #1]
	uint8_t currentIndex = 2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	73bb      	strb	r3, [r7, #14]
	if(Response->SUB_FUNC != -1)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800060a:	d00d      	beq.n	8000628 <UDS_Send_Pos_Res+0x54>
	{
		PCI++;
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	3301      	adds	r3, #1
 8000610:	73fb      	strb	r3, [r7, #15]
		msg.Data[currentIndex++]= Response->SUB_FUNC;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8000618:	7bbb      	ldrb	r3, [r7, #14]
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	73ba      	strb	r2, [r7, #14]
 800061e:	461a      	mov	r2, r3
 8000620:	b2c9      	uxtb	r1, r1
 8000622:	4b22      	ldr	r3, [pc, #136]	; (80006ac <UDS_Send_Pos_Res+0xd8>)
 8000624:	5499      	strb	r1, [r3, r2]
 8000626:	e015      	b.n	8000654 <UDS_Send_Pos_Res+0x80>
	}
	else
	{
		for(currentIndex = 2; currentIndex < Response->DID_Length + 2; currentIndex++)
 8000628:	2302      	movs	r3, #2
 800062a:	73bb      	strb	r3, [r7, #14]
 800062c:	e00c      	b.n	8000648 <UDS_Send_Pos_Res+0x74>
		{
			msg.Data[currentIndex] = Response->DID[currentIndex - 2];
 800062e:	7bbb      	ldrb	r3, [r7, #14]
 8000630:	3b02      	subs	r3, #2
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800063a:	7bbb      	ldrb	r3, [r7, #14]
 800063c:	b2d1      	uxtb	r1, r2
 800063e:	4a1b      	ldr	r2, [pc, #108]	; (80006ac <UDS_Send_Pos_Res+0xd8>)
 8000640:	54d1      	strb	r1, [r2, r3]
		for(currentIndex = 2; currentIndex < Response->DID_Length + 2; currentIndex++)
 8000642:	7bbb      	ldrb	r3, [r7, #14]
 8000644:	3301      	adds	r3, #1
 8000646:	73bb      	strb	r3, [r7, #14]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	791b      	ldrb	r3, [r3, #4]
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	7bbb      	ldrb	r3, [r7, #14]
 8000650:	429a      	cmp	r2, r3
 8000652:	daec      	bge.n	800062e <UDS_Send_Pos_Res+0x5a>
		}
	}

	uint8_t temp = currentIndex;
 8000654:	7bbb      	ldrb	r3, [r7, #14]
 8000656:	737b      	strb	r3, [r7, #13]
	while(currentIndex < Response->Data_Length + temp){
 8000658:	e00d      	b.n	8000676 <UDS_Send_Pos_Res+0xa2>
		msg.Data[currentIndex] = Response->Data[currentIndex - temp];
 800065a:	7bba      	ldrb	r2, [r7, #14]
 800065c:	7b7b      	ldrb	r3, [r7, #13]
 800065e:	1ad3      	subs	r3, r2, r3
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	4413      	add	r3, r2
 8000664:	f993 2005 	ldrsb.w	r2, [r3, #5]
 8000668:	7bbb      	ldrb	r3, [r7, #14]
 800066a:	b2d1      	uxtb	r1, r2
 800066c:	4a0f      	ldr	r2, [pc, #60]	; (80006ac <UDS_Send_Pos_Res+0xd8>)
 800066e:	54d1      	strb	r1, [r2, r3]
		currentIndex++;
 8000670:	7bbb      	ldrb	r3, [r7, #14]
 8000672:	3301      	adds	r3, #1
 8000674:	73bb      	strb	r3, [r7, #14]
	while(currentIndex < Response->Data_Length + temp){
 8000676:	7bba      	ldrb	r2, [r7, #14]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800067e:	795b      	ldrb	r3, [r3, #5]
 8000680:	4619      	mov	r1, r3
 8000682:	7b7b      	ldrb	r3, [r7, #13]
 8000684:	440b      	add	r3, r1
 8000686:	429a      	cmp	r2, r3
 8000688:	dbe7      	blt.n	800065a <UDS_Send_Pos_Res+0x86>
	}
	msg.Data[0] = PCI;
 800068a:	4a08      	ldr	r2, [pc, #32]	; (80006ac <UDS_Send_Pos_Res+0xd8>)
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	7013      	strb	r3, [r2, #0]
	msg.Length = PCI;
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	4a06      	ldr	r2, [pc, #24]	; (80006ac <UDS_Send_Pos_Res+0xd8>)
 8000694:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000698:	6013      	str	r3, [r2, #0]

	CanTp_Transmit(0, &msg);
 800069a:	4904      	ldr	r1, [pc, #16]	; (80006ac <UDS_Send_Pos_Res+0xd8>)
 800069c:	2000      	movs	r0, #0
 800069e:	f000 fca7 	bl	8000ff0 <CanTp_Transmit>
}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200020ac 	.word	0x200020ac

080006b0 <UDS_Send_Neg_Res>:

void UDS_Send_Neg_Res(uint8_t SID, uint8_t NRC)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	460a      	mov	r2, r1
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	4613      	mov	r3, r2
 80006be:	71bb      	strb	r3, [r7, #6]
	msg.Data[0] = 4;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <UDS_Send_Neg_Res+0x44>)
 80006c2:	2204      	movs	r2, #4
 80006c4:	701a      	strb	r2, [r3, #0]
	msg.Data[1] = 0x7F;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <UDS_Send_Neg_Res+0x44>)
 80006c8:	227f      	movs	r2, #127	; 0x7f
 80006ca:	705a      	strb	r2, [r3, #1]
	msg.Data[2] = SID;
 80006cc:	4a09      	ldr	r2, [pc, #36]	; (80006f4 <UDS_Send_Neg_Res+0x44>)
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	7093      	strb	r3, [r2, #2]
	msg.Data[3] = NRC;
 80006d2:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <UDS_Send_Neg_Res+0x44>)
 80006d4:	79bb      	ldrb	r3, [r7, #6]
 80006d6:	70d3      	strb	r3, [r2, #3]
	msg.Length = 4;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <UDS_Send_Neg_Res+0x44>)
 80006da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006de:	461a      	mov	r2, r3
 80006e0:	2304      	movs	r3, #4
 80006e2:	6013      	str	r3, [r2, #0]

	CanTp_Transmit(0, &msg);
 80006e4:	4903      	ldr	r1, [pc, #12]	; (80006f4 <UDS_Send_Neg_Res+0x44>)
 80006e6:	2000      	movs	r0, #0
 80006e8:	f000 fc82 	bl	8000ff0 <CanTp_Transmit>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200020ac 	.word	0x200020ac

080006f8 <UDS_Tester_Presenter_Server>:




void UDS_Tester_Presenter_Server(void)//Khaled Waleed
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	//globally in server:  there is a timer >= tout { reset timer + return to default (global ssesion flag in server) ask nour}
	//	reset_timer();
	pos_Response.SID = Tester_Representer_Service ;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <UDS_Tester_Presenter_Server+0x2c>)
 80006fe:	223e      	movs	r2, #62	; 0x3e
 8000700:	701a      	strb	r2, [r3, #0]
	pos_Response.DID_Length=0;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <UDS_Tester_Presenter_Server+0x2c>)
 8000704:	2200      	movs	r2, #0
 8000706:	711a      	strb	r2, [r3, #4]
	pos_Response.Data_Length = 0;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <UDS_Tester_Presenter_Server+0x2c>)
 800070a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800070e:	2200      	movs	r2, #0
 8000710:	715a      	strb	r2, [r3, #5]
	pos_Response.SUB_FUNC = -1;
 8000712:	4b04      	ldr	r3, [pc, #16]	; (8000724 <UDS_Tester_Presenter_Server+0x2c>)
 8000714:	22ff      	movs	r2, #255	; 0xff
 8000716:	705a      	strb	r2, [r3, #1]
	UDS_Send_Pos_Res(&pos_Response);
 8000718:	4802      	ldr	r0, [pc, #8]	; (8000724 <UDS_Tester_Presenter_Server+0x2c>)
 800071a:	f7ff ff5b 	bl	80005d4 <UDS_Send_Pos_Res>
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000009c 	.word	0x2000009c

08000728 <reset_timer>:

void reset_timer(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6); // Stop Timer6
 800072c:	4803      	ldr	r0, [pc, #12]	; (800073c <reset_timer+0x14>)
 800072e:	f003 fc37 	bl	8003fa0 <HAL_TIM_Base_Stop_IT>
	TIM6->CNT = 0; // Reset Timer6 counter to 0
 8000732:	4b03      	ldr	r3, [pc, #12]	; (8000740 <reset_timer+0x18>)
 8000734:	2200      	movs	r2, #0
 8000736:	625a      	str	r2, [r3, #36]	; 0x24
	//    HAL_TIM_Base_Start_IT(&htim6); // Start Timer6 again
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20004458 	.word	0x20004458
 8000740:	40001000 	.word	0x40001000

08000744 <start_timer>:

void start_timer(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	//	HAL_TIM_Base_Start(&htim6);
	HAL_TIM_Base_Start_IT(&htim6);
 8000748:	4802      	ldr	r0, [pc, #8]	; (8000754 <start_timer+0x10>)
 800074a:	f003 fbb9 	bl	8003ec0 <HAL_TIM_Base_Start_IT>
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20004458 	.word	0x20004458

08000758 <UDS_Control_Session_Server>:

void UDS_Control_Session_Server(uint8_t *Received)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	uint8_t NRC = 1;
 8000760:	2301      	movs	r3, #1
 8000762:	73fb      	strb	r3, [r7, #15]


	if(Received[2] == DefaultSession || Received[2] == ExtendedSession)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3302      	adds	r3, #2
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d004      	beq.n	8000778 <UDS_Control_Session_Server+0x20>
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3302      	adds	r3, #2
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b03      	cmp	r3, #3
 8000776:	d122      	bne.n	80007be <UDS_Control_Session_Server+0x66>
	{
		global_session = Received[2];
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	789a      	ldrb	r2, [r3, #2]
 800077c:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <UDS_Control_Session_Server+0x80>)
 800077e:	701a      	strb	r2, [r3, #0]
		Control.SID = Received[1];
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	785a      	ldrb	r2, [r3, #1]
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <UDS_Control_Session_Server+0x84>)
 8000786:	701a      	strb	r2, [r3, #0]
		Control.SUB_FUNC = Received[2];
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3302      	adds	r3, #2
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b25a      	sxtb	r2, r3
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <UDS_Control_Session_Server+0x84>)
 8000792:	705a      	strb	r2, [r3, #1]
		Control.DID_Length = 0;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <UDS_Control_Session_Server+0x84>)
 8000796:	2200      	movs	r2, #0
 8000798:	711a      	strb	r2, [r3, #4]
		Control.Data_Length = 0;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <UDS_Control_Session_Server+0x84>)
 800079c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007a0:	2200      	movs	r2, #0
 80007a2:	715a      	strb	r2, [r3, #5]
		UDS_Send_Pos_Res(&Control);
 80007a4:	480d      	ldr	r0, [pc, #52]	; (80007dc <UDS_Control_Session_Server+0x84>)
 80007a6:	f7ff ff15 	bl	80005d4 <UDS_Send_Pos_Res>
		if(Received[2] == ExtendedSession){
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	3302      	adds	r3, #2
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b03      	cmp	r3, #3
 80007b2:	d10d      	bne.n	80007d0 <UDS_Control_Session_Server+0x78>
			reset_timer();
 80007b4:	f7ff ffb8 	bl	8000728 <reset_timer>
			start_timer();
 80007b8:	f7ff ffc4 	bl	8000744 <start_timer>
		if(Received[2] == ExtendedSession){
 80007bc:	e008      	b.n	80007d0 <UDS_Control_Session_Server+0x78>
		}
	}
	else
	{
		UDS_Send_Neg_Res(Received[1], NRC);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	3301      	adds	r3, #1
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	7bfa      	ldrb	r2, [r7, #15]
 80007c6:	4611      	mov	r1, r2
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff71 	bl	80006b0 <UDS_Send_Neg_Res>
	}
}
 80007ce:	bf00      	nop
 80007d0:	bf00      	nop
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000000 	.word	0x20000000
 80007dc:	200010a4 	.word	0x200010a4

080007e0 <Sec_u32GetSeed>:

void Sec_u32GetSeed (void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	Sec_u32SeedValue = HAL_GetTick();
 80007e4:	f001 fb22 	bl	8001e2c <HAL_GetTick>
 80007e8:	4603      	mov	r3, r0
 80007ea:	4a02      	ldr	r2, [pc, #8]	; (80007f4 <Sec_u32GetSeed+0x14>)
 80007ec:	6013      	str	r3, [r2, #0]
	//	printf("%d",Sec_u32SeedValue) ;
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000094 	.word	0x20000094

080007f8 <Sec_u32GetAlgorithm>:

uint32_t Sec_u32GetAlgorithm(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
	return 5 ;
 80007fc:	2305      	movs	r3, #5
}
 80007fe:	4618      	mov	r0, r3
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <Sec_u32GetKey>:

uint32_t Sec_u32GetKey (void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
	uint32_t Local_u32KeyValue = 0 ;
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
	Local_u32KeyValue = Sec_u32SeedValue + Sec_u32GetAlgorithm() ;
 8000812:	f7ff fff1 	bl	80007f8 <Sec_u32GetAlgorithm>
 8000816:	4602      	mov	r2, r0
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <Sec_u32GetKey+0x24>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4413      	add	r3, r2
 800081e:	607b      	str	r3, [r7, #4]
	//	Local_u32KeyValue = 0x01020304 + Sec_u32GetAlgorithm() ;
	return Local_u32KeyValue;
 8000820:	687b      	ldr	r3, [r7, #4]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000094 	.word	0x20000094

08000830 <Sec_uint32SecurityAccess>:


uint8_t Sec_uint32SecurityAccess (PduInfoType * Ptr)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorStates = E_OK ;
 8000838:	2300      	movs	r3, #0
 800083a:	75fb      	strb	r3, [r7, #23]

	if (Ptr->Data[2] == Seed)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	789b      	ldrb	r3, [r3, #2]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d12b      	bne.n	800089c <Sec_uint32SecurityAccess+0x6c>
	{
		/*Generate Seed */
		Sec_u32GetSeed();
 8000844:	f7ff ffcc 	bl	80007e0 <Sec_u32GetSeed>

		/*Send Frame with Positive Response */
		//		Frame_Info Response ;
		pos_Response.SID 		= Security_Service ;
 8000848:	4b3a      	ldr	r3, [pc, #232]	; (8000934 <Sec_uint32SecurityAccess+0x104>)
 800084a:	2227      	movs	r2, #39	; 0x27
 800084c:	701a      	strb	r2, [r3, #0]
		pos_Response.SUB_FUNC	= Seed ;
 800084e:	4b39      	ldr	r3, [pc, #228]	; (8000934 <Sec_uint32SecurityAccess+0x104>)
 8000850:	2201      	movs	r2, #1
 8000852:	705a      	strb	r2, [r3, #1]
		pos_Response.DID_Length=0;
 8000854:	4b37      	ldr	r3, [pc, #220]	; (8000934 <Sec_uint32SecurityAccess+0x104>)
 8000856:	2200      	movs	r2, #0
 8000858:	711a      	strb	r2, [r3, #4]
		pos_Response.Data_Length=4;
 800085a:	4b36      	ldr	r3, [pc, #216]	; (8000934 <Sec_uint32SecurityAccess+0x104>)
 800085c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000860:	2204      	movs	r2, #4
 8000862:	715a      	strb	r2, [r3, #5]
		//		for(int i = 1; i < pos_Response.Data_Length + 1; i++){
		//			pos_Response.Data[i-1] = i;
		//		}
		for(int i =0 ; i< 4; i++)
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	e011      	b.n	800088e <Sec_uint32SecurityAccess+0x5e>
		{
			pos_Response.Data[i] 		=(uint8_t) (Sec_u32SeedValue>>(24-(i*8))) ;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <Sec_uint32SecurityAccess+0x108>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	f1c3 0303 	rsb	r3, r3, #3
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	fa22 f303 	lsr.w	r3, r2, r3
 800087a:	b259      	sxtb	r1, r3
 800087c:	4a2d      	ldr	r2, [pc, #180]	; (8000934 <Sec_uint32SecurityAccess+0x104>)
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	4413      	add	r3, r2
 8000882:	3305      	adds	r3, #5
 8000884:	460a      	mov	r2, r1
 8000886:	701a      	strb	r2, [r3, #0]
		for(int i =0 ; i< 4; i++)
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	3301      	adds	r3, #1
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	2b03      	cmp	r3, #3
 8000892:	ddea      	ble.n	800086a <Sec_uint32SecurityAccess+0x3a>
		}

		UDS_Send_Pos_Res(&pos_Response) ;
 8000894:	4827      	ldr	r0, [pc, #156]	; (8000934 <Sec_uint32SecurityAccess+0x104>)
 8000896:	f7ff fe9d 	bl	80005d4 <UDS_Send_Pos_Res>
 800089a:	e046      	b.n	800092a <Sec_uint32SecurityAccess+0xfa>
	}
	else if (Ptr->Data[2] == Key)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	789b      	ldrb	r3, [r3, #2]
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	d13a      	bne.n	800091a <Sec_uint32SecurityAccess+0xea>
	{
		uint32_t user_key= Ptr->Data[3]<<24 | Ptr->Data[4]<<16 | Ptr->Data[5]<<8 |Ptr->Data[6];
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	78db      	ldrb	r3, [r3, #3]
 80008a8:	061a      	lsls	r2, r3, #24
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	791b      	ldrb	r3, [r3, #4]
 80008ae:	041b      	lsls	r3, r3, #16
 80008b0:	431a      	orrs	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	795b      	ldrb	r3, [r3, #5]
 80008b6:	021b      	lsls	r3, r3, #8
 80008b8:	4313      	orrs	r3, r2
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	7992      	ldrb	r2, [r2, #6]
 80008be:	4313      	orrs	r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]
		/*Check if Key sent is correct or Not */
		if (user_key == Sec_u32GetKey())
 80008c2:	f7ff ffa1 	bl	8000808 <Sec_u32GetKey>
 80008c6:	4602      	mov	r2, r0
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d118      	bne.n	8000900 <Sec_uint32SecurityAccess+0xd0>
		{
			/*Change the state of security */
			Sec_State = Secure ;
 80008ce:	4b1b      	ldr	r3, [pc, #108]	; (800093c <Sec_uint32SecurityAccess+0x10c>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]
			global_sec_flag = Secure;
 80008d4:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <Sec_uint32SecurityAccess+0x110>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
			/*Send Positive Response */
			pos_Response.SID= Ptr->Data[1];
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	785a      	ldrb	r2, [r3, #1]
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <Sec_uint32SecurityAccess+0x104>)
 80008e0:	701a      	strb	r2, [r3, #0]
			pos_Response.SUB_FUNC = Key;
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <Sec_uint32SecurityAccess+0x104>)
 80008e4:	2202      	movs	r2, #2
 80008e6:	705a      	strb	r2, [r3, #1]
			pos_Response.DID_Length = 0;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <Sec_uint32SecurityAccess+0x104>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	711a      	strb	r2, [r3, #4]
			pos_Response.Data_Length = 0;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <Sec_uint32SecurityAccess+0x104>)
 80008f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008f4:	2200      	movs	r2, #0
 80008f6:	715a      	strb	r2, [r3, #5]
			UDS_Send_Pos_Res(&pos_Response);
 80008f8:	480e      	ldr	r0, [pc, #56]	; (8000934 <Sec_uint32SecurityAccess+0x104>)
 80008fa:	f7ff fe6b 	bl	80005d4 <UDS_Send_Pos_Res>
 80008fe:	e014      	b.n	800092a <Sec_uint32SecurityAccess+0xfa>
		}
		else
		{
			Sec_State = Un_Secure ;
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <Sec_uint32SecurityAccess+0x10c>)
 8000902:	2200      	movs	r2, #0
 8000904:	701a      	strb	r2, [r3, #0]
			global_sec_flag = Un_Secure;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <Sec_uint32SecurityAccess+0x110>)
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
			UDS_Send_Neg_Res(Ptr->Data[1] , NRC_sec_key_seed) ;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	785b      	ldrb	r3, [r3, #1]
 8000910:	2128      	movs	r1, #40	; 0x28
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fecc 	bl	80006b0 <UDS_Send_Neg_Res>
 8000918:	e007      	b.n	800092a <Sec_uint32SecurityAccess+0xfa>
		}
	}
	else
	{
		Local_u8ErrorStates = E_NOK ;
 800091a:	2301      	movs	r3, #1
 800091c:	75fb      	strb	r3, [r7, #23]
		UDS_Send_Neg_Res(Ptr->Data[1] , NRC_sub_fun) ;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	785b      	ldrb	r3, [r3, #1]
 8000922:	211e      	movs	r1, #30
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fec3 	bl	80006b0 <UDS_Send_Neg_Res>
	}


	return Local_u8ErrorStates ;
 800092a:	7dfb      	ldrb	r3, [r7, #23]
}
 800092c:	4618      	mov	r0, r3
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	2000009c 	.word	0x2000009c
 8000938:	20000094 	.word	0x20000094
 800093c:	20000098 	.word	0x20000098
 8000940:	20000090 	.word	0x20000090

08000944 <UDS_Read_Data_Server>:


/***************************************************************************************************/
void UDS_Read_Data_Server(uint8_t* data)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	pos_Response.SUB_FUNC = -1;
 800094c:	4b34      	ldr	r3, [pc, #208]	; (8000a20 <UDS_Read_Data_Server+0xdc>)
 800094e:	22ff      	movs	r2, #255	; 0xff
 8000950:	705a      	strb	r2, [r3, #1]
	uint8_t NRC = 2;
 8000952:	2302      	movs	r3, #2
 8000954:	73fb      	strb	r3, [r7, #15]
	//Send +ve responce
	pos_Response.SID = Read_Service ;
 8000956:	4b32      	ldr	r3, [pc, #200]	; (8000a20 <UDS_Read_Data_Server+0xdc>)
 8000958:	2222      	movs	r2, #34	; 0x22
 800095a:	701a      	strb	r2, [r3, #0]
	pos_Response.DID_Length=2;
 800095c:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <UDS_Read_Data_Server+0xdc>)
 800095e:	2202      	movs	r2, #2
 8000960:	711a      	strb	r2, [r3, #4]

	//if DID --> Oil_Temp
	if((data[DID_1] == Oil_Temp_First_byte) && (data[DID_2] == Oil_Temp_Second_byte) )
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3302      	adds	r3, #2
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2bf1      	cmp	r3, #241	; 0xf1
 800096a:	d11e      	bne.n	80009aa <UDS_Read_Data_Server+0x66>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3303      	adds	r3, #3
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b3d      	cmp	r3, #61	; 0x3d
 8000974:	d119      	bne.n	80009aa <UDS_Read_Data_Server+0x66>
	{
		pos_Response.DID[0]=Oil_Temp_First_byte;
 8000976:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <UDS_Read_Data_Server+0xdc>)
 8000978:	22f1      	movs	r2, #241	; 0xf1
 800097a:	709a      	strb	r2, [r3, #2]
		pos_Response.DID[1]=Oil_Temp_Second_byte;
 800097c:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <UDS_Read_Data_Server+0xdc>)
 800097e:	223d      	movs	r2, #61	; 0x3d
 8000980:	70da      	strb	r2, [r3, #3]
		pos_Response.Data[0]=Oil_Temp_var>>8;
 8000982:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <UDS_Read_Data_Server+0xe0>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	0a1b      	lsrs	r3, r3, #8
 8000988:	b25a      	sxtb	r2, r3
 800098a:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <UDS_Read_Data_Server+0xdc>)
 800098c:	715a      	strb	r2, [r3, #5]
		pos_Response.Data[1]=Oil_Temp_var & 0xFF;
 800098e:	4b25      	ldr	r3, [pc, #148]	; (8000a24 <UDS_Read_Data_Server+0xe0>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	b25a      	sxtb	r2, r3
 8000994:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <UDS_Read_Data_Server+0xdc>)
 8000996:	719a      	strb	r2, [r3, #6]
		pos_Response.Data_Length = 2;
 8000998:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <UDS_Read_Data_Server+0xdc>)
 800099a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800099e:	2202      	movs	r2, #2
 80009a0:	715a      	strb	r2, [r3, #5]

		UDS_Send_Pos_Res(&pos_Response);
 80009a2:	481f      	ldr	r0, [pc, #124]	; (8000a20 <UDS_Read_Data_Server+0xdc>)
 80009a4:	f7ff fe16 	bl	80005d4 <UDS_Send_Pos_Res>
 80009a8:	e035      	b.n	8000a16 <UDS_Read_Data_Server+0xd2>
		//	UDS_Send_Pos_Res(Read_Data_Server);
	}//if DID --> Oil_Pressure
	else if((data[DID_1] == Oil_Pressure_First_byte) && (data[DID_2] == Oil_Pressure_Second_byte) )
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3302      	adds	r3, #2
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2bf5      	cmp	r3, #245	; 0xf5
 80009b2:	d12a      	bne.n	8000a0a <UDS_Read_Data_Server+0xc6>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3303      	adds	r3, #3
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b3d      	cmp	r3, #61	; 0x3d
 80009bc:	d125      	bne.n	8000a0a <UDS_Read_Data_Server+0xc6>
	{
		pos_Response.DID[0]=Oil_Pressure_First_byte;
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <UDS_Read_Data_Server+0xdc>)
 80009c0:	22f5      	movs	r2, #245	; 0xf5
 80009c2:	709a      	strb	r2, [r3, #2]
		pos_Response.DID[1]=Oil_Pressure_Second_byte;
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <UDS_Read_Data_Server+0xdc>)
 80009c6:	223d      	movs	r2, #61	; 0x3d
 80009c8:	70da      	strb	r2, [r3, #3]
		pos_Response.Data[0]=Oil_Pressure_var>>24;
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <UDS_Read_Data_Server+0xe4>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	0e1b      	lsrs	r3, r3, #24
 80009d0:	b25a      	sxtb	r2, r3
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <UDS_Read_Data_Server+0xdc>)
 80009d4:	715a      	strb	r2, [r3, #5]
		pos_Response.Data[1]=Oil_Pressure_var>>16;
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <UDS_Read_Data_Server+0xe4>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	0c1b      	lsrs	r3, r3, #16
 80009dc:	b25a      	sxtb	r2, r3
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <UDS_Read_Data_Server+0xdc>)
 80009e0:	719a      	strb	r2, [r3, #6]
		pos_Response.Data[2]=Oil_Pressure_var>>8;
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <UDS_Read_Data_Server+0xe4>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	0a1b      	lsrs	r3, r3, #8
 80009e8:	b25a      	sxtb	r2, r3
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <UDS_Read_Data_Server+0xdc>)
 80009ec:	71da      	strb	r2, [r3, #7]
		pos_Response.Data[3]=Oil_Pressure_var & 0xFF;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <UDS_Read_Data_Server+0xe4>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	b25a      	sxtb	r2, r3
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <UDS_Read_Data_Server+0xdc>)
 80009f6:	721a      	strb	r2, [r3, #8]

		pos_Response.Data_Length = 4;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <UDS_Read_Data_Server+0xdc>)
 80009fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009fe:	2204      	movs	r2, #4
 8000a00:	715a      	strb	r2, [r3, #5]

		UDS_Send_Pos_Res(&pos_Response);
 8000a02:	4807      	ldr	r0, [pc, #28]	; (8000a20 <UDS_Read_Data_Server+0xdc>)
 8000a04:	f7ff fde6 	bl	80005d4 <UDS_Send_Pos_Res>
 8000a08:	e005      	b.n	8000a16 <UDS_Read_Data_Server+0xd2>
		//HAL_UART_Transmit(&huart2, "\r\n", 50, HAL_MAX_DELAY);
	}
	else
	{
		//otherwize: send -ve responce
		UDS_Send_Neg_Res(Read_Service, NRC);
 8000a0a:	7bfb      	ldrb	r3, [r7, #15]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	2022      	movs	r0, #34	; 0x22
 8000a10:	f7ff fe4e 	bl	80006b0 <UDS_Send_Neg_Res>
	}

}
 8000a14:	bf00      	nop
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000009c 	.word	0x2000009c
 8000a24:	20000008 	.word	0x20000008
 8000a28:	20000004 	.word	0x20000004

08000a2c <server_call_back>:

void server_call_back(uint32_t TxPduId, PduInfoType* ptr)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
	PduDataPTR = ptr;
 8000a36:	4a61      	ldr	r2, [pc, #388]	; (8000bbc <server_call_back+0x190>)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	6013      	str	r3, [r2, #0]
	// create flag for check SID this is local bec . every frame i need to check the sid
	uint8_t local_sid_flag = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]

	// this for test only
	//uint8_t ptr->Data[20] = {2 ,Control_Service , 5 };

	// for SID validation
	if (ptr->Data[1] == Control_Service || ptr->Data[1]== Read_Service || ptr->Data[1] == Write_Service || ptr->Data[1] == Security_Service || ptr->Data[1] == Tester_Representer_Service)
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	785b      	ldrb	r3, [r3, #1]
 8000a44:	2b10      	cmp	r3, #16
 8000a46:	d00f      	beq.n	8000a68 <server_call_back+0x3c>
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	785b      	ldrb	r3, [r3, #1]
 8000a4c:	2b22      	cmp	r3, #34	; 0x22
 8000a4e:	d00b      	beq.n	8000a68 <server_call_back+0x3c>
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	785b      	ldrb	r3, [r3, #1]
 8000a54:	2b2e      	cmp	r3, #46	; 0x2e
 8000a56:	d007      	beq.n	8000a68 <server_call_back+0x3c>
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	785b      	ldrb	r3, [r3, #1]
 8000a5c:	2b27      	cmp	r3, #39	; 0x27
 8000a5e:	d003      	beq.n	8000a68 <server_call_back+0x3c>
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	785b      	ldrb	r3, [r3, #1]
 8000a64:	2b3e      	cmp	r3, #62	; 0x3e
 8000a66:	d10e      	bne.n	8000a86 <server_call_back+0x5a>
	{
		// tmam
		reset_timer();
 8000a68:	f7ff fe5e 	bl	8000728 <reset_timer>
		if(global_session != DefaultSession){
 8000a6c:	4b54      	ldr	r3, [pc, #336]	; (8000bc0 <server_call_back+0x194>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d001      	beq.n	8000a7a <server_call_back+0x4e>
			start_timer();
 8000a76:	f7ff fe65 	bl	8000744 <start_timer>
		}
		local_sid_flag = 1;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	73fb      	strb	r3, [r7, #15]
		// this mean the SID not supported
		UDS_Send_Neg_Res(ptr->Data[1],  NRC);
		// go out of isr
		return;
	}
	if (local_sid_flag)
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d10a      	bne.n	8000a9a <server_call_back+0x6e>
 8000a84:	e066      	b.n	8000b54 <server_call_back+0x128>
		uint8_t NRC = NRC_SID;
 8000a86:	2314      	movs	r3, #20
 8000a88:	73bb      	strb	r3, [r7, #14]
		UDS_Send_Neg_Res(ptr->Data[1],  NRC);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	785b      	ldrb	r3, [r3, #1]
 8000a8e:	7bba      	ldrb	r2, [r7, #14]
 8000a90:	4611      	mov	r1, r2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fe0c 	bl	80006b0 <UDS_Send_Neg_Res>
		return;
 8000a98:	e08d      	b.n	8000bb6 <server_call_back+0x18a>
	{
		if (ptr->Data[1] == Control_Service)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	785b      	ldrb	r3, [r3, #1]
 8000a9e:	2b10      	cmp	r3, #16
 8000aa0:	d103      	bne.n	8000aaa <server_call_back+0x7e>
		{
			flag_sub_fun = 1;
 8000aa2:	4b48      	ldr	r3, [pc, #288]	; (8000bc4 <server_call_back+0x198>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
 8000aa8:	e054      	b.n	8000b54 <server_call_back+0x128>
		}
		else if (ptr->Data[1] == Read_Service)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	785b      	ldrb	r3, [r3, #1]
 8000aae:	2b22      	cmp	r3, #34	; 0x22
 8000ab0:	d104      	bne.n	8000abc <server_call_back+0x90>
			// send read function (rad resp as the actual ptr->Data of temp or pressure)
			//	HAL_UART_Transmit(&huart2, (const uint8_t*)" UDS_Read_Data_Server() \r\n", 50, HAL_MAX_DELAY ); // delete ---> after write your func

			//UDS_Read_Data_Server();

			UDS_Read_Data_Server(ptr->Data);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ff45 	bl	8000944 <UDS_Read_Data_Server>
 8000aba:	e04b      	b.n	8000b54 <server_call_back+0x128>

		}
		else if (ptr->Data[1] == Security_Service )
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	785b      	ldrb	r3, [r3, #1]
 8000ac0:	2b27      	cmp	r3, #39	; 0x27
 8000ac2:	d105      	bne.n	8000ad0 <server_call_back+0xa4>

			//		send_ser_sec() ; // send seed

			// (write here +ive resp for security) ------------------------> here

			Sec_uint32SecurityAccess(PduDataPTR);
 8000ac4:	4b3d      	ldr	r3, [pc, #244]	; (8000bbc <server_call_back+0x190>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff feb1 	bl	8000830 <Sec_uint32SecurityAccess>
 8000ace:	e041      	b.n	8000b54 <server_call_back+0x128>
			//			UDS_Send_Pos_Res(&pos_Response) ;
		}


		else if (ptr->Data[1] == Write_Service && global_sec_flag ==1 && global_session == ExtendedSession  )
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	785b      	ldrb	r3, [r3, #1]
 8000ad4:	2b2e      	cmp	r3, #46	; 0x2e
 8000ad6:	d112      	bne.n	8000afe <server_call_back+0xd2>
 8000ad8:	4b3b      	ldr	r3, [pc, #236]	; (8000bc8 <server_call_back+0x19c>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d10d      	bne.n	8000afe <server_call_back+0xd2>
 8000ae2:	4b37      	ldr	r3, [pc, #220]	; (8000bc0 <server_call_back+0x194>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	2b03      	cmp	r3, #3
 8000aea:	d108      	bne.n	8000afe <server_call_back+0xd2>
			//			HAL_UART_Transmit(&huart2, (const uint8_t*)" UDS_Write_Data_Server() \r\n", 50, 100 ); // delete it after put your func

			// ptr->Data write with +ive resp


			UDS_Write_Data_Server(ptr->Data,  ptr->Data[0]);
 8000aec:	683a      	ldr	r2, [r7, #0]
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	4619      	mov	r1, r3
 8000af6:	4610      	mov	r0, r2
 8000af8:	f7ff fd08 	bl	800050c <UDS_Write_Data_Server>
 8000afc:	e02a      	b.n	8000b54 <server_call_back+0x128>
		}
		else if (ptr->Data[1] == Write_Service && global_sec_flag == 0 && global_session == ExtendedSession )
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	785b      	ldrb	r3, [r3, #1]
 8000b02:	2b2e      	cmp	r3, #46	; 0x2e
 8000b04:	d110      	bne.n	8000b28 <server_call_back+0xfc>
 8000b06:	4b30      	ldr	r3, [pc, #192]	; (8000bc8 <server_call_back+0x19c>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d10b      	bne.n	8000b28 <server_call_back+0xfc>
 8000b10:	4b2b      	ldr	r3, [pc, #172]	; (8000bc0 <server_call_back+0x194>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	d106      	bne.n	8000b28 <server_call_back+0xfc>
			//			// send -ive response
			//			//printf("UDS_Write_Data_Server() \n");
			//			HAL_UART_Transmit(&huart2, (const uint8_t*)"UDS_Write_Data_Server() \r\n", 50, 100 ); // delete this after put your func
			// (write here -ive resp for write security ) ------------------------> here

			UDS_Send_Neg_Res(ptr->Data[1], NRC_WRITE_secuirty);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	785b      	ldrb	r3, [r3, #1]
 8000b1e:	210a      	movs	r1, #10
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fdc5 	bl	80006b0 <UDS_Send_Neg_Res>
 8000b26:	e015      	b.n	8000b54 <server_call_back+0x128>

		}
		else if (ptr->Data[1] == Write_Service  && global_session == DefaultSession)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	785b      	ldrb	r3, [r3, #1]
 8000b2c:	2b2e      	cmp	r3, #46	; 0x2e
 8000b2e:	d10b      	bne.n	8000b48 <server_call_back+0x11c>
 8000b30:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <server_call_back+0x194>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d106      	bne.n	8000b48 <server_call_back+0x11c>
		{
			// (write here -ive resp for write session (NRC ) ------------------------> here

			UDS_Send_Neg_Res(ptr->Data[1], NRC_WRITE_defualt);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	785b      	ldrb	r3, [r3, #1]
 8000b3e:	210f      	movs	r1, #15
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fdb5 	bl	80006b0 <UDS_Send_Neg_Res>
 8000b46:	e005      	b.n	8000b54 <server_call_back+0x128>

		}
		else if (ptr->Data[1] == Tester_Representer_Service)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	785b      	ldrb	r3, [r3, #1]
 8000b4c:	2b3e      	cmp	r3, #62	; 0x3e
 8000b4e:	d101      	bne.n	8000b54 <server_call_back+0x128>
		{
			//printf("u are in Tester_Representer_Service\n");
			//			HAL_UART_Transmit(&huart2, (const uint8_t*)" u are in Tester_Representer_Service \r\n", 50, 100 );
			// call the fun of tester Representer
			UDS_Tester_Presenter_Server();
 8000b50:	f7ff fdd2 	bl	80006f8 <UDS_Tester_Presenter_Server>

			// (write here +ive resp for  Tester_Representer_Service) ------------------------> here
		}
	}
	// check sub fun
	if (flag_sub_fun== sub_func_control)
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <server_call_back+0x198>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d12b      	bne.n	8000bb6 <server_call_back+0x18a>
	{
		// true sub fun
		if (ptr->Data[1]== Control_Service && ptr->Data[2] == DefaultSession)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	785b      	ldrb	r3, [r3, #1]
 8000b62:	2b10      	cmp	r3, #16
 8000b64:	d114      	bne.n	8000b90 <server_call_back+0x164>
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	789b      	ldrb	r3, [r3, #2]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d110      	bne.n	8000b90 <server_call_back+0x164>
		{
			// change the state to default
			//	printf(" UDS_Process_Session(void); \n ");
			HAL_UART_Transmit(&huart2, (const uint8_t*)" UDS_Process_Session(void) \r\n", 50, 100 );
 8000b6e:	2364      	movs	r3, #100	; 0x64
 8000b70:	2232      	movs	r2, #50	; 0x32
 8000b72:	4916      	ldr	r1, [pc, #88]	; (8000bcc <server_call_back+0x1a0>)
 8000b74:	4816      	ldr	r0, [pc, #88]	; (8000bd0 <server_call_back+0x1a4>)
 8000b76:	f003 fcf0 	bl	800455a <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart2, (const uint8_t*)" changed to DefaultSession \r\n", 50, 100 );
 8000b7a:	2364      	movs	r3, #100	; 0x64
 8000b7c:	2232      	movs	r2, #50	; 0x32
 8000b7e:	4915      	ldr	r1, [pc, #84]	; (8000bd4 <server_call_back+0x1a8>)
 8000b80:	4813      	ldr	r0, [pc, #76]	; (8000bd0 <server_call_back+0x1a4>)
 8000b82:	f003 fcea 	bl	800455a <HAL_UART_Transmit>
			// (write here +ive resp for  change to def- session ) ------------------------> here


			UDS_Control_Session_Server(ptr->Data);
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fde5 	bl	8000758 <UDS_Control_Session_Server>
 8000b8e:	e012      	b.n	8000bb6 <server_call_back+0x18a>
			//global_session = Default_Session;

		}
		else if (ptr->Data[1] == Control_Service && ptr->Data[2] == ExtendedSession)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	785b      	ldrb	r3, [r3, #1]
 8000b94:	2b10      	cmp	r3, #16
 8000b96:	d108      	bne.n	8000baa <server_call_back+0x17e>
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	789b      	ldrb	r3, [r3, #2]
 8000b9c:	2b03      	cmp	r3, #3
 8000b9e:	d104      	bne.n	8000baa <server_call_back+0x17e>
			//	printf(" changed to ExtendedSession ");
			//	HAL_UART_Transmit(&huart2, (const uint8_t*)" changed to ExtendedSession \r\n", 50, 100 );

			// (write here +ive resp for  change to ext session ) ------------------------> here
			//global_session = Extended_Session;
			UDS_Control_Session_Server(ptr->Data);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fdd8 	bl	8000758 <UDS_Control_Session_Server>
 8000ba8:	e005      	b.n	8000bb6 <server_call_back+0x18a>
		}
		else
		{
			//printf(" not supported ");
			HAL_UART_Transmit(&huart2, (const uint8_t*)" not supported \r\n", 50, 100 );
 8000baa:	2364      	movs	r3, #100	; 0x64
 8000bac:	2232      	movs	r2, #50	; 0x32
 8000bae:	490a      	ldr	r1, [pc, #40]	; (8000bd8 <server_call_back+0x1ac>)
 8000bb0:	4807      	ldr	r0, [pc, #28]	; (8000bd0 <server_call_back+0x1a4>)
 8000bb2:	f003 fcd2 	bl	800455a <HAL_UART_Transmit>

		// error in sub func

	}

}
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200030b4 	.word	0x200030b4
 8000bc0:	20000000 	.word	0x20000000
 8000bc4:	200030b0 	.word	0x200030b0
 8000bc8:	20000090 	.word	0x20000090
 8000bcc:	08006be0 	.word	0x08006be0
 8000bd0:	200044a0 	.word	0x200044a0
 8000bd4:	08006c00 	.word	0x08006c00
 8000bd8:	08006c20 	.word	0x08006c20

08000bdc <HAL_CAN_RxFifo0MsgPendingCallback>:
CAN_RxHeaderTypeDef rxHeader;
PduInfoTRx CanIfPduInfo;
volatile int8_t CanIf_Rx;
Std_ReturnType (*CanTp_Callback)(uint32_t RxPduId, PduInfoTRx* PduInfoPtr) = NULL;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, CanIfPduInfo.Data) != HAL_OK) {
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000be6:	4a09      	ldr	r2, [pc, #36]	; (8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000be8:	2100      	movs	r1, #0
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f001 fc5a 	bl	80024a4 <HAL_CAN_GetRxMessage>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		// Reception error
		Error_Handler();
 8000bf6:	f000 fee3 	bl	80019c0 <Error_Handler>
	}
	CanIf_Rx = 1;
 8000bfa:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	701a      	strb	r2, [r3, #0]
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200030d4 	.word	0x200030d4
 8000c0c:	200030b8 	.word	0x200030b8
 8000c10:	200030e0 	.word	0x200030e0

08000c14 <CanIf_Transmit>:
 *  @brief CAN interface transmit function
 *  @param  PduInfoTRx*		: Pointer to message structure contain (Data, Length)
 *  @param  TxPduId	: PDU ID
 *  @return None
 */
void CanIf_Transmit(uint32_t TxPduId, PduInfoTRx* PduInfoPtr){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;
	if(TxPduId == 0){
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <CanIf_Transmit+0x16>
		txHeader.StdId = 0x100;
 8000c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c28:	613b      	str	r3, [r7, #16]
	}

	txHeader.ExtId = 0x00;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
	txHeader.IDE = CAN_ID_STD;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
	txHeader.RTR = CAN_RTR_DATA;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
	txHeader.DLC = 8;
 8000c36:	2308      	movs	r3, #8
 8000c38:	623b      	str	r3, [r7, #32]
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0);
 8000c3a:	bf00      	nop
 8000c3c:	480b      	ldr	r0, [pc, #44]	; (8000c6c <CanIf_Transmit+0x58>)
 8000c3e:	f001 fbfc 	bl	800243a <HAL_CAN_GetTxMailboxesFreeLevel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d0f9      	beq.n	8000c3c <CanIf_Transmit+0x28>
	if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, PduInfoPtr->Data, &txMailbox) != HAL_OK) {
 8000c48:	683a      	ldr	r2, [r7, #0]
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	f107 0110 	add.w	r1, r7, #16
 8000c52:	4806      	ldr	r0, [pc, #24]	; (8000c6c <CanIf_Transmit+0x58>)
 8000c54:	f001 fb16 	bl	8002284 <HAL_CAN_AddTxMessage>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <CanIf_Transmit+0x4e>
		// Transmission error
		Error_Handler();
 8000c5e:	f000 feaf 	bl	80019c0 <Error_Handler>

	}
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
}
 8000c62:	bf00      	nop
 8000c64:	3728      	adds	r7, #40	; 0x28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20004138 	.word	0x20004138

08000c70 <CanIf_Receive>:
/**
 *  @brief CAN interface receive data
 *  @param  None
 *  @return None
 */
void CanIf_Receive(){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
	uint32_t PDU_ID;
	while(1){
		if(CanIf_Rx){
 8000c76:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <CanIf_Receive+0xc4>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	b25b      	sxtb	r3, r3
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d054      	beq.n	8000d2a <CanIf_Receive+0xba>
			CanIf_Rx = 0;
 8000c80:	4b2c      	ldr	r3, [pc, #176]	; (8000d34 <CanIf_Receive+0xc4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
			CanIfPduInfo.Length = rxHeader.DLC;
 8000c86:	4b2c      	ldr	r3, [pc, #176]	; (8000d38 <CanIf_Receive+0xc8>)
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	4a2c      	ldr	r2, [pc, #176]	; (8000d3c <CanIf_Receive+0xcc>)
 8000c8c:	6093      	str	r3, [r2, #8]
			switch(rxHeader.StdId)
 8000c8e:	4b2a      	ldr	r3, [pc, #168]	; (8000d38 <CanIf_Receive+0xc8>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c96:	d03c      	beq.n	8000d12 <CanIf_Receive+0xa2>
 8000c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c9c:	d83c      	bhi.n	8000d18 <CanIf_Receive+0xa8>
 8000c9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000ca2:	d033      	beq.n	8000d0c <CanIf_Receive+0x9c>
 8000ca4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000ca8:	d836      	bhi.n	8000d18 <CanIf_Receive+0xa8>
 8000caa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000cae:	d02a      	beq.n	8000d06 <CanIf_Receive+0x96>
 8000cb0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000cb4:	d830      	bhi.n	8000d18 <CanIf_Receive+0xa8>
 8000cb6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000cba:	d021      	beq.n	8000d00 <CanIf_Receive+0x90>
 8000cbc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000cc0:	d82a      	bhi.n	8000d18 <CanIf_Receive+0xa8>
 8000cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cc6:	d018      	beq.n	8000cfa <CanIf_Receive+0x8a>
 8000cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ccc:	d824      	bhi.n	8000d18 <CanIf_Receive+0xa8>
 8000cce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000cd2:	d00f      	beq.n	8000cf4 <CanIf_Receive+0x84>
 8000cd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000cd8:	d81e      	bhi.n	8000d18 <CanIf_Receive+0xa8>
 8000cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cde:	d003      	beq.n	8000ce8 <CanIf_Receive+0x78>
 8000ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ce4:	d003      	beq.n	8000cee <CanIf_Receive+0x7e>
 8000ce6:	e017      	b.n	8000d18 <CanIf_Receive+0xa8>
			{
			case 0x100 :PDU_ID = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
			break;
 8000cec:	e014      	b.n	8000d18 <CanIf_Receive+0xa8>
			case 0x200 :PDU_ID = 1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	607b      	str	r3, [r7, #4]
			break;
 8000cf2:	e011      	b.n	8000d18 <CanIf_Receive+0xa8>
			case 0x300 :PDU_ID = 2;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	607b      	str	r3, [r7, #4]
			break;
 8000cf8:	e00e      	b.n	8000d18 <CanIf_Receive+0xa8>
			case 0x400 :PDU_ID = 3;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	607b      	str	r3, [r7, #4]
			break;
 8000cfe:	e00b      	b.n	8000d18 <CanIf_Receive+0xa8>
			case 0x500 :PDU_ID = 4;
 8000d00:	2304      	movs	r3, #4
 8000d02:	607b      	str	r3, [r7, #4]
			break;
 8000d04:	e008      	b.n	8000d18 <CanIf_Receive+0xa8>
			case 0x600 :PDU_ID = 5;
 8000d06:	2305      	movs	r3, #5
 8000d08:	607b      	str	r3, [r7, #4]
			break;
 8000d0a:	e005      	b.n	8000d18 <CanIf_Receive+0xa8>
			case 0x700 :PDU_ID = 6;
 8000d0c:	2306      	movs	r3, #6
 8000d0e:	607b      	str	r3, [r7, #4]
			break;
 8000d10:	e002      	b.n	8000d18 <CanIf_Receive+0xa8>
			case 0x800 :PDU_ID = 7;
 8000d12:	2307      	movs	r3, #7
 8000d14:	607b      	str	r3, [r7, #4]
			break;
 8000d16:	bf00      	nop
			}

			if(CanTp_Callback != NULL)
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <CanIf_Receive+0xd0>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d004      	beq.n	8000d2a <CanIf_Receive+0xba>
			{
				CanTp_Callback(PDU_ID, &CanIfPduInfo);
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <CanIf_Receive+0xd0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4905      	ldr	r1, [pc, #20]	; (8000d3c <CanIf_Receive+0xcc>)
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	4798      	blx	r3
			}
		}
		vTaskDelay(10);
 8000d2a:	200a      	movs	r0, #10
 8000d2c:	f004 feba 	bl	8005aa4 <vTaskDelay>
		if(CanIf_Rx){
 8000d30:	e7a1      	b.n	8000c76 <CanIf_Receive+0x6>
 8000d32:	bf00      	nop
 8000d34:	200030e0 	.word	0x200030e0
 8000d38:	200030b8 	.word	0x200030b8
 8000d3c:	200030d4 	.word	0x200030d4
 8000d40:	200030e4 	.word	0x200030e4

08000d44 <CanIf_setCallback>:
	}
}

void CanIf_setCallback(Std_ReturnType (*IF_Callback)(uint32_t RxPduId, PduInfoTRx* PduInfoPtr)){
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	if(IF_Callback != NULL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d002      	beq.n	8000d58 <CanIf_setCallback+0x14>
	{
		CanTp_Callback = IF_Callback ;
 8000d52:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <CanIf_setCallback+0x20>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6013      	str	r3, [r2, #0]
	}
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	200030e4 	.word	0x200030e4

08000d68 <CanTp_Init>:
volatile int32_t rxCurrentMaxIndex = 0;

volatile uint8_t rxData = 0;
volatile uint8_t rxComplete = 0;

void CanTp_Init(){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	CanIf_setCallback(CanTp_RxIndication);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <CanTp_Init+0x10>)
 8000d6e:	f7ff ffe9 	bl	8000d44 <CanIf_setCallback>
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	08001029 	.word	0x08001029

08000d7c <CanTp_MainFunction>:

void CanTp_MainFunction(){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
	while(1){
		if(CanTp_Rx){
 8000d82:	4b8c      	ldr	r3, [pc, #560]	; (8000fb4 <CanTp_MainFunction+0x238>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	b25b      	sxtb	r3, r3
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d07b      	beq.n	8000e84 <CanTp_MainFunction+0x108>
			CanTp_Rx = 0;
 8000d8c:	4b89      	ldr	r3, [pc, #548]	; (8000fb4 <CanTp_MainFunction+0x238>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
			//Stop the program if the PduID doesn't equal 0 :)
			if(GlobalRxPduId != 0){
 8000d92:	4b89      	ldr	r3, [pc, #548]	; (8000fb8 <CanTp_MainFunction+0x23c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d000      	beq.n	8000d9c <CanTp_MainFunction+0x20>
				while(1);
 8000d9a:	e7fe      	b.n	8000d9a <CanTp_MainFunction+0x1e>
			}
			//Get the frame type from the
			Frame_Type frame_type = CanTp_GetFrameType(GlobalRxPduInfoPtr->Data[0]);
 8000d9c:	4b87      	ldr	r3, [pc, #540]	; (8000fbc <CanTp_MainFunction+0x240>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f95c 	bl	8001060 <CanTp_GetFrameType>
 8000da8:	4603      	mov	r3, r0
 8000daa:	71bb      	strb	r3, [r7, #6]
			//	Frame_Type frame_type = First_Frame

			//Call the correct decoder depending on the frame type
			//extract the length and save it in numberOfRemainingBytesToReceive and connect the data
			switch(frame_type){
 8000dac:	79bb      	ldrb	r3, [r7, #6]
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d84c      	bhi.n	8000e4c <CanTp_MainFunction+0xd0>
 8000db2:	a201      	add	r2, pc, #4	; (adr r2, 8000db8 <CanTp_MainFunction+0x3c>)
 8000db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db8:	08000dc9 	.word	0x08000dc9
 8000dbc:	08000ddb 	.word	0x08000ddb
 8000dc0:	08000e03 	.word	0x08000e03
 8000dc4:	08000e3b 	.word	0x08000e3b
			case Single_Frame:
				CanTp_decodeSingleFrame(GlobalRxPduId, GlobalRxPduInfoPtr);
 8000dc8:	4b7b      	ldr	r3, [pc, #492]	; (8000fb8 <CanTp_MainFunction+0x23c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a7b      	ldr	r2, [pc, #492]	; (8000fbc <CanTp_MainFunction+0x240>)
 8000dce:	6812      	ldr	r2, [r2, #0]
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 fa88 	bl	80012e8 <CanTp_decodeSingleFrame>
				break;
 8000dd8:	e03b      	b.n	8000e52 <CanTp_MainFunction+0xd6>
			case First_Frame:
				CanTp_decodeFirstFrame(GlobalRxPduId, GlobalRxPduInfoPtr);
 8000dda:	4b77      	ldr	r3, [pc, #476]	; (8000fb8 <CanTp_MainFunction+0x23c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a77      	ldr	r2, [pc, #476]	; (8000fbc <CanTp_MainFunction+0x240>)
 8000de0:	6812      	ldr	r2, [r2, #0]
 8000de2:	4611      	mov	r1, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f000 fab5 	bl	8001354 <CanTp_decodeFirstFrame>
				expectedFrameState = FlowControl_Frame_State;
 8000dea:	4b75      	ldr	r3, [pc, #468]	; (8000fc0 <CanTp_MainFunction+0x244>)
 8000dec:	2202      	movs	r2, #2
 8000dee:	701a      	strb	r2, [r3, #0]
				CanTp_Transmit(GlobalRxPduId, (PduInfoType*) GlobalRxPduInfoPtr);
 8000df0:	4b71      	ldr	r3, [pc, #452]	; (8000fb8 <CanTp_MainFunction+0x23c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a71      	ldr	r2, [pc, #452]	; (8000fbc <CanTp_MainFunction+0x240>)
 8000df6:	6812      	ldr	r2, [r2, #0]
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 f8f8 	bl	8000ff0 <CanTp_Transmit>
				break;
 8000e00:	e027      	b.n	8000e52 <CanTp_MainFunction+0xd6>
			case Consecutive_Frame:
				CanTp_decodeConsecutiveFrame(GlobalRxPduId, GlobalRxPduInfoPtr);
 8000e02:	4b6d      	ldr	r3, [pc, #436]	; (8000fb8 <CanTp_MainFunction+0x23c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a6d      	ldr	r2, [pc, #436]	; (8000fbc <CanTp_MainFunction+0x240>)
 8000e08:	6812      	ldr	r2, [r2, #0]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 fad9 	bl	80013c4 <CanTp_decodeConsecutiveFrame>
				if(numberOfConsecutiveFramesToReceive == 0 && numberOfRemainingBytesToReceive > 0){
 8000e12:	4b6c      	ldr	r3, [pc, #432]	; (8000fc4 <CanTp_MainFunction+0x248>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d11a      	bne.n	8000e50 <CanTp_MainFunction+0xd4>
 8000e1a:	4b6b      	ldr	r3, [pc, #428]	; (8000fc8 <CanTp_MainFunction+0x24c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d016      	beq.n	8000e50 <CanTp_MainFunction+0xd4>
					expectedFrameState = FlowControl_Frame_State;
 8000e22:	4b67      	ldr	r3, [pc, #412]	; (8000fc0 <CanTp_MainFunction+0x244>)
 8000e24:	2202      	movs	r2, #2
 8000e26:	701a      	strb	r2, [r3, #0]
					CanTp_Transmit(GlobalRxPduId, (PduInfoType*) GlobalRxPduInfoPtr);
 8000e28:	4b63      	ldr	r3, [pc, #396]	; (8000fb8 <CanTp_MainFunction+0x23c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a63      	ldr	r2, [pc, #396]	; (8000fbc <CanTp_MainFunction+0x240>)
 8000e2e:	6812      	ldr	r2, [r2, #0]
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f8dc 	bl	8000ff0 <CanTp_Transmit>
				}
				break;
 8000e38:	e00a      	b.n	8000e50 <CanTp_MainFunction+0xd4>
			case FlowControl_Frame:
				//adjust the numberOfConsecutiveFramesToSend variable inside a function
				//based on the number of empty buffers available in the other node
				//as indicated in the BS (block size) byte of the flow control frame
				CanTp_decodeFlowControlFrame(GlobalRxPduId, GlobalRxPduInfoPtr);
 8000e3a:	4b5f      	ldr	r3, [pc, #380]	; (8000fb8 <CanTp_MainFunction+0x23c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a5f      	ldr	r2, [pc, #380]	; (8000fbc <CanTp_MainFunction+0x240>)
 8000e40:	6812      	ldr	r2, [r2, #0]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 fb05 	bl	8001454 <CanTp_decodeFlowControlFrame>
				break;
 8000e4a:	e002      	b.n	8000e52 <CanTp_MainFunction+0xd6>
			default:
				break;
 8000e4c:	bf00      	nop
 8000e4e:	e000      	b.n	8000e52 <CanTp_MainFunction+0xd6>
				break;
 8000e50:	bf00      	nop
			}

			if(frame_type == FlowControl_Frame){
 8000e52:	79bb      	ldrb	r3, [r7, #6]
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	f000 80a8 	beq.w	8000faa <CanTp_MainFunction+0x22e>

			}
			else if(numberOfRemainingBytesToReceive == 0){
 8000e5a:	4b5b      	ldr	r3, [pc, #364]	; (8000fc8 <CanTp_MainFunction+0x24c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 80a3 	bne.w	8000faa <CanTp_MainFunction+0x22e>
				if(App_Callback != NULL){
 8000e64:	4b59      	ldr	r3, [pc, #356]	; (8000fcc <CanTp_MainFunction+0x250>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f000 809e 	beq.w	8000faa <CanTp_MainFunction+0x22e>
					currentIndex = 0;
 8000e6e:	4b58      	ldr	r3, [pc, #352]	; (8000fd0 <CanTp_MainFunction+0x254>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	801a      	strh	r2, [r3, #0]
					App_Callback(GlobalRxPduId, &CompletePduInfo);
 8000e74:	4b55      	ldr	r3, [pc, #340]	; (8000fcc <CanTp_MainFunction+0x250>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a4f      	ldr	r2, [pc, #316]	; (8000fb8 <CanTp_MainFunction+0x23c>)
 8000e7a:	6812      	ldr	r2, [r2, #0]
 8000e7c:	4955      	ldr	r1, [pc, #340]	; (8000fd4 <CanTp_MainFunction+0x258>)
 8000e7e:	4610      	mov	r0, r2
 8000e80:	4798      	blx	r3
 8000e82:	e092      	b.n	8000faa <CanTp_MainFunction+0x22e>
				}
			}
		}
		else if(CanTp_Tx){
 8000e84:	4b54      	ldr	r3, [pc, #336]	; (8000fd8 <CanTp_MainFunction+0x25c>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 808d 	beq.w	8000faa <CanTp_MainFunction+0x22e>
			//Stop the program if the PduID doesn't equal 0 :)
			if(GlobalTxPduId != 0){
 8000e90:	4b52      	ldr	r3, [pc, #328]	; (8000fdc <CanTp_MainFunction+0x260>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d000      	beq.n	8000e9a <CanTp_MainFunction+0x11e>
				while(1);
 8000e98:	e7fe      	b.n	8000e98 <CanTp_MainFunction+0x11c>
			}

			Frame_Type frame_type = None;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	71fb      	strb	r3, [r7, #7]
			if(numberOfRemainingBytesToSend == 0 && expectedFrameState == Any_State){
 8000e9e:	4b50      	ldr	r3, [pc, #320]	; (8000fe0 <CanTp_MainFunction+0x264>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d11c      	bne.n	8000ee0 <CanTp_MainFunction+0x164>
 8000ea6:	4b46      	ldr	r3, [pc, #280]	; (8000fc0 <CanTp_MainFunction+0x244>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d118      	bne.n	8000ee0 <CanTp_MainFunction+0x164>
				numberOfRemainingBytesToSend = GlobalTxPduInfoPtr->Length;
 8000eae:	4b4d      	ldr	r3, [pc, #308]	; (8000fe4 <CanTp_MainFunction+0x268>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a49      	ldr	r2, [pc, #292]	; (8000fe0 <CanTp_MainFunction+0x264>)
 8000eba:	6013      	str	r3, [r2, #0]
				CompletePduInfo.Length = numberOfRemainingBytesToSend;
 8000ebc:	4b48      	ldr	r3, [pc, #288]	; (8000fe0 <CanTp_MainFunction+0x264>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a44      	ldr	r2, [pc, #272]	; (8000fd4 <CanTp_MainFunction+0x258>)
 8000ec2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000ec6:	6013      	str	r3, [r2, #0]
				if(GlobalTxPduInfoPtr->Length < 8){
 8000ec8:	4b46      	ldr	r3, [pc, #280]	; (8000fe4 <CanTp_MainFunction+0x268>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b07      	cmp	r3, #7
 8000ed4:	d802      	bhi.n	8000edc <CanTp_MainFunction+0x160>
					frame_type = Single_Frame;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	71fb      	strb	r3, [r7, #7]
 8000eda:	e001      	b.n	8000ee0 <CanTp_MainFunction+0x164>
				}
				else{
					frame_type = First_Frame;
 8000edc:	2301      	movs	r3, #1
 8000ede:	71fb      	strb	r3, [r7, #7]
				}
			}


			if(numberOfRemainingBytesToSend > 0 || expectedFrameState == FlowControl_Frame_State){
 8000ee0:	4b3f      	ldr	r3, [pc, #252]	; (8000fe0 <CanTp_MainFunction+0x264>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d103      	bne.n	8000ef0 <CanTp_MainFunction+0x174>
 8000ee8:	4b35      	ldr	r3, [pc, #212]	; (8000fc0 <CanTp_MainFunction+0x244>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d14e      	bne.n	8000f8e <CanTp_MainFunction+0x212>

				if(expectedFrameState == Consecutive_Frame_State){
 8000ef0:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <CanTp_MainFunction+0x244>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d102      	bne.n	8000efe <CanTp_MainFunction+0x182>
					frame_type = Consecutive_Frame;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	71fb      	strb	r3, [r7, #7]
 8000efc:	e005      	b.n	8000f0a <CanTp_MainFunction+0x18e>
				}
				else if(expectedFrameState == FlowControl_Frame_State){
 8000efe:	4b30      	ldr	r3, [pc, #192]	; (8000fc0 <CanTp_MainFunction+0x244>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d101      	bne.n	8000f0a <CanTp_MainFunction+0x18e>
					frame_type = FlowControl_Frame;
 8000f06:	2303      	movs	r3, #3
 8000f08:	71fb      	strb	r3, [r7, #7]
				}

				//Call the right encoder function according to the frame type
				//Make sure to adjust the numberOfRemainingBytesToSend variable to know if all the data has been sent
				//Also make sure to call the CanIf_Transmit method at the end of these functions.
				switch(frame_type){
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	2b03      	cmp	r3, #3
 8000f0e:	d83d      	bhi.n	8000f8c <CanTp_MainFunction+0x210>
 8000f10:	a201      	add	r2, pc, #4	; (adr r2, 8000f18 <CanTp_MainFunction+0x19c>)
 8000f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f16:	bf00      	nop
 8000f18:	08000f29 	.word	0x08000f29
 8000f1c:	08000f3b 	.word	0x08000f3b
 8000f20:	08000f51 	.word	0x08000f51
 8000f24:	08000f7b 	.word	0x08000f7b
				case Single_Frame:
					CanTp_encodeSingleFrame(GlobalTxPduId, GlobalTxPduInfoPtr);
 8000f28:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <CanTp_MainFunction+0x260>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a2d      	ldr	r2, [pc, #180]	; (8000fe4 <CanTp_MainFunction+0x268>)
 8000f2e:	6812      	ldr	r2, [r2, #0]
 8000f30:	4611      	mov	r1, r2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f8ba 	bl	80010ac <CanTp_encodeSingleFrame>
					break;
 8000f38:	e029      	b.n	8000f8e <CanTp_MainFunction+0x212>
				case First_Frame:
					CanTp_encodeFirstFrame(GlobalTxPduId, GlobalTxPduInfoPtr);
 8000f3a:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <CanTp_MainFunction+0x260>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a29      	ldr	r2, [pc, #164]	; (8000fe4 <CanTp_MainFunction+0x268>)
 8000f40:	6812      	ldr	r2, [r2, #0]
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 f8fb 	bl	8001140 <CanTp_encodeFirstFrame>
					frame_type = None;
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	71fb      	strb	r3, [r7, #7]
					break;
 8000f4e:	e01e      	b.n	8000f8e <CanTp_MainFunction+0x212>
				case Consecutive_Frame:
					if(numberOfConsecutiveFramesToSend > 0){
 8000f50:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <CanTp_MainFunction+0x26c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00d      	beq.n	8000f74 <CanTp_MainFunction+0x1f8>
						numberOfConsecutiveFramesToSend--;
 8000f58:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <CanTp_MainFunction+0x26c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	4a22      	ldr	r2, [pc, #136]	; (8000fe8 <CanTp_MainFunction+0x26c>)
 8000f60:	6013      	str	r3, [r2, #0]
						CanTp_encodeConsecutiveFrame(GlobalTxPduId, GlobalTxPduInfoPtr);
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <CanTp_MainFunction+0x260>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a1f      	ldr	r2, [pc, #124]	; (8000fe4 <CanTp_MainFunction+0x268>)
 8000f68:	6812      	ldr	r2, [r2, #0]
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 f927 	bl	80011c0 <CanTp_encodeConsecutiveFrame>
					}
					else{
						frame_type = None;
						//wait for flow control to reach CanTp_RxIndication in order to change numberOfConsecutiveFramesToSend variable
					}
					break;
 8000f72:	e00c      	b.n	8000f8e <CanTp_MainFunction+0x212>
						frame_type = None;
 8000f74:	2304      	movs	r3, #4
 8000f76:	71fb      	strb	r3, [r7, #7]
					break;
 8000f78:	e009      	b.n	8000f8e <CanTp_MainFunction+0x212>
				case FlowControl_Frame:
					//Check the availableBuffers variable (in our case it's the size of the receive array)
					CanTp_encodeFlowControlFrame(GlobalTxPduId, GlobalTxPduInfoPtr);
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <CanTp_MainFunction+0x260>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a19      	ldr	r2, [pc, #100]	; (8000fe4 <CanTp_MainFunction+0x268>)
 8000f80:	6812      	ldr	r2, [r2, #0]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 f981 	bl	800128c <CanTp_encodeFlowControlFrame>
					break;
 8000f8a:	e000      	b.n	8000f8e <CanTp_MainFunction+0x212>
				default:
					break;
 8000f8c:	bf00      	nop
				}
			}

			if(numberOfRemainingBytesToSend == 0){
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <CanTp_MainFunction+0x264>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d109      	bne.n	8000faa <CanTp_MainFunction+0x22e>
				//Reset the expected frame
				expectedFrameState = Any_State;
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <CanTp_MainFunction+0x244>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
				currentOffset = -1;
 8000f9c:	4b13      	ldr	r3, [pc, #76]	; (8000fec <CanTp_MainFunction+0x270>)
 8000f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa2:	601a      	str	r2, [r3, #0]
				CanTp_Tx = 0;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <CanTp_MainFunction+0x25c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
			}
		}
		vTaskDelay(100);
 8000faa:	2064      	movs	r0, #100	; 0x64
 8000fac:	f004 fd7a 	bl	8005aa4 <vTaskDelay>
		if(CanTp_Rx){
 8000fb0:	e6e7      	b.n	8000d82 <CanTp_MainFunction+0x6>
 8000fb2:	bf00      	nop
 8000fb4:	2000412c 	.word	0x2000412c
 8000fb8:	20004130 	.word	0x20004130
 8000fbc:	2000411c 	.word	0x2000411c
 8000fc0:	200030fc 	.word	0x200030fc
 8000fc4:	200030ec 	.word	0x200030ec
 8000fc8:	200030f4 	.word	0x200030f4
 8000fcc:	200030f8 	.word	0x200030f8
 8000fd0:	20004126 	.word	0x20004126
 8000fd4:	20003118 	.word	0x20003118
 8000fd8:	2000412d 	.word	0x2000412d
 8000fdc:	20004134 	.word	0x20004134
 8000fe0:	200030f0 	.word	0x200030f0
 8000fe4:	20004120 	.word	0x20004120
 8000fe8:	200030e8 	.word	0x200030e8
 8000fec:	20000010 	.word	0x20000010

08000ff0 <CanTp_Transmit>:
	}
}

Std_ReturnType CanTp_Transmit(uint32_t TxPduId, PduInfoType* PduInfoPtr){
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
	GlobalTxPduInfoPtr = PduInfoPtr;
 8000ffa:	4a08      	ldr	r2, [pc, #32]	; (800101c <CanTp_Transmit+0x2c>)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	6013      	str	r3, [r2, #0]
	GlobalTxPduId = TxPduId;
 8001000:	4a07      	ldr	r2, [pc, #28]	; (8001020 <CanTp_Transmit+0x30>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
	CanTp_Tx = 1;
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <CanTp_Transmit+0x34>)
 8001008:	2201      	movs	r2, #1
 800100a:	701a      	strb	r2, [r3, #0]
	return E_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20004120 	.word	0x20004120
 8001020:	20004134 	.word	0x20004134
 8001024:	2000412d 	.word	0x2000412d

08001028 <CanTp_RxIndication>:

Std_ReturnType CanTp_RxIndication (uint32_t RxPduId, PduInfoTRx* PduInfoPtr){
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
	GlobalRxPduInfoPtr = PduInfoPtr;
 8001032:	4a08      	ldr	r2, [pc, #32]	; (8001054 <CanTp_RxIndication+0x2c>)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	6013      	str	r3, [r2, #0]
	GlobalRxPduId = RxPduId;
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <CanTp_RxIndication+0x30>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6013      	str	r3, [r2, #0]
	CanTp_Rx = 1;
 800103e:	4b07      	ldr	r3, [pc, #28]	; (800105c <CanTp_RxIndication+0x34>)
 8001040:	2201      	movs	r2, #1
 8001042:	701a      	strb	r2, [r3, #0]
	return E_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	2000411c 	.word	0x2000411c
 8001058:	20004130 	.word	0x20004130
 800105c:	2000412c 	.word	0x2000412c

08001060 <CanTp_GetFrameType>:

Frame_Type CanTp_GetFrameType(uint8_t PCI){
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
	//Switch case on the PCI to determine the frame type
	PCI >>= 4;
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	091b      	lsrs	r3, r3, #4
 800106e:	71fb      	strb	r3, [r7, #7]
	if(PCI < 4){
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2b03      	cmp	r3, #3
 8001074:	d801      	bhi.n	800107a <CanTp_GetFrameType+0x1a>
		return (Frame_Type) PCI;
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	e000      	b.n	800107c <CanTp_GetFrameType+0x1c>
	}
	else{
		return None;
 800107a:	2304      	movs	r3, #4
	}
}
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <CanTp_setCallback>:

void CanTp_setCallback(void (*PTF)(uint32_t TxPduId, PduInfoType* PduInfoPtr)){
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	if(PTF != NULL){
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d002      	beq.n	800109c <CanTp_setCallback+0x14>
		App_Callback = PTF;
 8001096:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <CanTp_setCallback+0x20>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6013      	str	r3, [r2, #0]
	}
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	200030f8 	.word	0x200030f8

080010ac <CanTp_encodeSingleFrame>:


void CanTp_encodeSingleFrame(uint32_t TxPduId, PduInfoType* PduInfoPtr){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	//	if (PduInfoPtr == NULL ) {
	//		return E_NOK; // Return E_NOK for NULL pointer
	//	}

	// Ensure the data length does not exceed the maximum payload length
	uint32_t dataLength = PduInfoPtr->Length;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	60bb      	str	r3, [r7, #8]
	EncodedPduInfo.Length = PduInfoPtr->Length;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <CanTp_encodeSingleFrame+0x8c>)
 80010ca:	6093      	str	r3, [r2, #8]
	numberOfRemainingBytesToSend -= dataLength;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <CanTp_encodeSingleFrame+0x90>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	4a19      	ldr	r2, [pc, #100]	; (800113c <CanTp_encodeSingleFrame+0x90>)
 80010d6:	6013      	str	r3, [r2, #0]
	//	if (dataLength > CAN_MAX_PAYLOAD_LENGTH) {
	//		return E_NOK; // Return E_NOK for data length exceeding CAN payload length
	//	}

	// The first byte of the CAN frame is reserved for PCI (Protocol Control Information)
	EncodedPduInfo.Data[0] = 0x00 | (dataLength & 0x0F); // PCI is 0x0N where N is the length of the data
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	f003 030f 	and.w	r3, r3, #15
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <CanTp_encodeSingleFrame+0x8c>)
 80010e4:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	// Copy the data from PduInfoType to the CAN frame manually, starting from the second byte
	for ( i = 0; i < dataLength; i++) {
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	e00a      	b.n	8001102 <CanTp_encodeSingleFrame+0x56>
		EncodedPduInfo.Data[i + 1] = PduInfoPtr->Data[i];
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	3301      	adds	r3, #1
 80010f0:	6839      	ldr	r1, [r7, #0]
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	440a      	add	r2, r1
 80010f6:	7811      	ldrb	r1, [r2, #0]
 80010f8:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <CanTp_encodeSingleFrame+0x8c>)
 80010fa:	54d1      	strb	r1, [r2, r3]
	for ( i = 0; i < dataLength; i++) {
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	3301      	adds	r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	429a      	cmp	r2, r3
 8001108:	d3f0      	bcc.n	80010ec <CanTp_encodeSingleFrame+0x40>
	}

	// Fill the rest of the frame with zeros if necessary
	for (i = dataLength + 1; i < CAN_FRAME_LENGTH; i++) {
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	3301      	adds	r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	e007      	b.n	8001122 <CanTp_encodeSingleFrame+0x76>
		EncodedPduInfo.Data[i] = 0;
 8001112:	4a09      	ldr	r2, [pc, #36]	; (8001138 <CanTp_encodeSingleFrame+0x8c>)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4413      	add	r3, r2
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
	for (i = dataLength + 1; i < CAN_FRAME_LENGTH; i++) {
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	3301      	adds	r3, #1
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2b07      	cmp	r3, #7
 8001126:	d9f4      	bls.n	8001112 <CanTp_encodeSingleFrame+0x66>
	}

	CanIf_Transmit(TxPduId, &EncodedPduInfo);
 8001128:	4903      	ldr	r1, [pc, #12]	; (8001138 <CanTp_encodeSingleFrame+0x8c>)
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff fd72 	bl	8000c14 <CanIf_Transmit>
}
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20003100 	.word	0x20003100
 800113c:	200030f0 	.word	0x200030f0

08001140 <CanTp_encodeFirstFrame>:
void CanTp_encodeFirstFrame(uint32_t TxPduId, PduInfoType* PduInfoPtr){
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
	/*** Local Variables ****/
	uint8_t Counter=0;
 800114a:	2300      	movs	r3, #0
 800114c:	75fb      	strb	r3, [r7, #23]
	PduInfoTRx EncodedPduInfo ;
	/************/

	// assume that data is [0x1 0x2 0x3 0x4 0x5 0x6 0x7 0x8 0x9 0xA]
	EncodedPduInfo.Data[0] = (0x01 <<4 ) | ((PduInfoPtr->Length)>>8 & 0x0F); // First Frame Should be 10 A 0x1 0x2 0x3 0x4 0x5 0x6
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	0a1b      	lsrs	r3, r3, #8
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	b2db      	uxtb	r3, r3
 8001160:	f043 0310 	orr.w	r3, r3, #16
 8001164:	b2db      	uxtb	r3, r3
 8001166:	723b      	strb	r3, [r7, #8]
	EncodedPduInfo.Data[1] = (PduInfoPtr->Length)& 0xFF;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	727b      	strb	r3, [r7, #9]

	// Form First Frame
	for(Counter=2;Counter<8;Counter++)
 8001174:	2302      	movs	r3, #2
 8001176:	75fb      	strb	r3, [r7, #23]
 8001178:	e00b      	b.n	8001192 <CanTp_encodeFirstFrame+0x52>
	{
		EncodedPduInfo.Data[Counter]=PduInfoPtr->Data[Counter - 2];
 800117a:	7dfb      	ldrb	r3, [r7, #23]
 800117c:	1e9a      	subs	r2, r3, #2
 800117e:	7dfb      	ldrb	r3, [r7, #23]
 8001180:	6839      	ldr	r1, [r7, #0]
 8001182:	5c8a      	ldrb	r2, [r1, r2]
 8001184:	3318      	adds	r3, #24
 8001186:	443b      	add	r3, r7
 8001188:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(Counter=2;Counter<8;Counter++)
 800118c:	7dfb      	ldrb	r3, [r7, #23]
 800118e:	3301      	adds	r3, #1
 8001190:	75fb      	strb	r3, [r7, #23]
 8001192:	7dfb      	ldrb	r3, [r7, #23]
 8001194:	2b07      	cmp	r3, #7
 8001196:	d9f0      	bls.n	800117a <CanTp_encodeFirstFrame+0x3a>
	}

	/** Call CanIF_Transmit Function**/
	numberOfRemainingBytesToSend = (PduInfoPtr->Length - 6);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3b06      	subs	r3, #6
 80011a2:	4a06      	ldr	r2, [pc, #24]	; (80011bc <CanTp_encodeFirstFrame+0x7c>)
 80011a4:	6013      	str	r3, [r2, #0]
	CanIf_Transmit(TxPduId, &EncodedPduInfo);
 80011a6:	f107 0308 	add.w	r3, r7, #8
 80011aa:	4619      	mov	r1, r3
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff fd31 	bl	8000c14 <CanIf_Transmit>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200030f0 	.word	0x200030f0

080011c0 <CanTp_encodeConsecutiveFrame>:
void CanTp_encodeConsecutiveFrame(uint32_t TxPduId, PduInfoType* PduInfoPtr){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]
	EncodedPduInfo.Length = numberOfRemainingBytesToSend > 7 ? 7 : numberOfRemainingBytesToSend;
 80011ce:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <CanTp_encodeConsecutiveFrame+0xb8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b07      	cmp	r3, #7
 80011d4:	d802      	bhi.n	80011dc <CanTp_encodeConsecutiveFrame+0x1c>
 80011d6:	4b28      	ldr	r3, [pc, #160]	; (8001278 <CanTp_encodeConsecutiveFrame+0xb8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	e000      	b.n	80011de <CanTp_encodeConsecutiveFrame+0x1e>
 80011dc:	2307      	movs	r3, #7
 80011de:	4a27      	ldr	r2, [pc, #156]	; (800127c <CanTp_encodeConsecutiveFrame+0xbc>)
 80011e0:	6093      	str	r3, [r2, #8]
	EncodedPduInfo.Data[0]=(0x02 << 4) | ConsecSN;
 80011e2:	4b27      	ldr	r3, [pc, #156]	; (8001280 <CanTp_encodeConsecutiveFrame+0xc0>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	f043 0320 	orr.w	r3, r3, #32
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b23      	ldr	r3, [pc, #140]	; (800127c <CanTp_encodeConsecutiveFrame+0xbc>)
 80011f0:	701a      	strb	r2, [r3, #0]

	currentOffset = startOffset + ConsecSN * 7;
 80011f2:	4b23      	ldr	r3, [pc, #140]	; (8001280 <CanTp_encodeConsecutiveFrame+0xc0>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	461a      	mov	r2, r3
 80011fa:	4613      	mov	r3, r2
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	1a9a      	subs	r2, r3, r2
 8001200:	4b20      	ldr	r3, [pc, #128]	; (8001284 <CanTp_encodeConsecutiveFrame+0xc4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4413      	add	r3, r2
 8001206:	4a20      	ldr	r2, [pc, #128]	; (8001288 <CanTp_encodeConsecutiveFrame+0xc8>)
 8001208:	6013      	str	r3, [r2, #0]

	for(i=0 ; i < EncodedPduInfo.Length ; i++)
 800120a:	2300      	movs	r3, #0
 800120c:	73fb      	strb	r3, [r7, #15]
 800120e:	e00c      	b.n	800122a <CanTp_encodeConsecutiveFrame+0x6a>
	{
		EncodedPduInfo.Data[i+1] = PduInfoPtr->Data[i + currentOffset];
 8001210:	7bfa      	ldrb	r2, [r7, #15]
 8001212:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <CanTp_encodeConsecutiveFrame+0xc8>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	441a      	add	r2, r3
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	3301      	adds	r3, #1
 800121c:	6839      	ldr	r1, [r7, #0]
 800121e:	5c89      	ldrb	r1, [r1, r2]
 8001220:	4a16      	ldr	r2, [pc, #88]	; (800127c <CanTp_encodeConsecutiveFrame+0xbc>)
 8001222:	54d1      	strb	r1, [r2, r3]
	for(i=0 ; i < EncodedPduInfo.Length ; i++)
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	3301      	adds	r3, #1
 8001228:	73fb      	strb	r3, [r7, #15]
 800122a:	7bfa      	ldrb	r2, [r7, #15]
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <CanTp_encodeConsecutiveFrame+0xbc>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	429a      	cmp	r2, r3
 8001232:	d3ed      	bcc.n	8001210 <CanTp_encodeConsecutiveFrame+0x50>
	}

	ConsecSN++;
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <CanTp_encodeConsecutiveFrame+0xc0>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	3301      	adds	r3, #1
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <CanTp_encodeConsecutiveFrame+0xc0>)
 8001240:	701a      	strb	r2, [r3, #0]
	if(ConsecSN > 0xF){
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <CanTp_encodeConsecutiveFrame+0xc0>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b0f      	cmp	r3, #15
 800124a:	d906      	bls.n	800125a <CanTp_encodeConsecutiveFrame+0x9a>
		startOffset = currentOffset;
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <CanTp_encodeConsecutiveFrame+0xc8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0c      	ldr	r2, [pc, #48]	; (8001284 <CanTp_encodeConsecutiveFrame+0xc4>)
 8001252:	6013      	str	r3, [r2, #0]
		ConsecSN = 0;
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <CanTp_encodeConsecutiveFrame+0xc0>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
	}
	numberOfRemainingBytesToSend -= EncodedPduInfo.Length;
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <CanTp_encodeConsecutiveFrame+0xb8>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4b07      	ldr	r3, [pc, #28]	; (800127c <CanTp_encodeConsecutiveFrame+0xbc>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <CanTp_encodeConsecutiveFrame+0xb8>)
 8001266:	6013      	str	r3, [r2, #0]
	CanIf_Transmit(TxPduId, &EncodedPduInfo);
 8001268:	4904      	ldr	r1, [pc, #16]	; (800127c <CanTp_encodeConsecutiveFrame+0xbc>)
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff fcd2 	bl	8000c14 <CanIf_Transmit>
}
 8001270:	bf00      	nop
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	200030f0 	.word	0x200030f0
 800127c:	20003100 	.word	0x20003100
 8001280:	20004124 	.word	0x20004124
 8001284:	20004128 	.word	0x20004128
 8001288:	20000010 	.word	0x20000010

0800128c <CanTp_encodeFlowControlFrame>:
void CanTp_encodeFlowControlFrame(uint32_t TxPduId, PduInfoType* PduInfoPtr){
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
	// Initialize the flow control frame parameters
	// Byte 0: Flow Status (0x30 for continue to send, 0x31 for wait, 0x32 for overflow/abort)
	// Byte 1: Block Size (0 for continuous sending without waiting for flow control)
	// Byte 2: Separation Time (ST, in milliseconds, 0-127, 241-249 are valid values)

	EncodedPduInfo.Data[0] = 0x30;  // Flow Status: Continue to send (CTS)
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <CanTp_encodeFlowControlFrame+0x50>)
 8001298:	2230      	movs	r2, #48	; 0x30
 800129a:	701a      	strb	r2, [r3, #0]
	EncodedPduInfo.Data[1] = availableBuffers;  // Block Size: 0 (no blocks)
 800129c:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <CanTp_encodeFlowControlFrame+0x54>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <CanTp_encodeFlowControlFrame+0x50>)
 80012a4:	705a      	strb	r2, [r3, #1]
	EncodedPduInfo.Data[2] = 0x00;  // Separation Time: 0 ms (no delay)
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <CanTp_encodeFlowControlFrame+0x50>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	709a      	strb	r2, [r3, #2]

	// The remaining bytes can be set to 0
	for (uint8_t i = 3; i < 8; i++) {
 80012ac:	2303      	movs	r3, #3
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	e006      	b.n	80012c0 <CanTp_encodeFlowControlFrame+0x34>
		EncodedPduInfo.Data[i] = 0x00;
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	4a09      	ldr	r2, [pc, #36]	; (80012dc <CanTp_encodeFlowControlFrame+0x50>)
 80012b6:	2100      	movs	r1, #0
 80012b8:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 3; i < 8; i++) {
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	3301      	adds	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	2b07      	cmp	r3, #7
 80012c4:	d9f5      	bls.n	80012b2 <CanTp_encodeFlowControlFrame+0x26>
	}

	// Set the length of the flow control frame
	//    EncodedPduInfo.Length = 3;
	ConsecSN = 1;
 80012c6:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <CanTp_encodeFlowControlFrame+0x58>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
	// Use CanIf_Transmit to send the flow control frame
	CanIf_Transmit(TxPduId, &EncodedPduInfo);
 80012cc:	4903      	ldr	r1, [pc, #12]	; (80012dc <CanTp_encodeFlowControlFrame+0x50>)
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff fca0 	bl	8000c14 <CanIf_Transmit>
}
 80012d4:	bf00      	nop
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20003100 	.word	0x20003100
 80012e0:	2000000c 	.word	0x2000000c
 80012e4:	20004124 	.word	0x20004124

080012e8 <CanTp_decodeSingleFrame>:

void CanTp_decodeSingleFrame(uint32_t RxPduId, PduInfoTRx* PduInfoPtr){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
	// Extract the data length from the first byte of the CAN frame
	uint32_t dataLength = PduInfoPtr->Data[0] & 0x0F;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	60bb      	str	r3, [r7, #8]
	numberOfRemainingBytesToReceive = dataLength;
 80012fc:	4a12      	ldr	r2, [pc, #72]	; (8001348 <CanTp_decodeSingleFrame+0x60>)
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	6013      	str	r3, [r2, #0]
	CompletePduInfo.Length = numberOfRemainingBytesToReceive;
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <CanTp_decodeSingleFrame+0x60>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a11      	ldr	r2, [pc, #68]	; (800134c <CanTp_decodeSingleFrame+0x64>)
 8001308:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800130c:	6013      	str	r3, [r2, #0]
	int i;
	// Allocate memory for the data in the PduInfoTRx struct
	for ( i = 0; i < dataLength; i++) {
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	e00b      	b.n	800132c <CanTp_decodeSingleFrame+0x44>
		DecodedPduInfo.Data[i] = PduInfoPtr->Data[i+1];
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3301      	adds	r3, #1
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	5cd1      	ldrb	r1, [r2, r3]
 800131c:	4a0c      	ldr	r2, [pc, #48]	; (8001350 <CanTp_decodeSingleFrame+0x68>)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4413      	add	r3, r2
 8001322:	460a      	mov	r2, r1
 8001324:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < dataLength; i++) {
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3301      	adds	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	429a      	cmp	r2, r3
 8001332:	d8ef      	bhi.n	8001314 <CanTp_decodeSingleFrame+0x2c>
	//		DecodedPduInfo.Length = 0;
	//		return DecodedPduInfo;
	//	}

	// Set the length in the PduInfoType struct
	DecodedPduInfo.Length = dataLength;
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <CanTp_decodeSingleFrame+0x68>)
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	6093      	str	r3, [r2, #8]

	CanTp_ConnectData(&DecodedPduInfo);
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <CanTp_decodeSingleFrame+0x68>)
 800133c:	f000 f8c4 	bl	80014c8 <CanTp_ConnectData>
}
 8001340:	bf00      	nop
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200030f4 	.word	0x200030f4
 800134c:	20003118 	.word	0x20003118
 8001350:	2000310c 	.word	0x2000310c

08001354 <CanTp_decodeFirstFrame>:
void CanTp_decodeFirstFrame(uint32_t RxPduId, PduInfoTRx* PduInfoPtr){
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
	numberOfRemainingBytesToReceive = ((PduInfoPtr->Data[0] & 0x0F) << 8) | PduInfoPtr->Data[1];
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	7852      	ldrb	r2, [r2, #1]
 800136c:	4313      	orrs	r3, r2
 800136e:	461a      	mov	r2, r3
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <CanTp_decodeFirstFrame+0x64>)
 8001372:	601a      	str	r2, [r3, #0]
	CompletePduInfo.Length = numberOfRemainingBytesToReceive;
 8001374:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <CanTp_decodeFirstFrame+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a10      	ldr	r2, [pc, #64]	; (80013bc <CanTp_decodeFirstFrame+0x68>)
 800137a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800137e:	6013      	str	r3, [r2, #0]
	DecodedPduInfo.Length=6;
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <CanTp_decodeFirstFrame+0x6c>)
 8001382:	2206      	movs	r2, #6
 8001384:	609a      	str	r2, [r3, #8]
	uint8_t Counter=0;
 8001386:	2300      	movs	r3, #0
 8001388:	73fb      	strb	r3, [r7, #15]

	for(Counter=0;Counter<8;Counter++)
 800138a:	2300      	movs	r3, #0
 800138c:	73fb      	strb	r3, [r7, #15]
 800138e:	e009      	b.n	80013a4 <CanTp_decodeFirstFrame+0x50>
	{
		DecodedPduInfo.Data[Counter]=PduInfoPtr->Data[Counter+2];
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	1c9a      	adds	r2, r3, #2
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	6839      	ldr	r1, [r7, #0]
 8001398:	5c89      	ldrb	r1, [r1, r2]
 800139a:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <CanTp_decodeFirstFrame+0x6c>)
 800139c:	54d1      	strb	r1, [r2, r3]
	for(Counter=0;Counter<8;Counter++)
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	3301      	adds	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	2b07      	cmp	r3, #7
 80013a8:	d9f2      	bls.n	8001390 <CanTp_decodeFirstFrame+0x3c>
	}
	CanTp_ConnectData(&DecodedPduInfo);
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <CanTp_decodeFirstFrame+0x6c>)
 80013ac:	f000 f88c 	bl	80014c8 <CanTp_ConnectData>
}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200030f4 	.word	0x200030f4
 80013bc:	20003118 	.word	0x20003118
 80013c0:	2000310c 	.word	0x2000310c

080013c4 <CanTp_decodeConsecutiveFrame>:
void CanTp_decodeConsecutiveFrame(uint32_t RxPduId, PduInfoTRx* PduInfoPtr){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	73fb      	strb	r3, [r7, #15]
	DecodedPduInfo.Length = numberOfRemainingBytesToReceive > 7 ? 7 : numberOfRemainingBytesToReceive;
 80013d2:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <CanTp_decodeConsecutiveFrame+0x84>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b07      	cmp	r3, #7
 80013d8:	d802      	bhi.n	80013e0 <CanTp_decodeConsecutiveFrame+0x1c>
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <CanTp_decodeConsecutiveFrame+0x84>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	e000      	b.n	80013e2 <CanTp_decodeConsecutiveFrame+0x1e>
 80013e0:	2307      	movs	r3, #7
 80013e2:	4a1a      	ldr	r2, [pc, #104]	; (800144c <CanTp_decodeConsecutiveFrame+0x88>)
 80013e4:	6093      	str	r3, [r2, #8]
	if(ConsecSN == (PduInfoPtr->Data[0] & 0x0F)){
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <CanTp_decodeConsecutiveFrame+0x8c>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	461a      	mov	r2, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d122      	bne.n	8001440 <CanTp_decodeConsecutiveFrame+0x7c>
		for(i=0 ; i < DecodedPduInfo.Length ; i++)
 80013fa:	2300      	movs	r3, #0
 80013fc:	73fb      	strb	r3, [r7, #15]
 80013fe:	e009      	b.n	8001414 <CanTp_decodeConsecutiveFrame+0x50>
		{
			DecodedPduInfo.Data[i] = PduInfoPtr->Data[i+1];
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	6839      	ldr	r1, [r7, #0]
 8001408:	5c89      	ldrb	r1, [r1, r2]
 800140a:	4a10      	ldr	r2, [pc, #64]	; (800144c <CanTp_decodeConsecutiveFrame+0x88>)
 800140c:	54d1      	strb	r1, [r2, r3]
		for(i=0 ; i < DecodedPduInfo.Length ; i++)
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	3301      	adds	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <CanTp_decodeConsecutiveFrame+0x88>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	429a      	cmp	r2, r3
 800141c:	d3f0      	bcc.n	8001400 <CanTp_decodeConsecutiveFrame+0x3c>
		}
		ConsecSN = ConsecSN + 1 > 0xF ? 0 : ConsecSN + 1;
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <CanTp_decodeConsecutiveFrame+0x8c>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b0e      	cmp	r3, #14
 8001426:	d805      	bhi.n	8001434 <CanTp_decodeConsecutiveFrame+0x70>
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <CanTp_decodeConsecutiveFrame+0x8c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	3301      	adds	r3, #1
 8001430:	b2db      	uxtb	r3, r3
 8001432:	e000      	b.n	8001436 <CanTp_decodeConsecutiveFrame+0x72>
 8001434:	2300      	movs	r3, #0
 8001436:	4a06      	ldr	r2, [pc, #24]	; (8001450 <CanTp_decodeConsecutiveFrame+0x8c>)
 8001438:	7013      	strb	r3, [r2, #0]
		CanTp_ConnectData(&DecodedPduInfo);
 800143a:	4804      	ldr	r0, [pc, #16]	; (800144c <CanTp_decodeConsecutiveFrame+0x88>)
 800143c:	f000 f844 	bl	80014c8 <CanTp_ConnectData>
	}
}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	200030f4 	.word	0x200030f4
 800144c:	2000310c 	.word	0x2000310c
 8001450:	20004124 	.word	0x20004124

08001454 <CanTp_decodeFlowControlFrame>:
void CanTp_decodeFlowControlFrame(uint32_t RxPduId, PduInfoTRx* PduInfoPtr){
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
	// Extract the Flow Status, Block Size, and Separation Time from the PDU
	uint8_t flowStatus = PduInfoPtr->Data[0];
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	73fb      	strb	r3, [r7, #15]
	uint8_t blockSize = PduInfoPtr->Data[1];
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	785b      	ldrb	r3, [r3, #1]
 8001468:	73bb      	strb	r3, [r7, #14]
	//	uint8_t separationTime = PduInfoPtr->Data[2];

	// Update the number of consecutive frames to send based on the Block Size
	//	if (blockSize == 0) {
	// Continuous sending without waiting for further flow control
	numberOfConsecutiveFramesToSend = blockSize;
 800146a:	7bbb      	ldrb	r3, [r7, #14]
 800146c:	4a11      	ldr	r2, [pc, #68]	; (80014b4 <CanTp_decodeFlowControlFrame+0x60>)
 800146e:	6013      	str	r3, [r2, #0]
	//	} else {
	//		numberOfConsecutiveFramesToSend = blockSize;
	//	}

	// Handle different flow statuses
	switch (flowStatus) {
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	2b32      	cmp	r3, #50	; 0x32
 8001474:	d015      	beq.n	80014a2 <CanTp_decodeFlowControlFrame+0x4e>
 8001476:	2b32      	cmp	r3, #50	; 0x32
 8001478:	dc15      	bgt.n	80014a6 <CanTp_decodeFlowControlFrame+0x52>
 800147a:	2b30      	cmp	r3, #48	; 0x30
 800147c:	d002      	beq.n	8001484 <CanTp_decodeFlowControlFrame+0x30>
 800147e:	2b31      	cmp	r3, #49	; 0x31
 8001480:	d00b      	beq.n	800149a <CanTp_decodeFlowControlFrame+0x46>
		break;

	default:
		// Invalid flow status, handle as needed (e.g., set an error state)
		//		expectedFrameState = Any_State;
		break;
 8001482:	e010      	b.n	80014a6 <CanTp_decodeFlowControlFrame+0x52>
		expectedFrameState = Consecutive_Frame_State;
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <CanTp_decodeFlowControlFrame+0x64>)
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]
		startOffset = currentOffset;
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <CanTp_decodeFlowControlFrame+0x68>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a0c      	ldr	r2, [pc, #48]	; (80014c0 <CanTp_decodeFlowControlFrame+0x6c>)
 8001490:	6013      	str	r3, [r2, #0]
		ConsecSN = 1;
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <CanTp_decodeFlowControlFrame+0x70>)
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]
		break;
 8001498:	e006      	b.n	80014a8 <CanTp_decodeFlowControlFrame+0x54>
		expectedFrameState = FlowControl_Frame_State;
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <CanTp_decodeFlowControlFrame+0x64>)
 800149c:	2202      	movs	r2, #2
 800149e:	701a      	strb	r2, [r3, #0]
		break;
 80014a0:	e002      	b.n	80014a8 <CanTp_decodeFlowControlFrame+0x54>
		break;
 80014a2:	bf00      	nop
 80014a4:	e000      	b.n	80014a8 <CanTp_decodeFlowControlFrame+0x54>
		break;
 80014a6:	bf00      	nop
	}

}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	200030e8 	.word	0x200030e8
 80014b8:	200030fc 	.word	0x200030fc
 80014bc:	20000010 	.word	0x20000010
 80014c0:	20004128 	.word	0x20004128
 80014c4:	20004124 	.word	0x20004124

080014c8 <CanTp_ConnectData>:

void CanTp_ConnectData(PduInfoTRx* PduInfoPtr){
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	//use CompletePduInfo struct to connect the data received from PduInfoTRx
	uint16_t tempCurrentIndex = currentIndex;
 80014d0:	4b17      	ldr	r3, [pc, #92]	; (8001530 <CanTp_ConnectData+0x68>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	81fb      	strh	r3, [r7, #14]
	while(currentIndex < PduInfoPtr->Length + tempCurrentIndex){
 80014d6:	e014      	b.n	8001502 <CanTp_ConnectData+0x3a>
		CompletePduInfo.Data[currentIndex] = PduInfoPtr->Data[currentIndex - tempCurrentIndex];
 80014d8:	4b15      	ldr	r3, [pc, #84]	; (8001530 <CanTp_ConnectData+0x68>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	461a      	mov	r2, r3
 80014e0:	89fb      	ldrh	r3, [r7, #14]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	4a12      	ldr	r2, [pc, #72]	; (8001530 <CanTp_ConnectData+0x68>)
 80014e6:	8812      	ldrh	r2, [r2, #0]
 80014e8:	b292      	uxth	r2, r2
 80014ea:	4611      	mov	r1, r2
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	5cd2      	ldrb	r2, [r2, r3]
 80014f0:	4b10      	ldr	r3, [pc, #64]	; (8001534 <CanTp_ConnectData+0x6c>)
 80014f2:	545a      	strb	r2, [r3, r1]
		currentIndex++;
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <CanTp_ConnectData+0x68>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	3301      	adds	r3, #1
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <CanTp_ConnectData+0x68>)
 8001500:	801a      	strh	r2, [r3, #0]
	while(currentIndex < PduInfoPtr->Length + tempCurrentIndex){
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <CanTp_ConnectData+0x68>)
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	b29b      	uxth	r3, r3
 8001508:	4619      	mov	r1, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	89fb      	ldrh	r3, [r7, #14]
 8001510:	4413      	add	r3, r2
 8001512:	4299      	cmp	r1, r3
 8001514:	d3e0      	bcc.n	80014d8 <CanTp_ConnectData+0x10>
	}
	numberOfRemainingBytesToReceive -= PduInfoPtr->Length;
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <CanTp_ConnectData+0x70>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	4a05      	ldr	r2, [pc, #20]	; (8001538 <CanTp_ConnectData+0x70>)
 8001522:	6013      	str	r3, [r2, #0]
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	20004126 	.word	0x20004126
 8001534:	20003118 	.word	0x20003118
 8001538:	200030f4 	.word	0x200030f4

0800153c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001542:	4b26      	ldr	r3, [pc, #152]	; (80015dc <MX_CAN1_Init+0xa0>)
 8001544:	4a26      	ldr	r2, [pc, #152]	; (80015e0 <MX_CAN1_Init+0xa4>)
 8001546:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <MX_CAN1_Init+0xa0>)
 800154a:	2210      	movs	r2, #16
 800154c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800154e:	4b23      	ldr	r3, [pc, #140]	; (80015dc <MX_CAN1_Init+0xa0>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001554:	4b21      	ldr	r3, [pc, #132]	; (80015dc <MX_CAN1_Init+0xa0>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 800155a:	4b20      	ldr	r3, [pc, #128]	; (80015dc <MX_CAN1_Init+0xa0>)
 800155c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001560:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001562:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <MX_CAN1_Init+0xa0>)
 8001564:	2200      	movs	r2, #0
 8001566:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001568:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <MX_CAN1_Init+0xa0>)
 800156a:	2200      	movs	r2, #0
 800156c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <MX_CAN1_Init+0xa0>)
 8001570:	2200      	movs	r2, #0
 8001572:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <MX_CAN1_Init+0xa0>)
 8001576:	2200      	movs	r2, #0
 8001578:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <MX_CAN1_Init+0xa0>)
 800157c:	2200      	movs	r2, #0
 800157e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <MX_CAN1_Init+0xa0>)
 8001582:	2200      	movs	r2, #0
 8001584:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <MX_CAN1_Init+0xa0>)
 8001588:	2200      	movs	r2, #0
 800158a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800158c:	4813      	ldr	r0, [pc, #76]	; (80015dc <MX_CAN1_Init+0xa0>)
 800158e:	f000 fc59 	bl	8001e44 <HAL_CAN_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001598:	f000 fa12 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  // Configure CAN filter to accept all messages
  	CAN_FilterTypeDef sFilterConfig;
  	sFilterConfig.FilterBank = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
  	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61bb      	str	r3, [r7, #24]
  	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80015a4:	2301      	movs	r3, #1
 80015a6:	61fb      	str	r3, [r7, #28]
  	sFilterConfig.FilterIdHigh = 0x0000;
 80015a8:	2300      	movs	r3, #0
 80015aa:	603b      	str	r3, [r7, #0]
  	sFilterConfig.FilterIdLow = 0x0000;
 80015ac:	2300      	movs	r3, #0
 80015ae:	607b      	str	r3, [r7, #4]
  	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
  	sFilterConfig.FilterMaskIdLow = 0x0000;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
  	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	613b      	str	r3, [r7, #16]
  	sFilterConfig.FilterActivation = ENABLE;
 80015bc:	2301      	movs	r3, #1
 80015be:	623b      	str	r3, [r7, #32]
  	sFilterConfig.SlaveStartFilterBank = 14; // Filter bank 14 for F303RE
 80015c0:	230e      	movs	r3, #14
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
  	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80015c4:	463b      	mov	r3, r7
 80015c6:	4619      	mov	r1, r3
 80015c8:	4804      	ldr	r0, [pc, #16]	; (80015dc <MX_CAN1_Init+0xa0>)
 80015ca:	f000 fd37 	bl	800203c <HAL_CAN_ConfigFilter>
  		// Filter configuration error handling
  	}

  	// Start the CAN peripheral
  	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80015ce:	4803      	ldr	r0, [pc, #12]	; (80015dc <MX_CAN1_Init+0xa0>)
 80015d0:	f000 fe14 	bl	80021fc <HAL_CAN_Start>
  		// Start error handling
  	}

  /* USER CODE END CAN1_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	3728      	adds	r7, #40	; 0x28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20004138 	.word	0x20004138
 80015e0:	40006400 	.word	0x40006400

080015e4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a21      	ldr	r2, [pc, #132]	; (8001688 <HAL_CAN_MspInit+0xa4>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d13c      	bne.n	8001680 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	4b20      	ldr	r3, [pc, #128]	; (800168c <HAL_CAN_MspInit+0xa8>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	4a1f      	ldr	r2, [pc, #124]	; (800168c <HAL_CAN_MspInit+0xa8>)
 8001610:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
 8001616:	4b1d      	ldr	r3, [pc, #116]	; (800168c <HAL_CAN_MspInit+0xa8>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_CAN_MspInit+0xa8>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a18      	ldr	r2, [pc, #96]	; (800168c <HAL_CAN_MspInit+0xa8>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <HAL_CAN_MspInit+0xa8>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800163e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001650:	2309      	movs	r3, #9
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4619      	mov	r1, r3
 800165a:	480d      	ldr	r0, [pc, #52]	; (8001690 <HAL_CAN_MspInit+0xac>)
 800165c:	f001 fbfe 	bl	8002e5c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2105      	movs	r1, #5
 8001664:	2014      	movs	r0, #20
 8001666:	f001 fb3d 	bl	8002ce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800166a:	2014      	movs	r0, #20
 800166c:	f001 fb56 	bl	8002d1c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001670:	2200      	movs	r2, #0
 8001672:	2105      	movs	r1, #5
 8001674:	2015      	movs	r0, #21
 8001676:	f001 fb35 	bl	8002ce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800167a:	2015      	movs	r0, #21
 800167c:	f001 fb4e 	bl	8002d1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001680:	bf00      	nop
 8001682:	3728      	adds	r7, #40	; 0x28
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40006400 	.word	0x40006400
 800168c:	40023800 	.word	0x40023800
 8001690:	40020000 	.word	0x40020000

08001694 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80016a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	4a06      	ldr	r2, [pc, #24]	; (80016c4 <vApplicationGetIdleTaskMemory+0x30>)
 80016aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2280      	movs	r2, #128	; 0x80
 80016b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20004164 	.word	0x20004164
 80016c4:	20004204 	.word	0x20004204

080016c8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80016c8:	b5b0      	push	{r4, r5, r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80016ce:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <MX_FREERTOS_Init+0x30>)
 80016d0:	1d3c      	adds	r4, r7, #4
 80016d2:	461d      	mov	r5, r3
 80016d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f003 ff1e 	bl	8005526 <osThreadCreate>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4a03      	ldr	r2, [pc, #12]	; (80016fc <MX_FREERTOS_Init+0x34>)
 80016ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80016f0:	bf00      	nop
 80016f2:	3720      	adds	r7, #32
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bdb0      	pop	{r4, r5, r7, pc}
 80016f8:	08006de8 	.word	0x08006de8
 80016fc:	20004160 	.word	0x20004160

08001700 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001708:	2001      	movs	r0, #1
 800170a:	f003 ff58 	bl	80055be <osDelay>
 800170e:	e7fb      	b.n	8001708 <StartDefaultTask+0x8>

08001710 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	; 0x28
 8001714:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <MX_GPIO_Init+0xd0>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a2c      	ldr	r2, [pc, #176]	; (80017e0 <MX_GPIO_Init+0xd0>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b2a      	ldr	r3, [pc, #168]	; (80017e0 <MX_GPIO_Init+0xd0>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <MX_GPIO_Init+0xd0>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a25      	ldr	r2, [pc, #148]	; (80017e0 <MX_GPIO_Init+0xd0>)
 800174c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <MX_GPIO_Init+0xd0>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <MX_GPIO_Init+0xd0>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a1e      	ldr	r2, [pc, #120]	; (80017e0 <MX_GPIO_Init+0xd0>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <MX_GPIO_Init+0xd0>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <MX_GPIO_Init+0xd0>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a17      	ldr	r2, [pc, #92]	; (80017e0 <MX_GPIO_Init+0xd0>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <MX_GPIO_Init+0xd0>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	2120      	movs	r1, #32
 800179a:	4812      	ldr	r0, [pc, #72]	; (80017e4 <MX_GPIO_Init+0xd4>)
 800179c:	f001 fcf2 	bl	8003184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	4619      	mov	r1, r3
 80017b6:	480c      	ldr	r0, [pc, #48]	; (80017e8 <MX_GPIO_Init+0xd8>)
 80017b8:	f001 fb50 	bl	8002e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017bc:	2320      	movs	r3, #32
 80017be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4619      	mov	r1, r3
 80017d2:	4804      	ldr	r0, [pc, #16]	; (80017e4 <MX_GPIO_Init+0xd4>)
 80017d4:	f001 fb42 	bl	8002e5c <HAL_GPIO_Init>

}
 80017d8:	bf00      	nop
 80017da:	3728      	adds	r7, #40	; 0x28
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020000 	.word	0x40020000
 80017e8:	40020800 	.word	0x40020800

080017ec <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80017f2:	f000 fae5 	bl	8001dc0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80017f6:	f000 f83b 	bl	8001870 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80017fa:	f7ff ff89 	bl	8001710 <MX_GPIO_Init>
	MX_CAN1_Init();
 80017fe:	f7ff fe9d 	bl	800153c <MX_CAN1_Init>
	MX_USART2_UART_Init();
 8001802:	f000 fa39 	bl	8001c78 <MX_USART2_UART_Init>
	MX_TIM6_Init();
 8001806:	f000 f9d9 	bl	8001bbc <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800180a:	2102      	movs	r1, #2
 800180c:	4810      	ldr	r0, [pc, #64]	; (8001850 <main+0x64>)
 800180e:	f000 ff5b 	bl	80026c8 <HAL_CAN_ActivateNotification>
	Display_Menu();
	HAL_UART_Receive_IT(&huart2, &Menu_Letter, 1);
	CanTp_setCallback(UDS_Client_Callback);
	xTaskCreate(UDS_MainFunction, "UDS_RX", configMINIMAL_STACK_SIZE,NULL, 2, &xTaskHandle3) ;
#else
	CanTp_setCallback(server_call_back);
 8001812:	4810      	ldr	r0, [pc, #64]	; (8001854 <main+0x68>)
 8001814:	f7ff fc38 	bl	8001088 <CanTp_setCallback>
#endif


	xTaskCreate(CanIf_Receive, "CANIf_RX", configMINIMAL_STACK_SIZE,NULL, 2, &xTaskHandle1) ;
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <main+0x6c>)
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	2302      	movs	r3, #2
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2300      	movs	r3, #0
 8001822:	2280      	movs	r2, #128	; 0x80
 8001824:	490d      	ldr	r1, [pc, #52]	; (800185c <main+0x70>)
 8001826:	480e      	ldr	r0, [pc, #56]	; (8001860 <main+0x74>)
 8001828:	f003 ffee 	bl	8005808 <xTaskCreate>
	xTaskCreate(CanTp_MainFunction, "CANTp_RX", configMINIMAL_STACK_SIZE,NULL, 3, &xTaskHandle2) ;
 800182c:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <main+0x78>)
 800182e:	9301      	str	r3, [sp, #4]
 8001830:	2303      	movs	r3, #3
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2300      	movs	r3, #0
 8001836:	2280      	movs	r2, #128	; 0x80
 8001838:	490b      	ldr	r1, [pc, #44]	; (8001868 <main+0x7c>)
 800183a:	480c      	ldr	r0, [pc, #48]	; (800186c <main+0x80>)
 800183c:	f003 ffe4 	bl	8005808 <xTaskCreate>
	CanTp_Init();
 8001840:	f7ff fa92 	bl	8000d68 <CanTp_Init>

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8001844:	f7ff ff40 	bl	80016c8 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8001848:	f003 fe66 	bl	8005518 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800184c:	e7fe      	b.n	800184c <main+0x60>
 800184e:	bf00      	nop
 8001850:	20004138 	.word	0x20004138
 8001854:	08000a2d 	.word	0x08000a2d
 8001858:	20004404 	.word	0x20004404
 800185c:	08006e04 	.word	0x08006e04
 8001860:	08000c71 	.word	0x08000c71
 8001864:	20004408 	.word	0x20004408
 8001868:	08006e10 	.word	0x08006e10
 800186c:	08000d7d 	.word	0x08000d7d

08001870 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b094      	sub	sp, #80	; 0x50
 8001874:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001876:	f107 031c 	add.w	r3, r7, #28
 800187a:	2234      	movs	r2, #52	; 0x34
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f005 f8ac 	bl	80069dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001884:	f107 0308 	add.w	r3, r7, #8
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001894:	2300      	movs	r3, #0
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <SystemClock_Config+0xd4>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	4a29      	ldr	r2, [pc, #164]	; (8001944 <SystemClock_Config+0xd4>)
 800189e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a2:	6413      	str	r3, [r2, #64]	; 0x40
 80018a4:	4b27      	ldr	r3, [pc, #156]	; (8001944 <SystemClock_Config+0xd4>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018b0:	2300      	movs	r3, #0
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	4b24      	ldr	r3, [pc, #144]	; (8001948 <SystemClock_Config+0xd8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018bc:	4a22      	ldr	r2, [pc, #136]	; (8001948 <SystemClock_Config+0xd8>)
 80018be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	4b20      	ldr	r3, [pc, #128]	; (8001948 <SystemClock_Config+0xd8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018cc:	603b      	str	r3, [r7, #0]
 80018ce:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018d0:	2302      	movs	r3, #2
 80018d2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d4:	2301      	movs	r3, #1
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018d8:	2310      	movs	r3, #16
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018dc:	2302      	movs	r3, #2
 80018de:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018e0:	2300      	movs	r3, #0
 80018e2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 80018e4:	2310      	movs	r3, #16
 80018e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 80018e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80018ec:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018ee:	2304      	movs	r3, #4
 80018f0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80018f2:	2302      	movs	r3, #2
 80018f4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80018f6:	2302      	movs	r3, #2
 80018f8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018fa:	f107 031c 	add.w	r3, r7, #28
 80018fe:	4618      	mov	r0, r3
 8001900:	f001 fff0 	bl	80038e4 <HAL_RCC_OscConfig>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <SystemClock_Config+0x9e>
	{
		Error_Handler();
 800190a:	f000 f859 	bl	80019c0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800190e:	230f      	movs	r3, #15
 8001910:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001912:	2302      	movs	r3, #2
 8001914:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800191a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800191e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001920:	2300      	movs	r3, #0
 8001922:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	2102      	movs	r1, #2
 800192a:	4618      	mov	r0, r3
 800192c:	f001 fc5e 	bl	80031ec <HAL_RCC_ClockConfig>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <SystemClock_Config+0xca>
	{
		Error_Handler();
 8001936:	f000 f843 	bl	80019c0 <Error_Handler>
	}
}
 800193a:	bf00      	nop
 800193c:	3750      	adds	r7, #80	; 0x50
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	40007000 	.word	0x40007000

0800194c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a14      	ldr	r2, [pc, #80]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x60>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d102      	bne.n	8001964 <HAL_TIM_PeriodElapsedCallback+0x18>
		HAL_IncTick();
 800195e:	f000 fa51 	bl	8001e04 <HAL_IncTick>
 8001962:	e01f      	b.n	80019a4 <HAL_TIM_PeriodElapsedCallback+0x58>
	}
	/* USER CODE BEGIN Callback 1 */
#if CAN_MODE == CAN_RX
	else if(htim->Instance == TIM6){
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a11      	ldr	r2, [pc, #68]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d11a      	bne.n	80019a4 <HAL_TIM_PeriodElapsedCallback+0x58>
		if(count == 0){
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d107      	bne.n	8001988 <HAL_TIM_PeriodElapsedCallback+0x3c>
			count++;
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	3301      	adds	r3, #1
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001984:	701a      	strb	r2, [r3, #0]
			return;
 8001986:	e00d      	b.n	80019a4 <HAL_TIM_PeriodElapsedCallback+0x58>
		}

		//		__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
		if (global_session != DefaultSession)
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b01      	cmp	r3, #1
 8001990:	d002      	beq.n	8001998 <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			global_session = DefaultSession;
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001994:	2201      	movs	r2, #1
 8001996:	701a      	strb	r2, [r3, #0]
		else
		{
			// do nothing
		}
		//		stop_timer();
		reset_timer();
 8001998:	f7fe fec6 	bl	8000728 <reset_timer>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800199c:	2120      	movs	r1, #32
 800199e:	4807      	ldr	r0, [pc, #28]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x70>)
 80019a0:	f001 fc09 	bl	80031b6 <HAL_GPIO_TogglePin>
	}
#endif
	/* USER CODE END Callback 1 */
}
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40010000 	.word	0x40010000
 80019b0:	40001000 	.word	0x40001000
 80019b4:	2000440c 	.word	0x2000440c
 80019b8:	20000000 	.word	0x20000000
 80019bc:	40020000 	.word	0x40020000

080019c0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c4:	b672      	cpsid	i
}
 80019c6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80019c8:	e7fe      	b.n	80019c8 <Error_Handler+0x8>
	...

080019cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_MspInit+0x54>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	4a11      	ldr	r2, [pc, #68]	; (8001a20 <HAL_MspInit+0x54>)
 80019dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e0:	6453      	str	r3, [r2, #68]	; 0x44
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_MspInit+0x54>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	603b      	str	r3, [r7, #0]
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_MspInit+0x54>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <HAL_MspInit+0x54>)
 80019f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fc:	6413      	str	r3, [r2, #64]	; 0x40
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <HAL_MspInit+0x54>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	210f      	movs	r1, #15
 8001a0e:	f06f 0001 	mvn.w	r0, #1
 8001a12:	f001 f967 	bl	8002ce4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800

08001a24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08c      	sub	sp, #48	; 0x30
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	4b2e      	ldr	r3, [pc, #184]	; (8001af4 <HAL_InitTick+0xd0>)
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3c:	4a2d      	ldr	r2, [pc, #180]	; (8001af4 <HAL_InitTick+0xd0>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6453      	str	r3, [r2, #68]	; 0x44
 8001a44:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <HAL_InitTick+0xd0>)
 8001a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a50:	f107 020c 	add.w	r2, r7, #12
 8001a54:	f107 0310 	add.w	r3, r7, #16
 8001a58:	4611      	mov	r1, r2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f001 fce0 	bl	8003420 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a60:	f001 fcca 	bl	80033f8 <HAL_RCC_GetPCLK2Freq>
 8001a64:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a68:	4a23      	ldr	r2, [pc, #140]	; (8001af8 <HAL_InitTick+0xd4>)
 8001a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6e:	0c9b      	lsrs	r3, r3, #18
 8001a70:	3b01      	subs	r3, #1
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001a74:	4b21      	ldr	r3, [pc, #132]	; (8001afc <HAL_InitTick+0xd8>)
 8001a76:	4a22      	ldr	r2, [pc, #136]	; (8001b00 <HAL_InitTick+0xdc>)
 8001a78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001a7a:	4b20      	ldr	r3, [pc, #128]	; (8001afc <HAL_InitTick+0xd8>)
 8001a7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a80:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a82:	4a1e      	ldr	r2, [pc, #120]	; (8001afc <HAL_InitTick+0xd8>)
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001a88:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <HAL_InitTick+0xd8>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8e:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <HAL_InitTick+0xd8>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_InitTick+0xd8>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001a9a:	4818      	ldr	r0, [pc, #96]	; (8001afc <HAL_InitTick+0xd8>)
 8001a9c:	f002 f9c0 	bl	8003e20 <HAL_TIM_Base_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001aa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d11b      	bne.n	8001ae6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001aae:	4813      	ldr	r0, [pc, #76]	; (8001afc <HAL_InitTick+0xd8>)
 8001ab0:	f002 fa06 	bl	8003ec0 <HAL_TIM_Base_Start_IT>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001aba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d111      	bne.n	8001ae6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ac2:	2019      	movs	r0, #25
 8001ac4:	f001 f92a 	bl	8002d1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b0f      	cmp	r3, #15
 8001acc:	d808      	bhi.n	8001ae0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	2019      	movs	r0, #25
 8001ad4:	f001 f906 	bl	8002ce4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ad8:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <HAL_InitTick+0xe0>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e002      	b.n	8001ae6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3730      	adds	r7, #48	; 0x30
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	431bde83 	.word	0x431bde83
 8001afc:	20004410 	.word	0x20004410
 8001b00:	40010000 	.word	0x40010000
 8001b04:	20000018 	.word	0x20000018

08001b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <NMI_Handler+0x4>

08001b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b12:	e7fe      	b.n	8001b12 <HardFault_Handler+0x4>

08001b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <MemManage_Handler+0x4>

08001b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <BusFault_Handler+0x4>

08001b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <UsageFault_Handler+0x4>

08001b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <CAN1_RX0_IRQHandler+0x10>)
 8001b3a:	f000 fdeb 	bl	8002714 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20004138 	.word	0x20004138

08001b48 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <CAN1_RX1_IRQHandler+0x10>)
 8001b4e:	f000 fde1 	bl	8002714 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20004138 	.word	0x20004138

08001b5c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b62:	f002 fa4c 	bl	8003ffe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20004410 	.word	0x20004410

08001b70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b74:	4802      	ldr	r0, [pc, #8]	; (8001b80 <USART2_IRQHandler+0x10>)
 8001b76:	f002 fd83 	bl	8004680 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200044a0 	.word	0x200044a0

08001b84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <TIM6_DAC_IRQHandler+0x10>)
 8001b8a:	f002 fa38 	bl	8003ffe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20004458 	.word	0x20004458

08001b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <SystemInit+0x20>)
 8001b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba2:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <SystemInit+0x20>)
 8001ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <MX_TIM6_Init+0x64>)
 8001bcc:	4a15      	ldr	r2, [pc, #84]	; (8001c24 <MX_TIM6_Init+0x68>)
 8001bce:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 41999;
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <MX_TIM6_Init+0x64>)
 8001bd2:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001bd6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <MX_TIM6_Init+0x64>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <MX_TIM6_Init+0x64>)
 8001be0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001be4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <MX_TIM6_Init+0x64>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001bec:	480c      	ldr	r0, [pc, #48]	; (8001c20 <MX_TIM6_Init+0x64>)
 8001bee:	f002 f917 	bl	8003e20 <HAL_TIM_Base_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001bf8:	f7ff fee2 	bl	80019c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c04:	463b      	mov	r3, r7
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_TIM6_Init+0x64>)
 8001c0a:	f002 fbc9 	bl	80043a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c14:	f7ff fed4 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20004458 	.word	0x20004458
 8001c24:	40001000 	.word	0x40001000

08001c28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0e      	ldr	r2, [pc, #56]	; (8001c70 <HAL_TIM_Base_MspInit+0x48>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d115      	bne.n	8001c66 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <HAL_TIM_Base_MspInit+0x4c>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	4a0c      	ldr	r2, [pc, #48]	; (8001c74 <HAL_TIM_Base_MspInit+0x4c>)
 8001c44:	f043 0310 	orr.w	r3, r3, #16
 8001c48:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_TIM_Base_MspInit+0x4c>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2105      	movs	r1, #5
 8001c5a:	2036      	movs	r0, #54	; 0x36
 8001c5c:	f001 f842 	bl	8002ce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c60:	2036      	movs	r0, #54	; 0x36
 8001c62:	f001 f85b 	bl	8002d1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40001000 	.word	0x40001000
 8001c74:	40023800 	.word	0x40023800

08001c78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c7e:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <MX_USART2_UART_Init+0x50>)
 8001c80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c82:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca2:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001cb0:	f002 fc06 	bl	80044c0 <HAL_UART_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cba:	f7ff fe81 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200044a0 	.word	0x200044a0
 8001cc8:	40004400 	.word	0x40004400

08001ccc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1d      	ldr	r2, [pc, #116]	; (8001d60 <HAL_UART_MspInit+0x94>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d133      	bne.n	8001d56 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	; (8001d64 <HAL_UART_MspInit+0x98>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a1b      	ldr	r2, [pc, #108]	; (8001d64 <HAL_UART_MspInit+0x98>)
 8001cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <HAL_UART_MspInit+0x98>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <HAL_UART_MspInit+0x98>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a14      	ldr	r2, [pc, #80]	; (8001d64 <HAL_UART_MspInit+0x98>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_UART_MspInit+0x98>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d26:	230c      	movs	r3, #12
 8001d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d32:	2303      	movs	r3, #3
 8001d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d36:	2307      	movs	r3, #7
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4809      	ldr	r0, [pc, #36]	; (8001d68 <HAL_UART_MspInit+0x9c>)
 8001d42:	f001 f88b 	bl	8002e5c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2105      	movs	r1, #5
 8001d4a:	2026      	movs	r0, #38	; 0x26
 8001d4c:	f000 ffca 	bl	8002ce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d50:	2026      	movs	r0, #38	; 0x26
 8001d52:	f000 ffe3 	bl	8002d1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d56:	bf00      	nop
 8001d58:	3728      	adds	r7, #40	; 0x28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40004400 	.word	0x40004400
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40020000 	.word	0x40020000

08001d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001da4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d70:	480d      	ldr	r0, [pc, #52]	; (8001da8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d72:	490e      	ldr	r1, [pc, #56]	; (8001dac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d74:	4a0e      	ldr	r2, [pc, #56]	; (8001db0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d78:	e002      	b.n	8001d80 <LoopCopyDataInit>

08001d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7e:	3304      	adds	r3, #4

08001d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d84:	d3f9      	bcc.n	8001d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d86:	4a0b      	ldr	r2, [pc, #44]	; (8001db4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d88:	4c0b      	ldr	r4, [pc, #44]	; (8001db8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d8c:	e001      	b.n	8001d92 <LoopFillZerobss>

08001d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d90:	3204      	adds	r2, #4

08001d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d94:	d3fb      	bcc.n	8001d8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d96:	f7ff feff 	bl	8001b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d9a:	f004 fe7d 	bl	8006a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d9e:	f7ff fd25 	bl	80017ec <main>
  bx  lr    
 8001da2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001da4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dac:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001db0:	08006e4c 	.word	0x08006e4c
  ldr r2, =_sbss
 8001db4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001db8:	2000837c 	.word	0x2000837c

08001dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dbc:	e7fe      	b.n	8001dbc <ADC_IRQHandler>
	...

08001dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dc4:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <HAL_Init+0x40>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0d      	ldr	r2, [pc, #52]	; (8001e00 <HAL_Init+0x40>)
 8001dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_Init+0x40>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <HAL_Init+0x40>)
 8001dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <HAL_Init+0x40>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a07      	ldr	r2, [pc, #28]	; (8001e00 <HAL_Init+0x40>)
 8001de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de8:	2003      	movs	r0, #3
 8001dea:	f000 ff70 	bl	8002cce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dee:	200f      	movs	r0, #15
 8001df0:	f7ff fe18 	bl	8001a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df4:	f7ff fdea 	bl	80019cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023c00 	.word	0x40023c00

08001e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_IncTick+0x20>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_IncTick+0x24>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <HAL_IncTick+0x24>)
 8001e16:	6013      	str	r3, [r2, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	2000001c 	.word	0x2000001c
 8001e28:	200044e4 	.word	0x200044e4

08001e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <HAL_GetTick+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	200044e4 	.word	0x200044e4

08001e44 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e0ed      	b.n	8002032 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d102      	bne.n	8001e68 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff fbbe 	bl	80015e4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e78:	f7ff ffd8 	bl	8001e2c <HAL_GetTick>
 8001e7c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e7e:	e012      	b.n	8001ea6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e80:	f7ff ffd4 	bl	8001e2c <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b0a      	cmp	r3, #10
 8001e8c:	d90b      	bls.n	8001ea6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2205      	movs	r2, #5
 8001e9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e0c5      	b.n	8002032 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0e5      	beq.n	8001e80 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0202 	bic.w	r2, r2, #2
 8001ec2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ec4:	f7ff ffb2 	bl	8001e2c <HAL_GetTick>
 8001ec8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001eca:	e012      	b.n	8001ef2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ecc:	f7ff ffae 	bl	8001e2c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b0a      	cmp	r3, #10
 8001ed8:	d90b      	bls.n	8001ef2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2205      	movs	r2, #5
 8001eea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e09f      	b.n	8002032 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1e5      	bne.n	8001ecc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	7e1b      	ldrb	r3, [r3, #24]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d108      	bne.n	8001f1a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	e007      	b.n	8001f2a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	7e5b      	ldrb	r3, [r3, #25]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d108      	bne.n	8001f44 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	e007      	b.n	8001f54 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	7e9b      	ldrb	r3, [r3, #26]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d108      	bne.n	8001f6e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0220 	orr.w	r2, r2, #32
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	e007      	b.n	8001f7e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0220 	bic.w	r2, r2, #32
 8001f7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	7edb      	ldrb	r3, [r3, #27]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d108      	bne.n	8001f98 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0210 	bic.w	r2, r2, #16
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	e007      	b.n	8001fa8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0210 	orr.w	r2, r2, #16
 8001fa6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7f1b      	ldrb	r3, [r3, #28]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d108      	bne.n	8001fc2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0208 	orr.w	r2, r2, #8
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	e007      	b.n	8001fd2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0208 	bic.w	r2, r2, #8
 8001fd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7f5b      	ldrb	r3, [r3, #29]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d108      	bne.n	8001fec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 0204 	orr.w	r2, r2, #4
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	e007      	b.n	8001ffc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0204 	bic.w	r2, r2, #4
 8001ffa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	ea42 0103 	orr.w	r1, r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	1e5a      	subs	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002052:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002054:	7cfb      	ldrb	r3, [r7, #19]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d003      	beq.n	8002062 <HAL_CAN_ConfigFilter+0x26>
 800205a:	7cfb      	ldrb	r3, [r7, #19]
 800205c:	2b02      	cmp	r3, #2
 800205e:	f040 80be 	bne.w	80021de <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002062:	4b65      	ldr	r3, [pc, #404]	; (80021f8 <HAL_CAN_ConfigFilter+0x1bc>)
 8002064:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800206c:	f043 0201 	orr.w	r2, r3, #1
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800207c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	021b      	lsls	r3, r3, #8
 8002092:	431a      	orrs	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	2201      	movs	r2, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	401a      	ands	r2, r3
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d123      	bne.n	800210c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	401a      	ands	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020e6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	3248      	adds	r2, #72	; 0x48
 80020ec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002100:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002102:	6979      	ldr	r1, [r7, #20]
 8002104:	3348      	adds	r3, #72	; 0x48
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	440b      	add	r3, r1
 800210a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d122      	bne.n	800215a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	431a      	orrs	r2, r3
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002134:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3248      	adds	r2, #72	; 0x48
 800213a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800214e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002150:	6979      	ldr	r1, [r7, #20]
 8002152:	3348      	adds	r3, #72	; 0x48
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d109      	bne.n	8002176 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	43db      	mvns	r3, r3
 800216c:	401a      	ands	r2, r3
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002174:	e007      	b.n	8002186 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	431a      	orrs	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	43db      	mvns	r3, r3
 8002198:	401a      	ands	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80021a0:	e007      	b.n	80021b2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d107      	bne.n	80021ca <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	431a      	orrs	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021d0:	f023 0201 	bic.w	r2, r3, #1
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	e006      	b.n	80021ec <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
  }
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	371c      	adds	r7, #28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	40006400 	.word	0x40006400

080021fc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3020 	ldrb.w	r3, [r3, #32]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b01      	cmp	r3, #1
 800220e:	d12e      	bne.n	800226e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0201 	bic.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002228:	f7ff fe00 	bl	8001e2c <HAL_GetTick>
 800222c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800222e:	e012      	b.n	8002256 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002230:	f7ff fdfc 	bl	8001e2c <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b0a      	cmp	r3, #10
 800223c:	d90b      	bls.n	8002256 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2205      	movs	r2, #5
 800224e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e012      	b.n	800227c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1e5      	bne.n	8002230 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	e006      	b.n	800227c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
  }
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002284:	b480      	push	{r7}
 8002286:	b089      	sub	sp, #36	; 0x24
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
 8002290:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002298:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80022a2:	7ffb      	ldrb	r3, [r7, #31]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d003      	beq.n	80022b0 <HAL_CAN_AddTxMessage+0x2c>
 80022a8:	7ffb      	ldrb	r3, [r7, #31]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	f040 80b8 	bne.w	8002420 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10a      	bne.n	80022d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d105      	bne.n	80022d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 80a0 	beq.w	8002410 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	0e1b      	lsrs	r3, r3, #24
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d907      	bls.n	80022f0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e09e      	b.n	800242e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80022f0:	2201      	movs	r2, #1
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	409a      	lsls	r2, r3
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10d      	bne.n	800231e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800230c:	68f9      	ldr	r1, [r7, #12]
 800230e:	6809      	ldr	r1, [r1, #0]
 8002310:	431a      	orrs	r2, r3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	3318      	adds	r3, #24
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	440b      	add	r3, r1
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	e00f      	b.n	800233e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002328:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800232e:	68f9      	ldr	r1, [r7, #12]
 8002330:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002332:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	3318      	adds	r3, #24
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	440b      	add	r3, r1
 800233c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6819      	ldr	r1, [r3, #0]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	691a      	ldr	r2, [r3, #16]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	3318      	adds	r3, #24
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	440b      	add	r3, r1
 800234e:	3304      	adds	r3, #4
 8002350:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	7d1b      	ldrb	r3, [r3, #20]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d111      	bne.n	800237e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3318      	adds	r3, #24
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	4413      	add	r3, r2
 8002366:	3304      	adds	r3, #4
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	6811      	ldr	r1, [r2, #0]
 800236e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	3318      	adds	r3, #24
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	440b      	add	r3, r1
 800237a:	3304      	adds	r3, #4
 800237c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3307      	adds	r3, #7
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	061a      	lsls	r2, r3, #24
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3306      	adds	r3, #6
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	041b      	lsls	r3, r3, #16
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3305      	adds	r3, #5
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	4313      	orrs	r3, r2
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	3204      	adds	r2, #4
 800239e:	7812      	ldrb	r2, [r2, #0]
 80023a0:	4610      	mov	r0, r2
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	6811      	ldr	r1, [r2, #0]
 80023a6:	ea43 0200 	orr.w	r2, r3, r0
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	440b      	add	r3, r1
 80023b0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80023b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3303      	adds	r3, #3
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	061a      	lsls	r2, r3, #24
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3302      	adds	r3, #2
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	041b      	lsls	r3, r3, #16
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3301      	adds	r3, #1
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	4313      	orrs	r3, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	7812      	ldrb	r2, [r2, #0]
 80023d6:	4610      	mov	r0, r2
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	6811      	ldr	r1, [r2, #0]
 80023dc:	ea43 0200 	orr.w	r2, r3, r0
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	440b      	add	r3, r1
 80023e6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80023ea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	3318      	adds	r3, #24
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	4413      	add	r3, r2
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	6811      	ldr	r1, [r2, #0]
 80023fe:	f043 0201 	orr.w	r2, r3, #1
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	3318      	adds	r3, #24
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	440b      	add	r3, r1
 800240a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	e00e      	b.n	800242e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e006      	b.n	800242e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
  }
}
 800242e:	4618      	mov	r0, r3
 8002430:	3724      	adds	r7, #36	; 0x24
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800243a:	b480      	push	{r7}
 800243c:	b085      	sub	sp, #20
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3020 	ldrb.w	r3, [r3, #32]
 800244c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800244e:	7afb      	ldrb	r3, [r7, #11]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d002      	beq.n	800245a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002454:	7afb      	ldrb	r3, [r7, #11]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d11d      	bne.n	8002496 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	3301      	adds	r3, #1
 800246c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	3301      	adds	r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	3301      	adds	r3, #1
 8002494:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002496:	68fb      	ldr	r3, [r7, #12]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024b8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80024ba:	7dfb      	ldrb	r3, [r7, #23]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d003      	beq.n	80024c8 <HAL_CAN_GetRxMessage+0x24>
 80024c0:	7dfb      	ldrb	r3, [r7, #23]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	f040 80f3 	bne.w	80026ae <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10e      	bne.n	80024ec <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d116      	bne.n	800250a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0e7      	b.n	80026bc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d107      	bne.n	800250a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0d8      	b.n	80026bc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	331b      	adds	r3, #27
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	4413      	add	r3, r2
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0204 	and.w	r2, r3, #4
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10c      	bne.n	8002542 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	331b      	adds	r3, #27
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	4413      	add	r3, r2
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	0d5b      	lsrs	r3, r3, #21
 8002538:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e00b      	b.n	800255a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	331b      	adds	r3, #27
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	4413      	add	r3, r2
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	08db      	lsrs	r3, r3, #3
 8002552:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	331b      	adds	r3, #27
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	4413      	add	r3, r2
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0202 	and.w	r2, r3, #2
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	331b      	adds	r3, #27
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	4413      	add	r3, r2
 800257c:	3304      	adds	r3, #4
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 020f 	and.w	r2, r3, #15
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	331b      	adds	r3, #27
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	4413      	add	r3, r2
 8002594:	3304      	adds	r3, #4
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	0a1b      	lsrs	r3, r3, #8
 800259a:	b2da      	uxtb	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	331b      	adds	r3, #27
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	4413      	add	r3, r2
 80025ac:	3304      	adds	r3, #4
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	0a1a      	lsrs	r2, r3, #8
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	3301      	adds	r3, #1
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	0c1a      	lsrs	r2, r3, #16
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	3302      	adds	r3, #2
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	4413      	add	r3, r2
 800260c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	0e1a      	lsrs	r2, r3, #24
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	3303      	adds	r3, #3
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	4413      	add	r3, r2
 8002626:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	3304      	adds	r3, #4
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	4413      	add	r3, r2
 800263e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	0a1a      	lsrs	r2, r3, #8
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	3305      	adds	r3, #5
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	4413      	add	r3, r2
 8002658:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	0c1a      	lsrs	r2, r3, #16
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	3306      	adds	r3, #6
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	4413      	add	r3, r2
 8002672:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	0e1a      	lsrs	r2, r3, #24
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	3307      	adds	r3, #7
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d108      	bne.n	800269a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0220 	orr.w	r2, r2, #32
 8002696:	60da      	str	r2, [r3, #12]
 8002698:	e007      	b.n	80026aa <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0220 	orr.w	r2, r2, #32
 80026a8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	e006      	b.n	80026bc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
  }
}
 80026bc:	4618      	mov	r0, r3
 80026be:	371c      	adds	r7, #28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d002      	beq.n	80026e6 <HAL_CAN_ActivateNotification+0x1e>
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d109      	bne.n	80026fa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6959      	ldr	r1, [r3, #20]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	e006      	b.n	8002708 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
  }
}
 8002708:	4618      	mov	r0, r3
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08a      	sub	sp, #40	; 0x28
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800271c:	2300      	movs	r3, #0
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d07c      	beq.n	8002854 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d023      	beq.n	80027ac <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2201      	movs	r2, #1
 800276a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f983 	bl	8002a82 <HAL_CAN_TxMailbox0CompleteCallback>
 800277c:	e016      	b.n	80027ac <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d004      	beq.n	8002792 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
 8002790:	e00c      	b.n	80027ac <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d004      	beq.n	80027a6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
 80027a4:	e002      	b.n	80027ac <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f989 	bl	8002abe <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d024      	beq.n	8002800 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f963 	bl	8002a96 <HAL_CAN_TxMailbox1CompleteCallback>
 80027d0:	e016      	b.n	8002800 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d004      	beq.n	80027e6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
 80027e4:	e00c      	b.n	8002800 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d004      	beq.n	80027fa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
 80027f8:	e002      	b.n	8002800 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f969 	bl	8002ad2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d024      	beq.n	8002854 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002812:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f943 	bl	8002aaa <HAL_CAN_TxMailbox2CompleteCallback>
 8002824:	e016      	b.n	8002854 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d004      	beq.n	800283a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
 8002838:	e00c      	b.n	8002854 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d004      	beq.n	800284e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
 800284c:	e002      	b.n	8002854 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f949 	bl	8002ae6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00c      	beq.n	8002878 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	2b00      	cmp	r3, #0
 8002866:	d007      	beq.n	8002878 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800286e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2210      	movs	r2, #16
 8002876:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b00      	cmp	r3, #0
 800288a:	d006      	beq.n	800289a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2208      	movs	r2, #8
 8002892:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f930 	bl	8002afa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d009      	beq.n	80028b8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7fe f992 	bl	8000bdc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00c      	beq.n	80028dc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d007      	beq.n	80028dc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2210      	movs	r2, #16
 80028da:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	f003 0320 	and.w	r3, r3, #32
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00b      	beq.n	80028fe <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d006      	beq.n	80028fe <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2208      	movs	r2, #8
 80028f6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f912 	bl	8002b22 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2b00      	cmp	r3, #0
 8002906:	d009      	beq.n	800291c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f8f9 	bl	8002b0e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00b      	beq.n	800293e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b00      	cmp	r3, #0
 800292e:	d006      	beq.n	800293e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2210      	movs	r2, #16
 8002936:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f8fc 	bl	8002b36 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00b      	beq.n	8002960 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d006      	beq.n	8002960 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2208      	movs	r2, #8
 8002958:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f8f5 	bl	8002b4a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d07b      	beq.n	8002a62 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d072      	beq.n	8002a5a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297a:	2b00      	cmp	r3, #0
 800297c:	d008      	beq.n	8002990 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002996:	2b00      	cmp	r3, #0
 8002998:	d008      	beq.n	80029ac <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	f043 0302 	orr.w	r3, r3, #2
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	f043 0304 	orr.w	r3, r3, #4
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d043      	beq.n	8002a5a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d03e      	beq.n	8002a5a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029e2:	2b60      	cmp	r3, #96	; 0x60
 80029e4:	d02b      	beq.n	8002a3e <HAL_CAN_IRQHandler+0x32a>
 80029e6:	2b60      	cmp	r3, #96	; 0x60
 80029e8:	d82e      	bhi.n	8002a48 <HAL_CAN_IRQHandler+0x334>
 80029ea:	2b50      	cmp	r3, #80	; 0x50
 80029ec:	d022      	beq.n	8002a34 <HAL_CAN_IRQHandler+0x320>
 80029ee:	2b50      	cmp	r3, #80	; 0x50
 80029f0:	d82a      	bhi.n	8002a48 <HAL_CAN_IRQHandler+0x334>
 80029f2:	2b40      	cmp	r3, #64	; 0x40
 80029f4:	d019      	beq.n	8002a2a <HAL_CAN_IRQHandler+0x316>
 80029f6:	2b40      	cmp	r3, #64	; 0x40
 80029f8:	d826      	bhi.n	8002a48 <HAL_CAN_IRQHandler+0x334>
 80029fa:	2b30      	cmp	r3, #48	; 0x30
 80029fc:	d010      	beq.n	8002a20 <HAL_CAN_IRQHandler+0x30c>
 80029fe:	2b30      	cmp	r3, #48	; 0x30
 8002a00:	d822      	bhi.n	8002a48 <HAL_CAN_IRQHandler+0x334>
 8002a02:	2b10      	cmp	r3, #16
 8002a04:	d002      	beq.n	8002a0c <HAL_CAN_IRQHandler+0x2f8>
 8002a06:	2b20      	cmp	r3, #32
 8002a08:	d005      	beq.n	8002a16 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002a0a:	e01d      	b.n	8002a48 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	f043 0308 	orr.w	r3, r3, #8
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a14:	e019      	b.n	8002a4a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	f043 0310 	orr.w	r3, r3, #16
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a1e:	e014      	b.n	8002a4a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	f043 0320 	orr.w	r3, r3, #32
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a28:	e00f      	b.n	8002a4a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a32:	e00a      	b.n	8002a4a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a3c:	e005      	b.n	8002a4a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a46:	e000      	b.n	8002a4a <HAL_CAN_IRQHandler+0x336>
            break;
 8002a48:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699a      	ldr	r2, [r3, #24]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002a58:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2204      	movs	r2, #4
 8002a60:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d008      	beq.n	8002a7a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f872 	bl	8002b5e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002a7a:	bf00      	nop
 8002a7c:	3728      	adds	r7, #40	; 0x28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b84:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b90:	4013      	ands	r3, r2
 8002b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ba6:	4a04      	ldr	r2, [pc, #16]	; (8002bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	60d3      	str	r3, [r2, #12]
}
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc0:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	0a1b      	lsrs	r3, r3, #8
 8002bc6:	f003 0307 	and.w	r3, r3, #7
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	db0b      	blt.n	8002c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	f003 021f 	and.w	r2, r3, #31
 8002bf0:	4907      	ldr	r1, [pc, #28]	; (8002c10 <__NVIC_EnableIRQ+0x38>)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	e000e100 	.word	0xe000e100

08002c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	6039      	str	r1, [r7, #0]
 8002c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	db0a      	blt.n	8002c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	490c      	ldr	r1, [pc, #48]	; (8002c60 <__NVIC_SetPriority+0x4c>)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	0112      	lsls	r2, r2, #4
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	440b      	add	r3, r1
 8002c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c3c:	e00a      	b.n	8002c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	4908      	ldr	r1, [pc, #32]	; (8002c64 <__NVIC_SetPriority+0x50>)
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	3b04      	subs	r3, #4
 8002c4c:	0112      	lsls	r2, r2, #4
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	440b      	add	r3, r1
 8002c52:	761a      	strb	r2, [r3, #24]
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000e100 	.word	0xe000e100
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b089      	sub	sp, #36	; 0x24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f1c3 0307 	rsb	r3, r3, #7
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	bf28      	it	cs
 8002c86:	2304      	movcs	r3, #4
 8002c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	2b06      	cmp	r3, #6
 8002c90:	d902      	bls.n	8002c98 <NVIC_EncodePriority+0x30>
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3b03      	subs	r3, #3
 8002c96:	e000      	b.n	8002c9a <NVIC_EncodePriority+0x32>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	401a      	ands	r2, r3
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cba:	43d9      	mvns	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc0:	4313      	orrs	r3, r2
         );
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3724      	adds	r7, #36	; 0x24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7ff ff4c 	bl	8002b74 <__NVIC_SetPriorityGrouping>
}
 8002cdc:	bf00      	nop
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf6:	f7ff ff61 	bl	8002bbc <__NVIC_GetPriorityGrouping>
 8002cfa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	68b9      	ldr	r1, [r7, #8]
 8002d00:	6978      	ldr	r0, [r7, #20]
 8002d02:	f7ff ffb1 	bl	8002c68 <NVIC_EncodePriority>
 8002d06:	4602      	mov	r2, r0
 8002d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d0c:	4611      	mov	r1, r2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff ff80 	bl	8002c14 <__NVIC_SetPriority>
}
 8002d14:	bf00      	nop
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff ff54 	bl	8002bd8 <__NVIC_EnableIRQ>
}
 8002d30:	bf00      	nop
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d46:	f7ff f871 	bl	8001e2c <HAL_GetTick>
 8002d4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d008      	beq.n	8002d6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2280      	movs	r2, #128	; 0x80
 8002d5c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e052      	b.n	8002e10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0216 	bic.w	r2, r2, #22
 8002d78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695a      	ldr	r2, [r3, #20]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d103      	bne.n	8002d9a <HAL_DMA_Abort+0x62>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0208 	bic.w	r2, r2, #8
 8002da8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0201 	bic.w	r2, r2, #1
 8002db8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dba:	e013      	b.n	8002de4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dbc:	f7ff f836 	bl	8001e2c <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b05      	cmp	r3, #5
 8002dc8:	d90c      	bls.n	8002de4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e015      	b.n	8002e10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1e4      	bne.n	8002dbc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df6:	223f      	movs	r2, #63	; 0x3f
 8002df8:	409a      	lsls	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d004      	beq.n	8002e36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2280      	movs	r2, #128	; 0x80
 8002e30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e00c      	b.n	8002e50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2205      	movs	r2, #5
 8002e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0201 	bic.w	r2, r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b089      	sub	sp, #36	; 0x24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e72:	2300      	movs	r3, #0
 8002e74:	61fb      	str	r3, [r7, #28]
 8002e76:	e165      	b.n	8003144 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e78:	2201      	movs	r2, #1
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	f040 8154 	bne.w	800313e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d005      	beq.n	8002eae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d130      	bne.n	8002f10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	2203      	movs	r2, #3
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	091b      	lsrs	r3, r3, #4
 8002efa:	f003 0201 	and.w	r2, r3, #1
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 0303 	and.w	r3, r3, #3
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d017      	beq.n	8002f4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	2203      	movs	r2, #3
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d123      	bne.n	8002fa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	08da      	lsrs	r2, r3, #3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3208      	adds	r2, #8
 8002f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	220f      	movs	r2, #15
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	08da      	lsrs	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3208      	adds	r2, #8
 8002f9a:	69b9      	ldr	r1, [r7, #24]
 8002f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	2203      	movs	r2, #3
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 0203 	and.w	r2, r3, #3
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 80ae 	beq.w	800313e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	4b5d      	ldr	r3, [pc, #372]	; (800315c <HAL_GPIO_Init+0x300>)
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	4a5c      	ldr	r2, [pc, #368]	; (800315c <HAL_GPIO_Init+0x300>)
 8002fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ff2:	4b5a      	ldr	r3, [pc, #360]	; (800315c <HAL_GPIO_Init+0x300>)
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ffe:	4a58      	ldr	r2, [pc, #352]	; (8003160 <HAL_GPIO_Init+0x304>)
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	089b      	lsrs	r3, r3, #2
 8003004:	3302      	adds	r3, #2
 8003006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800300a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	220f      	movs	r2, #15
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43db      	mvns	r3, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4013      	ands	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a4f      	ldr	r2, [pc, #316]	; (8003164 <HAL_GPIO_Init+0x308>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d025      	beq.n	8003076 <HAL_GPIO_Init+0x21a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a4e      	ldr	r2, [pc, #312]	; (8003168 <HAL_GPIO_Init+0x30c>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d01f      	beq.n	8003072 <HAL_GPIO_Init+0x216>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a4d      	ldr	r2, [pc, #308]	; (800316c <HAL_GPIO_Init+0x310>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d019      	beq.n	800306e <HAL_GPIO_Init+0x212>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a4c      	ldr	r2, [pc, #304]	; (8003170 <HAL_GPIO_Init+0x314>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d013      	beq.n	800306a <HAL_GPIO_Init+0x20e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a4b      	ldr	r2, [pc, #300]	; (8003174 <HAL_GPIO_Init+0x318>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d00d      	beq.n	8003066 <HAL_GPIO_Init+0x20a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a4a      	ldr	r2, [pc, #296]	; (8003178 <HAL_GPIO_Init+0x31c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d007      	beq.n	8003062 <HAL_GPIO_Init+0x206>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a49      	ldr	r2, [pc, #292]	; (800317c <HAL_GPIO_Init+0x320>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d101      	bne.n	800305e <HAL_GPIO_Init+0x202>
 800305a:	2306      	movs	r3, #6
 800305c:	e00c      	b.n	8003078 <HAL_GPIO_Init+0x21c>
 800305e:	2307      	movs	r3, #7
 8003060:	e00a      	b.n	8003078 <HAL_GPIO_Init+0x21c>
 8003062:	2305      	movs	r3, #5
 8003064:	e008      	b.n	8003078 <HAL_GPIO_Init+0x21c>
 8003066:	2304      	movs	r3, #4
 8003068:	e006      	b.n	8003078 <HAL_GPIO_Init+0x21c>
 800306a:	2303      	movs	r3, #3
 800306c:	e004      	b.n	8003078 <HAL_GPIO_Init+0x21c>
 800306e:	2302      	movs	r3, #2
 8003070:	e002      	b.n	8003078 <HAL_GPIO_Init+0x21c>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_GPIO_Init+0x21c>
 8003076:	2300      	movs	r3, #0
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	f002 0203 	and.w	r2, r2, #3
 800307e:	0092      	lsls	r2, r2, #2
 8003080:	4093      	lsls	r3, r2
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003088:	4935      	ldr	r1, [pc, #212]	; (8003160 <HAL_GPIO_Init+0x304>)
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	089b      	lsrs	r3, r3, #2
 800308e:	3302      	adds	r3, #2
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003096:	4b3a      	ldr	r3, [pc, #232]	; (8003180 <HAL_GPIO_Init+0x324>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	43db      	mvns	r3, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030ba:	4a31      	ldr	r2, [pc, #196]	; (8003180 <HAL_GPIO_Init+0x324>)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030c0:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <HAL_GPIO_Init+0x324>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030e4:	4a26      	ldr	r2, [pc, #152]	; (8003180 <HAL_GPIO_Init+0x324>)
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030ea:	4b25      	ldr	r3, [pc, #148]	; (8003180 <HAL_GPIO_Init+0x324>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800310e:	4a1c      	ldr	r2, [pc, #112]	; (8003180 <HAL_GPIO_Init+0x324>)
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003114:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <HAL_GPIO_Init+0x324>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003138:	4a11      	ldr	r2, [pc, #68]	; (8003180 <HAL_GPIO_Init+0x324>)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3301      	adds	r3, #1
 8003142:	61fb      	str	r3, [r7, #28]
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	2b0f      	cmp	r3, #15
 8003148:	f67f ae96 	bls.w	8002e78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800314c:	bf00      	nop
 800314e:	bf00      	nop
 8003150:	3724      	adds	r7, #36	; 0x24
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800
 8003160:	40013800 	.word	0x40013800
 8003164:	40020000 	.word	0x40020000
 8003168:	40020400 	.word	0x40020400
 800316c:	40020800 	.word	0x40020800
 8003170:	40020c00 	.word	0x40020c00
 8003174:	40021000 	.word	0x40021000
 8003178:	40021400 	.word	0x40021400
 800317c:	40021800 	.word	0x40021800
 8003180:	40013c00 	.word	0x40013c00

08003184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	807b      	strh	r3, [r7, #2]
 8003190:	4613      	mov	r3, r2
 8003192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003194:	787b      	ldrb	r3, [r7, #1]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800319a:	887a      	ldrh	r2, [r7, #2]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031a0:	e003      	b.n	80031aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031a2:	887b      	ldrh	r3, [r7, #2]
 80031a4:	041a      	lsls	r2, r3, #16
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	619a      	str	r2, [r3, #24]
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b085      	sub	sp, #20
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	460b      	mov	r3, r1
 80031c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031c8:	887a      	ldrh	r2, [r7, #2]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4013      	ands	r3, r2
 80031ce:	041a      	lsls	r2, r3, #16
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	43d9      	mvns	r1, r3
 80031d4:	887b      	ldrh	r3, [r7, #2]
 80031d6:	400b      	ands	r3, r1
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	619a      	str	r2, [r3, #24]
}
 80031de:	bf00      	nop
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
	...

080031ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0cc      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003200:	4b68      	ldr	r3, [pc, #416]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d90c      	bls.n	8003228 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b65      	ldr	r3, [pc, #404]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003216:	4b63      	ldr	r3, [pc, #396]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0b8      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d020      	beq.n	8003276 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003240:	4b59      	ldr	r3, [pc, #356]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	4a58      	ldr	r2, [pc, #352]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800324a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003258:	4b53      	ldr	r3, [pc, #332]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4a52      	ldr	r2, [pc, #328]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003262:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003264:	4b50      	ldr	r3, [pc, #320]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	494d      	ldr	r1, [pc, #308]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	4313      	orrs	r3, r2
 8003274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d044      	beq.n	800330c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d107      	bne.n	800329a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328a:	4b47      	ldr	r3, [pc, #284]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d119      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e07f      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d003      	beq.n	80032aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032aa:	4b3f      	ldr	r3, [pc, #252]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e06f      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ba:	4b3b      	ldr	r3, [pc, #236]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e067      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ca:	4b37      	ldr	r3, [pc, #220]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f023 0203 	bic.w	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4934      	ldr	r1, [pc, #208]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032dc:	f7fe fda6 	bl	8001e2c <HAL_GetTick>
 80032e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	e00a      	b.n	80032fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e4:	f7fe fda2 	bl	8001e2c <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e04f      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fa:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 020c 	and.w	r2, r3, #12
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	429a      	cmp	r2, r3
 800330a:	d1eb      	bne.n	80032e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800330c:	4b25      	ldr	r3, [pc, #148]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 030f 	and.w	r3, r3, #15
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d20c      	bcs.n	8003334 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331a:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003322:	4b20      	ldr	r3, [pc, #128]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d001      	beq.n	8003334 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e032      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003340:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4916      	ldr	r1, [pc, #88]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	4313      	orrs	r3, r2
 8003350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d009      	beq.n	8003372 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800335e:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	490e      	ldr	r1, [pc, #56]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003372:	f000 f887 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 8003376:	4602      	mov	r2, r0
 8003378:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	490a      	ldr	r1, [pc, #40]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 8003384:	5ccb      	ldrb	r3, [r1, r3]
 8003386:	fa22 f303 	lsr.w	r3, r2, r3
 800338a:	4a09      	ldr	r2, [pc, #36]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 800338c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800338e:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f7fe fb46 	bl	8001a24 <HAL_InitTick>

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40023c00 	.word	0x40023c00
 80033a8:	40023800 	.word	0x40023800
 80033ac:	08006e24 	.word	0x08006e24
 80033b0:	20000014 	.word	0x20000014
 80033b4:	20000018 	.word	0x20000018

080033b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033bc:	4b03      	ldr	r3, [pc, #12]	; (80033cc <HAL_RCC_GetHCLKFreq+0x14>)
 80033be:	681b      	ldr	r3, [r3, #0]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20000014 	.word	0x20000014

080033d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033d4:	f7ff fff0 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 80033d8:	4602      	mov	r2, r0
 80033da:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	0a9b      	lsrs	r3, r3, #10
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	4903      	ldr	r1, [pc, #12]	; (80033f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033e6:	5ccb      	ldrb	r3, [r1, r3]
 80033e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40023800 	.word	0x40023800
 80033f4:	08006e34 	.word	0x08006e34

080033f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033fc:	f7ff ffdc 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 8003400:	4602      	mov	r2, r0
 8003402:	4b05      	ldr	r3, [pc, #20]	; (8003418 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	0b5b      	lsrs	r3, r3, #13
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	4903      	ldr	r1, [pc, #12]	; (800341c <HAL_RCC_GetPCLK2Freq+0x24>)
 800340e:	5ccb      	ldrb	r3, [r1, r3]
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003414:	4618      	mov	r0, r3
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40023800 	.word	0x40023800
 800341c:	08006e34 	.word	0x08006e34

08003420 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	220f      	movs	r2, #15
 800342e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003430:	4b12      	ldr	r3, [pc, #72]	; (800347c <HAL_RCC_GetClockConfig+0x5c>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 0203 	and.w	r2, r3, #3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800343c:	4b0f      	ldr	r3, [pc, #60]	; (800347c <HAL_RCC_GetClockConfig+0x5c>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003448:	4b0c      	ldr	r3, [pc, #48]	; (800347c <HAL_RCC_GetClockConfig+0x5c>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003454:	4b09      	ldr	r3, [pc, #36]	; (800347c <HAL_RCC_GetClockConfig+0x5c>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	08db      	lsrs	r3, r3, #3
 800345a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003462:	4b07      	ldr	r3, [pc, #28]	; (8003480 <HAL_RCC_GetClockConfig+0x60>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 020f 	and.w	r2, r3, #15
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	601a      	str	r2, [r3, #0]
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40023800 	.word	0x40023800
 8003480:	40023c00 	.word	0x40023c00

08003484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003488:	b0ae      	sub	sp, #184	; 0xb8
 800348a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800349e:	2300      	movs	r3, #0
 80034a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034aa:	4bcb      	ldr	r3, [pc, #812]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	2b0c      	cmp	r3, #12
 80034b4:	f200 8206 	bhi.w	80038c4 <HAL_RCC_GetSysClockFreq+0x440>
 80034b8:	a201      	add	r2, pc, #4	; (adr r2, 80034c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80034ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034be:	bf00      	nop
 80034c0:	080034f5 	.word	0x080034f5
 80034c4:	080038c5 	.word	0x080038c5
 80034c8:	080038c5 	.word	0x080038c5
 80034cc:	080038c5 	.word	0x080038c5
 80034d0:	080034fd 	.word	0x080034fd
 80034d4:	080038c5 	.word	0x080038c5
 80034d8:	080038c5 	.word	0x080038c5
 80034dc:	080038c5 	.word	0x080038c5
 80034e0:	08003505 	.word	0x08003505
 80034e4:	080038c5 	.word	0x080038c5
 80034e8:	080038c5 	.word	0x080038c5
 80034ec:	080038c5 	.word	0x080038c5
 80034f0:	080036f5 	.word	0x080036f5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034f4:	4bb9      	ldr	r3, [pc, #740]	; (80037dc <HAL_RCC_GetSysClockFreq+0x358>)
 80034f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80034fa:	e1e7      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034fc:	4bb8      	ldr	r3, [pc, #736]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80034fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003502:	e1e3      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003504:	4bb4      	ldr	r3, [pc, #720]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800350c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003510:	4bb1      	ldr	r3, [pc, #708]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d071      	beq.n	8003600 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800351c:	4bae      	ldr	r3, [pc, #696]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	099b      	lsrs	r3, r3, #6
 8003522:	2200      	movs	r2, #0
 8003524:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003528:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800352c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003534:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003538:	2300      	movs	r3, #0
 800353a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800353e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003542:	4622      	mov	r2, r4
 8003544:	462b      	mov	r3, r5
 8003546:	f04f 0000 	mov.w	r0, #0
 800354a:	f04f 0100 	mov.w	r1, #0
 800354e:	0159      	lsls	r1, r3, #5
 8003550:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003554:	0150      	lsls	r0, r2, #5
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4621      	mov	r1, r4
 800355c:	1a51      	subs	r1, r2, r1
 800355e:	6439      	str	r1, [r7, #64]	; 0x40
 8003560:	4629      	mov	r1, r5
 8003562:	eb63 0301 	sbc.w	r3, r3, r1
 8003566:	647b      	str	r3, [r7, #68]	; 0x44
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003574:	4649      	mov	r1, r9
 8003576:	018b      	lsls	r3, r1, #6
 8003578:	4641      	mov	r1, r8
 800357a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800357e:	4641      	mov	r1, r8
 8003580:	018a      	lsls	r2, r1, #6
 8003582:	4641      	mov	r1, r8
 8003584:	1a51      	subs	r1, r2, r1
 8003586:	63b9      	str	r1, [r7, #56]	; 0x38
 8003588:	4649      	mov	r1, r9
 800358a:	eb63 0301 	sbc.w	r3, r3, r1
 800358e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800359c:	4649      	mov	r1, r9
 800359e:	00cb      	lsls	r3, r1, #3
 80035a0:	4641      	mov	r1, r8
 80035a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035a6:	4641      	mov	r1, r8
 80035a8:	00ca      	lsls	r2, r1, #3
 80035aa:	4610      	mov	r0, r2
 80035ac:	4619      	mov	r1, r3
 80035ae:	4603      	mov	r3, r0
 80035b0:	4622      	mov	r2, r4
 80035b2:	189b      	adds	r3, r3, r2
 80035b4:	633b      	str	r3, [r7, #48]	; 0x30
 80035b6:	462b      	mov	r3, r5
 80035b8:	460a      	mov	r2, r1
 80035ba:	eb42 0303 	adc.w	r3, r2, r3
 80035be:	637b      	str	r3, [r7, #52]	; 0x34
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035cc:	4629      	mov	r1, r5
 80035ce:	024b      	lsls	r3, r1, #9
 80035d0:	4621      	mov	r1, r4
 80035d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035d6:	4621      	mov	r1, r4
 80035d8:	024a      	lsls	r2, r1, #9
 80035da:	4610      	mov	r0, r2
 80035dc:	4619      	mov	r1, r3
 80035de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035ec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80035f0:	f7fc fe0e 	bl	8000210 <__aeabi_uldivmod>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4613      	mov	r3, r2
 80035fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035fe:	e067      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003600:	4b75      	ldr	r3, [pc, #468]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	099b      	lsrs	r3, r3, #6
 8003606:	2200      	movs	r2, #0
 8003608:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800360c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003610:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003618:	67bb      	str	r3, [r7, #120]	; 0x78
 800361a:	2300      	movs	r3, #0
 800361c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800361e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003622:	4622      	mov	r2, r4
 8003624:	462b      	mov	r3, r5
 8003626:	f04f 0000 	mov.w	r0, #0
 800362a:	f04f 0100 	mov.w	r1, #0
 800362e:	0159      	lsls	r1, r3, #5
 8003630:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003634:	0150      	lsls	r0, r2, #5
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4621      	mov	r1, r4
 800363c:	1a51      	subs	r1, r2, r1
 800363e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003640:	4629      	mov	r1, r5
 8003642:	eb63 0301 	sbc.w	r3, r3, r1
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003654:	4649      	mov	r1, r9
 8003656:	018b      	lsls	r3, r1, #6
 8003658:	4641      	mov	r1, r8
 800365a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800365e:	4641      	mov	r1, r8
 8003660:	018a      	lsls	r2, r1, #6
 8003662:	4641      	mov	r1, r8
 8003664:	ebb2 0a01 	subs.w	sl, r2, r1
 8003668:	4649      	mov	r1, r9
 800366a:	eb63 0b01 	sbc.w	fp, r3, r1
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	f04f 0300 	mov.w	r3, #0
 8003676:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800367a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800367e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003682:	4692      	mov	sl, r2
 8003684:	469b      	mov	fp, r3
 8003686:	4623      	mov	r3, r4
 8003688:	eb1a 0303 	adds.w	r3, sl, r3
 800368c:	623b      	str	r3, [r7, #32]
 800368e:	462b      	mov	r3, r5
 8003690:	eb4b 0303 	adc.w	r3, fp, r3
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	f04f 0300 	mov.w	r3, #0
 800369e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80036a2:	4629      	mov	r1, r5
 80036a4:	028b      	lsls	r3, r1, #10
 80036a6:	4621      	mov	r1, r4
 80036a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036ac:	4621      	mov	r1, r4
 80036ae:	028a      	lsls	r2, r1, #10
 80036b0:	4610      	mov	r0, r2
 80036b2:	4619      	mov	r1, r3
 80036b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036b8:	2200      	movs	r2, #0
 80036ba:	673b      	str	r3, [r7, #112]	; 0x70
 80036bc:	677a      	str	r2, [r7, #116]	; 0x74
 80036be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80036c2:	f7fc fda5 	bl	8000210 <__aeabi_uldivmod>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4613      	mov	r3, r2
 80036cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036d0:	4b41      	ldr	r3, [pc, #260]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	0c1b      	lsrs	r3, r3, #16
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	3301      	adds	r3, #1
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80036e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80036ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80036f2:	e0eb      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036f4:	4b38      	ldr	r3, [pc, #224]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003700:	4b35      	ldr	r3, [pc, #212]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d06b      	beq.n	80037e4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800370c:	4b32      	ldr	r3, [pc, #200]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	099b      	lsrs	r3, r3, #6
 8003712:	2200      	movs	r2, #0
 8003714:	66bb      	str	r3, [r7, #104]	; 0x68
 8003716:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003718:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800371a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800371e:	663b      	str	r3, [r7, #96]	; 0x60
 8003720:	2300      	movs	r3, #0
 8003722:	667b      	str	r3, [r7, #100]	; 0x64
 8003724:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003728:	4622      	mov	r2, r4
 800372a:	462b      	mov	r3, r5
 800372c:	f04f 0000 	mov.w	r0, #0
 8003730:	f04f 0100 	mov.w	r1, #0
 8003734:	0159      	lsls	r1, r3, #5
 8003736:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800373a:	0150      	lsls	r0, r2, #5
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4621      	mov	r1, r4
 8003742:	1a51      	subs	r1, r2, r1
 8003744:	61b9      	str	r1, [r7, #24]
 8003746:	4629      	mov	r1, r5
 8003748:	eb63 0301 	sbc.w	r3, r3, r1
 800374c:	61fb      	str	r3, [r7, #28]
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800375a:	4659      	mov	r1, fp
 800375c:	018b      	lsls	r3, r1, #6
 800375e:	4651      	mov	r1, sl
 8003760:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003764:	4651      	mov	r1, sl
 8003766:	018a      	lsls	r2, r1, #6
 8003768:	4651      	mov	r1, sl
 800376a:	ebb2 0801 	subs.w	r8, r2, r1
 800376e:	4659      	mov	r1, fp
 8003770:	eb63 0901 	sbc.w	r9, r3, r1
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003780:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003784:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003788:	4690      	mov	r8, r2
 800378a:	4699      	mov	r9, r3
 800378c:	4623      	mov	r3, r4
 800378e:	eb18 0303 	adds.w	r3, r8, r3
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	462b      	mov	r3, r5
 8003796:	eb49 0303 	adc.w	r3, r9, r3
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80037a8:	4629      	mov	r1, r5
 80037aa:	024b      	lsls	r3, r1, #9
 80037ac:	4621      	mov	r1, r4
 80037ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037b2:	4621      	mov	r1, r4
 80037b4:	024a      	lsls	r2, r1, #9
 80037b6:	4610      	mov	r0, r2
 80037b8:	4619      	mov	r1, r3
 80037ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037be:	2200      	movs	r2, #0
 80037c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80037c2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80037c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037c8:	f7fc fd22 	bl	8000210 <__aeabi_uldivmod>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4613      	mov	r3, r2
 80037d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037d6:	e065      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x420>
 80037d8:	40023800 	.word	0x40023800
 80037dc:	00f42400 	.word	0x00f42400
 80037e0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e4:	4b3d      	ldr	r3, [pc, #244]	; (80038dc <HAL_RCC_GetSysClockFreq+0x458>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	099b      	lsrs	r3, r3, #6
 80037ea:	2200      	movs	r2, #0
 80037ec:	4618      	mov	r0, r3
 80037ee:	4611      	mov	r1, r2
 80037f0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037f4:	653b      	str	r3, [r7, #80]	; 0x50
 80037f6:	2300      	movs	r3, #0
 80037f8:	657b      	str	r3, [r7, #84]	; 0x54
 80037fa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80037fe:	4642      	mov	r2, r8
 8003800:	464b      	mov	r3, r9
 8003802:	f04f 0000 	mov.w	r0, #0
 8003806:	f04f 0100 	mov.w	r1, #0
 800380a:	0159      	lsls	r1, r3, #5
 800380c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003810:	0150      	lsls	r0, r2, #5
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4641      	mov	r1, r8
 8003818:	1a51      	subs	r1, r2, r1
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	4649      	mov	r1, r9
 800381e:	eb63 0301 	sbc.w	r3, r3, r1
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003830:	4659      	mov	r1, fp
 8003832:	018b      	lsls	r3, r1, #6
 8003834:	4651      	mov	r1, sl
 8003836:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800383a:	4651      	mov	r1, sl
 800383c:	018a      	lsls	r2, r1, #6
 800383e:	4651      	mov	r1, sl
 8003840:	1a54      	subs	r4, r2, r1
 8003842:	4659      	mov	r1, fp
 8003844:	eb63 0501 	sbc.w	r5, r3, r1
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	00eb      	lsls	r3, r5, #3
 8003852:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003856:	00e2      	lsls	r2, r4, #3
 8003858:	4614      	mov	r4, r2
 800385a:	461d      	mov	r5, r3
 800385c:	4643      	mov	r3, r8
 800385e:	18e3      	adds	r3, r4, r3
 8003860:	603b      	str	r3, [r7, #0]
 8003862:	464b      	mov	r3, r9
 8003864:	eb45 0303 	adc.w	r3, r5, r3
 8003868:	607b      	str	r3, [r7, #4]
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003876:	4629      	mov	r1, r5
 8003878:	028b      	lsls	r3, r1, #10
 800387a:	4621      	mov	r1, r4
 800387c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003880:	4621      	mov	r1, r4
 8003882:	028a      	lsls	r2, r1, #10
 8003884:	4610      	mov	r0, r2
 8003886:	4619      	mov	r1, r3
 8003888:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800388c:	2200      	movs	r2, #0
 800388e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003890:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003892:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003896:	f7fc fcbb 	bl	8000210 <__aeabi_uldivmod>
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	4613      	mov	r3, r2
 80038a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80038a4:	4b0d      	ldr	r3, [pc, #52]	; (80038dc <HAL_RCC_GetSysClockFreq+0x458>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	0f1b      	lsrs	r3, r3, #28
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80038b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80038ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80038be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80038c2:	e003      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038c4:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80038c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80038ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	37b8      	adds	r7, #184	; 0xb8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038da:	bf00      	nop
 80038dc:	40023800 	.word	0x40023800
 80038e0:	00f42400 	.word	0x00f42400

080038e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e28d      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 8083 	beq.w	8003a0a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003904:	4b94      	ldr	r3, [pc, #592]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 030c 	and.w	r3, r3, #12
 800390c:	2b04      	cmp	r3, #4
 800390e:	d019      	beq.n	8003944 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003910:	4b91      	ldr	r3, [pc, #580]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003918:	2b08      	cmp	r3, #8
 800391a:	d106      	bne.n	800392a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800391c:	4b8e      	ldr	r3, [pc, #568]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003924:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003928:	d00c      	beq.n	8003944 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800392a:	4b8b      	ldr	r3, [pc, #556]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003932:	2b0c      	cmp	r3, #12
 8003934:	d112      	bne.n	800395c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003936:	4b88      	ldr	r3, [pc, #544]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003942:	d10b      	bne.n	800395c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003944:	4b84      	ldr	r3, [pc, #528]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d05b      	beq.n	8003a08 <HAL_RCC_OscConfig+0x124>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d157      	bne.n	8003a08 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e25a      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003964:	d106      	bne.n	8003974 <HAL_RCC_OscConfig+0x90>
 8003966:	4b7c      	ldr	r3, [pc, #496]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a7b      	ldr	r2, [pc, #492]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 800396c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	e01d      	b.n	80039b0 <HAL_RCC_OscConfig+0xcc>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800397c:	d10c      	bne.n	8003998 <HAL_RCC_OscConfig+0xb4>
 800397e:	4b76      	ldr	r3, [pc, #472]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a75      	ldr	r2, [pc, #468]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	4b73      	ldr	r3, [pc, #460]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a72      	ldr	r2, [pc, #456]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	e00b      	b.n	80039b0 <HAL_RCC_OscConfig+0xcc>
 8003998:	4b6f      	ldr	r3, [pc, #444]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a6e      	ldr	r2, [pc, #440]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 800399e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	4b6c      	ldr	r3, [pc, #432]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a6b      	ldr	r2, [pc, #428]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 80039aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d013      	beq.n	80039e0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b8:	f7fe fa38 	bl	8001e2c <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039c0:	f7fe fa34 	bl	8001e2c <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b64      	cmp	r3, #100	; 0x64
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e21f      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d2:	4b61      	ldr	r3, [pc, #388]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0xdc>
 80039de:	e014      	b.n	8003a0a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e0:	f7fe fa24 	bl	8001e2c <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039e8:	f7fe fa20 	bl	8001e2c <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b64      	cmp	r3, #100	; 0x64
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e20b      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fa:	4b57      	ldr	r3, [pc, #348]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0x104>
 8003a06:	e000      	b.n	8003a0a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d06f      	beq.n	8003af6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a16:	4b50      	ldr	r3, [pc, #320]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d017      	beq.n	8003a52 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a22:	4b4d      	ldr	r3, [pc, #308]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d105      	bne.n	8003a3a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a2e:	4b4a      	ldr	r3, [pc, #296]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00b      	beq.n	8003a52 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a3a:	4b47      	ldr	r3, [pc, #284]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a42:	2b0c      	cmp	r3, #12
 8003a44:	d11c      	bne.n	8003a80 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a46:	4b44      	ldr	r3, [pc, #272]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d116      	bne.n	8003a80 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a52:	4b41      	ldr	r3, [pc, #260]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <HAL_RCC_OscConfig+0x186>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d001      	beq.n	8003a6a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e1d3      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6a:	4b3b      	ldr	r3, [pc, #236]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4937      	ldr	r1, [pc, #220]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7e:	e03a      	b.n	8003af6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d020      	beq.n	8003aca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a88:	4b34      	ldr	r3, [pc, #208]	; (8003b5c <HAL_RCC_OscConfig+0x278>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8e:	f7fe f9cd 	bl	8001e2c <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a96:	f7fe f9c9 	bl	8001e2c <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e1b4      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa8:	4b2b      	ldr	r3, [pc, #172]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f0      	beq.n	8003a96 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab4:	4b28      	ldr	r3, [pc, #160]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	4925      	ldr	r1, [pc, #148]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	600b      	str	r3, [r1, #0]
 8003ac8:	e015      	b.n	8003af6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aca:	4b24      	ldr	r3, [pc, #144]	; (8003b5c <HAL_RCC_OscConfig+0x278>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fe f9ac 	bl	8001e2c <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad8:	f7fe f9a8 	bl	8001e2c <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e193      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aea:	4b1b      	ldr	r3, [pc, #108]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d036      	beq.n	8003b70 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d016      	beq.n	8003b38 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b0a:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <HAL_RCC_OscConfig+0x27c>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b10:	f7fe f98c 	bl	8001e2c <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b18:	f7fe f988 	bl	8001e2c <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e173      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x234>
 8003b36:	e01b      	b.n	8003b70 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b38:	4b09      	ldr	r3, [pc, #36]	; (8003b60 <HAL_RCC_OscConfig+0x27c>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3e:	f7fe f975 	bl	8001e2c <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b44:	e00e      	b.n	8003b64 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b46:	f7fe f971 	bl	8001e2c <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d907      	bls.n	8003b64 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e15c      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	42470000 	.word	0x42470000
 8003b60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b64:	4b8a      	ldr	r3, [pc, #552]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1ea      	bne.n	8003b46 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 8097 	beq.w	8003cac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b82:	4b83      	ldr	r3, [pc, #524]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10f      	bne.n	8003bae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	4b7f      	ldr	r3, [pc, #508]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	4a7e      	ldr	r2, [pc, #504]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b9e:	4b7c      	ldr	r3, [pc, #496]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba6:	60bb      	str	r3, [r7, #8]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003baa:	2301      	movs	r3, #1
 8003bac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bae:	4b79      	ldr	r3, [pc, #484]	; (8003d94 <HAL_RCC_OscConfig+0x4b0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d118      	bne.n	8003bec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bba:	4b76      	ldr	r3, [pc, #472]	; (8003d94 <HAL_RCC_OscConfig+0x4b0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a75      	ldr	r2, [pc, #468]	; (8003d94 <HAL_RCC_OscConfig+0x4b0>)
 8003bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc6:	f7fe f931 	bl	8001e2c <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bce:	f7fe f92d 	bl	8001e2c <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e118      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be0:	4b6c      	ldr	r3, [pc, #432]	; (8003d94 <HAL_RCC_OscConfig+0x4b0>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0f0      	beq.n	8003bce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d106      	bne.n	8003c02 <HAL_RCC_OscConfig+0x31e>
 8003bf4:	4b66      	ldr	r3, [pc, #408]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf8:	4a65      	ldr	r2, [pc, #404]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8003c00:	e01c      	b.n	8003c3c <HAL_RCC_OscConfig+0x358>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	2b05      	cmp	r3, #5
 8003c08:	d10c      	bne.n	8003c24 <HAL_RCC_OscConfig+0x340>
 8003c0a:	4b61      	ldr	r3, [pc, #388]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0e:	4a60      	ldr	r2, [pc, #384]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c10:	f043 0304 	orr.w	r3, r3, #4
 8003c14:	6713      	str	r3, [r2, #112]	; 0x70
 8003c16:	4b5e      	ldr	r3, [pc, #376]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1a:	4a5d      	ldr	r2, [pc, #372]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c1c:	f043 0301 	orr.w	r3, r3, #1
 8003c20:	6713      	str	r3, [r2, #112]	; 0x70
 8003c22:	e00b      	b.n	8003c3c <HAL_RCC_OscConfig+0x358>
 8003c24:	4b5a      	ldr	r3, [pc, #360]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c28:	4a59      	ldr	r2, [pc, #356]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c2a:	f023 0301 	bic.w	r3, r3, #1
 8003c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c30:	4b57      	ldr	r3, [pc, #348]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c34:	4a56      	ldr	r2, [pc, #344]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c36:	f023 0304 	bic.w	r3, r3, #4
 8003c3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d015      	beq.n	8003c70 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c44:	f7fe f8f2 	bl	8001e2c <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c4c:	f7fe f8ee 	bl	8001e2c <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e0d7      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c62:	4b4b      	ldr	r3, [pc, #300]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0ee      	beq.n	8003c4c <HAL_RCC_OscConfig+0x368>
 8003c6e:	e014      	b.n	8003c9a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c70:	f7fe f8dc 	bl	8001e2c <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c76:	e00a      	b.n	8003c8e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c78:	f7fe f8d8 	bl	8001e2c <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e0c1      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c8e:	4b40      	ldr	r3, [pc, #256]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1ee      	bne.n	8003c78 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c9a:	7dfb      	ldrb	r3, [r7, #23]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d105      	bne.n	8003cac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca0:	4b3b      	ldr	r3, [pc, #236]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	4a3a      	ldr	r2, [pc, #232]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003ca6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003caa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80ad 	beq.w	8003e10 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cb6:	4b36      	ldr	r3, [pc, #216]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d060      	beq.n	8003d84 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d145      	bne.n	8003d56 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cca:	4b33      	ldr	r3, [pc, #204]	; (8003d98 <HAL_RCC_OscConfig+0x4b4>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd0:	f7fe f8ac 	bl	8001e2c <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd8:	f7fe f8a8 	bl	8001e2c <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e093      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cea:	4b29      	ldr	r3, [pc, #164]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69da      	ldr	r2, [r3, #28]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	019b      	lsls	r3, r3, #6
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	085b      	lsrs	r3, r3, #1
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	041b      	lsls	r3, r3, #16
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	061b      	lsls	r3, r3, #24
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d20:	071b      	lsls	r3, r3, #28
 8003d22:	491b      	ldr	r1, [pc, #108]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d28:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <HAL_RCC_OscConfig+0x4b4>)
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2e:	f7fe f87d 	bl	8001e2c <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d36:	f7fe f879 	bl	8001e2c <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e064      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d48:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0f0      	beq.n	8003d36 <HAL_RCC_OscConfig+0x452>
 8003d54:	e05c      	b.n	8003e10 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d56:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <HAL_RCC_OscConfig+0x4b4>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fe f866 	bl	8001e2c <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d64:	f7fe f862 	bl	8001e2c <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e04d      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d76:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x480>
 8003d82:	e045      	b.n	8003e10 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d107      	bne.n	8003d9c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e040      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
 8003d90:	40023800 	.word	0x40023800
 8003d94:	40007000 	.word	0x40007000
 8003d98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d9c:	4b1f      	ldr	r3, [pc, #124]	; (8003e1c <HAL_RCC_OscConfig+0x538>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d030      	beq.n	8003e0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d129      	bne.n	8003e0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d122      	bne.n	8003e0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dcc:	4013      	ands	r3, r2
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d119      	bne.n	8003e0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de2:	085b      	lsrs	r3, r3, #1
 8003de4:	3b01      	subs	r3, #1
 8003de6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d10f      	bne.n	8003e0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d107      	bne.n	8003e0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e000      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40023800 	.word	0x40023800

08003e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e041      	b.n	8003eb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d106      	bne.n	8003e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fd feee 	bl	8001c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	f000 f9fe 	bl	8004260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d001      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e04e      	b.n	8003f76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0201 	orr.w	r2, r2, #1
 8003eee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a23      	ldr	r2, [pc, #140]	; (8003f84 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d022      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x80>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f02:	d01d      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x80>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a1f      	ldr	r2, [pc, #124]	; (8003f88 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d018      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x80>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a1e      	ldr	r2, [pc, #120]	; (8003f8c <HAL_TIM_Base_Start_IT+0xcc>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d013      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x80>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a1c      	ldr	r2, [pc, #112]	; (8003f90 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00e      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x80>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a1b      	ldr	r2, [pc, #108]	; (8003f94 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d009      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x80>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a19      	ldr	r2, [pc, #100]	; (8003f98 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d004      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x80>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a18      	ldr	r2, [pc, #96]	; (8003f9c <HAL_TIM_Base_Start_IT+0xdc>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d111      	bne.n	8003f64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b06      	cmp	r3, #6
 8003f50:	d010      	beq.n	8003f74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 0201 	orr.w	r2, r2, #1
 8003f60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f62:	e007      	b.n	8003f74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40010000 	.word	0x40010000
 8003f88:	40000400 	.word	0x40000400
 8003f8c:	40000800 	.word	0x40000800
 8003f90:	40000c00 	.word	0x40000c00
 8003f94:	40010400 	.word	0x40010400
 8003f98:	40014000 	.word	0x40014000
 8003f9c:	40001800 	.word	0x40001800

08003fa0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0201 	bic.w	r2, r2, #1
 8003fb6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6a1a      	ldr	r2, [r3, #32]
 8003fbe:	f241 1311 	movw	r3, #4369	; 0x1111
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10f      	bne.n	8003fe8 <HAL_TIM_Base_Stop_IT+0x48>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6a1a      	ldr	r2, [r3, #32]
 8003fce:	f240 4344 	movw	r3, #1092	; 0x444
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d107      	bne.n	8003fe8 <HAL_TIM_Base_Stop_IT+0x48>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0201 	bic.w	r2, r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b082      	sub	sp, #8
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b02      	cmp	r3, #2
 8004012:	d122      	bne.n	800405a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b02      	cmp	r3, #2
 8004020:	d11b      	bne.n	800405a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f06f 0202 	mvn.w	r2, #2
 800402a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f003 0303 	and.w	r3, r3, #3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f8ee 	bl	8004222 <HAL_TIM_IC_CaptureCallback>
 8004046:	e005      	b.n	8004054 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f8e0 	bl	800420e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f8f1 	bl	8004236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b04      	cmp	r3, #4
 8004066:	d122      	bne.n	80040ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b04      	cmp	r3, #4
 8004074:	d11b      	bne.n	80040ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f06f 0204 	mvn.w	r2, #4
 800407e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f8c4 	bl	8004222 <HAL_TIM_IC_CaptureCallback>
 800409a:	e005      	b.n	80040a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f8b6 	bl	800420e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f8c7 	bl	8004236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d122      	bne.n	8004102 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d11b      	bne.n	8004102 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f06f 0208 	mvn.w	r2, #8
 80040d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2204      	movs	r2, #4
 80040d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f89a 	bl	8004222 <HAL_TIM_IC_CaptureCallback>
 80040ee:	e005      	b.n	80040fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f88c 	bl	800420e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f89d 	bl	8004236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	2b10      	cmp	r3, #16
 800410e:	d122      	bne.n	8004156 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f003 0310 	and.w	r3, r3, #16
 800411a:	2b10      	cmp	r3, #16
 800411c:	d11b      	bne.n	8004156 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f06f 0210 	mvn.w	r2, #16
 8004126:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2208      	movs	r2, #8
 800412c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f870 	bl	8004222 <HAL_TIM_IC_CaptureCallback>
 8004142:	e005      	b.n	8004150 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f862 	bl	800420e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f873 	bl	8004236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b01      	cmp	r3, #1
 8004162:	d10e      	bne.n	8004182 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b01      	cmp	r3, #1
 8004170:	d107      	bne.n	8004182 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f06f 0201 	mvn.w	r2, #1
 800417a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7fd fbe5 	bl	800194c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418c:	2b80      	cmp	r3, #128	; 0x80
 800418e:	d10e      	bne.n	80041ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419a:	2b80      	cmp	r3, #128	; 0x80
 800419c:	d107      	bne.n	80041ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f97f 	bl	80044ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b8:	2b40      	cmp	r3, #64	; 0x40
 80041ba:	d10e      	bne.n	80041da <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c6:	2b40      	cmp	r3, #64	; 0x40
 80041c8:	d107      	bne.n	80041da <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f838 	bl	800424a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	f003 0320 	and.w	r3, r3, #32
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d10e      	bne.n	8004206 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b20      	cmp	r3, #32
 80041f4:	d107      	bne.n	8004206 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f06f 0220 	mvn.w	r2, #32
 80041fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f949 	bl	8004498 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004206:	bf00      	nop
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a40      	ldr	r2, [pc, #256]	; (8004374 <TIM_Base_SetConfig+0x114>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d013      	beq.n	80042a0 <TIM_Base_SetConfig+0x40>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427e:	d00f      	beq.n	80042a0 <TIM_Base_SetConfig+0x40>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a3d      	ldr	r2, [pc, #244]	; (8004378 <TIM_Base_SetConfig+0x118>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d00b      	beq.n	80042a0 <TIM_Base_SetConfig+0x40>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a3c      	ldr	r2, [pc, #240]	; (800437c <TIM_Base_SetConfig+0x11c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d007      	beq.n	80042a0 <TIM_Base_SetConfig+0x40>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a3b      	ldr	r2, [pc, #236]	; (8004380 <TIM_Base_SetConfig+0x120>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d003      	beq.n	80042a0 <TIM_Base_SetConfig+0x40>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a3a      	ldr	r2, [pc, #232]	; (8004384 <TIM_Base_SetConfig+0x124>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d108      	bne.n	80042b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a2f      	ldr	r2, [pc, #188]	; (8004374 <TIM_Base_SetConfig+0x114>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d02b      	beq.n	8004312 <TIM_Base_SetConfig+0xb2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c0:	d027      	beq.n	8004312 <TIM_Base_SetConfig+0xb2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a2c      	ldr	r2, [pc, #176]	; (8004378 <TIM_Base_SetConfig+0x118>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d023      	beq.n	8004312 <TIM_Base_SetConfig+0xb2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a2b      	ldr	r2, [pc, #172]	; (800437c <TIM_Base_SetConfig+0x11c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d01f      	beq.n	8004312 <TIM_Base_SetConfig+0xb2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a2a      	ldr	r2, [pc, #168]	; (8004380 <TIM_Base_SetConfig+0x120>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d01b      	beq.n	8004312 <TIM_Base_SetConfig+0xb2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a29      	ldr	r2, [pc, #164]	; (8004384 <TIM_Base_SetConfig+0x124>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d017      	beq.n	8004312 <TIM_Base_SetConfig+0xb2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a28      	ldr	r2, [pc, #160]	; (8004388 <TIM_Base_SetConfig+0x128>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d013      	beq.n	8004312 <TIM_Base_SetConfig+0xb2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a27      	ldr	r2, [pc, #156]	; (800438c <TIM_Base_SetConfig+0x12c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00f      	beq.n	8004312 <TIM_Base_SetConfig+0xb2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a26      	ldr	r2, [pc, #152]	; (8004390 <TIM_Base_SetConfig+0x130>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00b      	beq.n	8004312 <TIM_Base_SetConfig+0xb2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a25      	ldr	r2, [pc, #148]	; (8004394 <TIM_Base_SetConfig+0x134>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d007      	beq.n	8004312 <TIM_Base_SetConfig+0xb2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a24      	ldr	r2, [pc, #144]	; (8004398 <TIM_Base_SetConfig+0x138>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d003      	beq.n	8004312 <TIM_Base_SetConfig+0xb2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a23      	ldr	r2, [pc, #140]	; (800439c <TIM_Base_SetConfig+0x13c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d108      	bne.n	8004324 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4313      	orrs	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a0a      	ldr	r2, [pc, #40]	; (8004374 <TIM_Base_SetConfig+0x114>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d003      	beq.n	8004358 <TIM_Base_SetConfig+0xf8>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a0c      	ldr	r2, [pc, #48]	; (8004384 <TIM_Base_SetConfig+0x124>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d103      	bne.n	8004360 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	615a      	str	r2, [r3, #20]
}
 8004366:	bf00      	nop
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	40010000 	.word	0x40010000
 8004378:	40000400 	.word	0x40000400
 800437c:	40000800 	.word	0x40000800
 8004380:	40000c00 	.word	0x40000c00
 8004384:	40010400 	.word	0x40010400
 8004388:	40014000 	.word	0x40014000
 800438c:	40014400 	.word	0x40014400
 8004390:	40014800 	.word	0x40014800
 8004394:	40001800 	.word	0x40001800
 8004398:	40001c00 	.word	0x40001c00
 800439c:	40002000 	.word	0x40002000

080043a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d101      	bne.n	80043b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043b4:	2302      	movs	r3, #2
 80043b6:	e05a      	b.n	800446e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a21      	ldr	r2, [pc, #132]	; (800447c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d022      	beq.n	8004442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004404:	d01d      	beq.n	8004442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a1d      	ldr	r2, [pc, #116]	; (8004480 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d018      	beq.n	8004442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a1b      	ldr	r2, [pc, #108]	; (8004484 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d013      	beq.n	8004442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a1a      	ldr	r2, [pc, #104]	; (8004488 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d00e      	beq.n	8004442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a18      	ldr	r2, [pc, #96]	; (800448c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d009      	beq.n	8004442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a17      	ldr	r2, [pc, #92]	; (8004490 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d004      	beq.n	8004442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a15      	ldr	r2, [pc, #84]	; (8004494 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d10c      	bne.n	800445c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004448:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	4313      	orrs	r3, r2
 8004452:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40010000 	.word	0x40010000
 8004480:	40000400 	.word	0x40000400
 8004484:	40000800 	.word	0x40000800
 8004488:	40000c00 	.word	0x40000c00
 800448c:	40010400 	.word	0x40010400
 8004490:	40014000 	.word	0x40014000
 8004494:	40001800 	.word	0x40001800

08004498 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e03f      	b.n	8004552 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d106      	bne.n	80044ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7fd fbf0 	bl	8001ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2224      	movs	r2, #36	; 0x24
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004502:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fd7b 	bl	8005000 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004518:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695a      	ldr	r2, [r3, #20]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004528:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004538:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b08a      	sub	sp, #40	; 0x28
 800455e:	af02      	add	r7, sp, #8
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	603b      	str	r3, [r7, #0]
 8004566:	4613      	mov	r3, r2
 8004568:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800456a:	2300      	movs	r3, #0
 800456c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b20      	cmp	r3, #32
 8004578:	d17c      	bne.n	8004674 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <HAL_UART_Transmit+0x2c>
 8004580:	88fb      	ldrh	r3, [r7, #6]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e075      	b.n	8004676 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <HAL_UART_Transmit+0x3e>
 8004594:	2302      	movs	r3, #2
 8004596:	e06e      	b.n	8004676 <HAL_UART_Transmit+0x11c>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2221      	movs	r2, #33	; 0x21
 80045aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ae:	f7fd fc3d 	bl	8001e2c <HAL_GetTick>
 80045b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	88fa      	ldrh	r2, [r7, #6]
 80045b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	88fa      	ldrh	r2, [r7, #6]
 80045be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c8:	d108      	bne.n	80045dc <HAL_UART_Transmit+0x82>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d104      	bne.n	80045dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	e003      	b.n	80045e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045e0:	2300      	movs	r3, #0
 80045e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80045ec:	e02a      	b.n	8004644 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2200      	movs	r2, #0
 80045f6:	2180      	movs	r1, #128	; 0x80
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 faf9 	bl	8004bf0 <UART_WaitOnFlagUntilTimeout>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e036      	b.n	8004676 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10b      	bne.n	8004626 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800461c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	3302      	adds	r3, #2
 8004622:	61bb      	str	r3, [r7, #24]
 8004624:	e007      	b.n	8004636 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	781a      	ldrb	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	3301      	adds	r3, #1
 8004634:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1cf      	bne.n	80045ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2200      	movs	r2, #0
 8004656:	2140      	movs	r1, #64	; 0x40
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 fac9 	bl	8004bf0 <UART_WaitOnFlagUntilTimeout>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e006      	b.n	8004676 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004670:	2300      	movs	r3, #0
 8004672:	e000      	b.n	8004676 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004674:	2302      	movs	r3, #2
  }
}
 8004676:	4618      	mov	r0, r3
 8004678:	3720      	adds	r7, #32
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b0ba      	sub	sp, #232	; 0xe8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80046be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10f      	bne.n	80046e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d009      	beq.n	80046e6 <HAL_UART_IRQHandler+0x66>
 80046d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046d6:	f003 0320 	and.w	r3, r3, #32
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 fbd3 	bl	8004e8a <UART_Receive_IT>
      return;
 80046e4:	e256      	b.n	8004b94 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 80de 	beq.w	80048ac <HAL_UART_IRQHandler+0x22c>
 80046f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d106      	bne.n	800470a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004700:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 80d1 	beq.w	80048ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800470a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00b      	beq.n	800472e <HAL_UART_IRQHandler+0xae>
 8004716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800471a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471e:	2b00      	cmp	r3, #0
 8004720:	d005      	beq.n	800472e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	f043 0201 	orr.w	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800472e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004732:	f003 0304 	and.w	r3, r3, #4
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00b      	beq.n	8004752 <HAL_UART_IRQHandler+0xd2>
 800473a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d005      	beq.n	8004752 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	f043 0202 	orr.w	r2, r3, #2
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00b      	beq.n	8004776 <HAL_UART_IRQHandler+0xf6>
 800475e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d005      	beq.n	8004776 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f043 0204 	orr.w	r2, r3, #4
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b00      	cmp	r3, #0
 8004780:	d011      	beq.n	80047a6 <HAL_UART_IRQHandler+0x126>
 8004782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b00      	cmp	r3, #0
 800478c:	d105      	bne.n	800479a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800478e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d005      	beq.n	80047a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f043 0208 	orr.w	r2, r3, #8
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 81ed 	beq.w	8004b8a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b4:	f003 0320 	and.w	r3, r3, #32
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d008      	beq.n	80047ce <HAL_UART_IRQHandler+0x14e>
 80047bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 fb5e 	bl	8004e8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d8:	2b40      	cmp	r3, #64	; 0x40
 80047da:	bf0c      	ite	eq
 80047dc:	2301      	moveq	r3, #1
 80047de:	2300      	movne	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d103      	bne.n	80047fa <HAL_UART_IRQHandler+0x17a>
 80047f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d04f      	beq.n	800489a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 fa66 	bl	8004ccc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480a:	2b40      	cmp	r3, #64	; 0x40
 800480c:	d141      	bne.n	8004892 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3314      	adds	r3, #20
 8004814:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004818:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800481c:	e853 3f00 	ldrex	r3, [r3]
 8004820:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004824:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800482c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	3314      	adds	r3, #20
 8004836:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800483a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800483e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004842:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004846:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004852:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1d9      	bne.n	800480e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485e:	2b00      	cmp	r3, #0
 8004860:	d013      	beq.n	800488a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	4a7d      	ldr	r2, [pc, #500]	; (8004a5c <HAL_UART_IRQHandler+0x3dc>)
 8004868:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486e:	4618      	mov	r0, r3
 8004870:	f7fe fad2 	bl	8002e18 <HAL_DMA_Abort_IT>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d016      	beq.n	80048a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004884:	4610      	mov	r0, r2
 8004886:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004888:	e00e      	b.n	80048a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f99a 	bl	8004bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004890:	e00a      	b.n	80048a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f996 	bl	8004bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004898:	e006      	b.n	80048a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f992 	bl	8004bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80048a6:	e170      	b.n	8004b8a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a8:	bf00      	nop
    return;
 80048aa:	e16e      	b.n	8004b8a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	f040 814a 	bne.w	8004b4a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ba:	f003 0310 	and.w	r3, r3, #16
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 8143 	beq.w	8004b4a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 813c 	beq.w	8004b4a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048d2:	2300      	movs	r3, #0
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	60bb      	str	r3, [r7, #8]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f2:	2b40      	cmp	r3, #64	; 0x40
 80048f4:	f040 80b4 	bne.w	8004a60 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004904:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 8140 	beq.w	8004b8e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004912:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004916:	429a      	cmp	r2, r3
 8004918:	f080 8139 	bcs.w	8004b8e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004922:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800492e:	f000 8088 	beq.w	8004a42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	330c      	adds	r3, #12
 8004938:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004940:	e853 3f00 	ldrex	r3, [r3]
 8004944:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004948:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800494c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004950:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	330c      	adds	r3, #12
 800495a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800495e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004962:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800496a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800496e:	e841 2300 	strex	r3, r2, [r1]
 8004972:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004976:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1d9      	bne.n	8004932 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3314      	adds	r3, #20
 8004984:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800498e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004990:	f023 0301 	bic.w	r3, r3, #1
 8004994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3314      	adds	r3, #20
 800499e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1e1      	bne.n	800497e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3314      	adds	r3, #20
 80049c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3314      	adds	r3, #20
 80049da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e3      	bne.n	80049ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	330c      	adds	r3, #12
 8004a06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a0a:	e853 3f00 	ldrex	r3, [r3]
 8004a0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a12:	f023 0310 	bic.w	r3, r3, #16
 8004a16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	330c      	adds	r3, #12
 8004a20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a24:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a2c:	e841 2300 	strex	r3, r2, [r1]
 8004a30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1e3      	bne.n	8004a00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7fe f97b 	bl	8002d38 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	4619      	mov	r1, r3
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f8c0 	bl	8004bd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a58:	e099      	b.n	8004b8e <HAL_UART_IRQHandler+0x50e>
 8004a5a:	bf00      	nop
 8004a5c:	08004d93 	.word	0x08004d93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 808b 	beq.w	8004b92 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004a7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 8086 	beq.w	8004b92 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	330c      	adds	r3, #12
 8004a8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a90:	e853 3f00 	ldrex	r3, [r3]
 8004a94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	330c      	adds	r3, #12
 8004aa6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004aaa:	647a      	str	r2, [r7, #68]	; 0x44
 8004aac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ab0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ab2:	e841 2300 	strex	r3, r2, [r1]
 8004ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1e3      	bne.n	8004a86 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3314      	adds	r3, #20
 8004ac4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	e853 3f00 	ldrex	r3, [r3]
 8004acc:	623b      	str	r3, [r7, #32]
   return(result);
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	f023 0301 	bic.w	r3, r3, #1
 8004ad4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	3314      	adds	r3, #20
 8004ade:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ae2:	633a      	str	r2, [r7, #48]	; 0x30
 8004ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e3      	bne.n	8004abe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	330c      	adds	r3, #12
 8004b0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	e853 3f00 	ldrex	r3, [r3]
 8004b12:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0310 	bic.w	r3, r3, #16
 8004b1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	330c      	adds	r3, #12
 8004b24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b28:	61fa      	str	r2, [r7, #28]
 8004b2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2c:	69b9      	ldr	r1, [r7, #24]
 8004b2e:	69fa      	ldr	r2, [r7, #28]
 8004b30:	e841 2300 	strex	r3, r2, [r1]
 8004b34:	617b      	str	r3, [r7, #20]
   return(result);
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1e3      	bne.n	8004b04 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b40:	4619      	mov	r1, r3
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f848 	bl	8004bd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b48:	e023      	b.n	8004b92 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d009      	beq.n	8004b6a <HAL_UART_IRQHandler+0x4ea>
 8004b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f929 	bl	8004dba <UART_Transmit_IT>
    return;
 8004b68:	e014      	b.n	8004b94 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00e      	beq.n	8004b94 <HAL_UART_IRQHandler+0x514>
 8004b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d008      	beq.n	8004b94 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f969 	bl	8004e5a <UART_EndTransmit_IT>
    return;
 8004b88:	e004      	b.n	8004b94 <HAL_UART_IRQHandler+0x514>
    return;
 8004b8a:	bf00      	nop
 8004b8c:	e002      	b.n	8004b94 <HAL_UART_IRQHandler+0x514>
      return;
 8004b8e:	bf00      	nop
 8004b90:	e000      	b.n	8004b94 <HAL_UART_IRQHandler+0x514>
      return;
 8004b92:	bf00      	nop
  }
}
 8004b94:	37e8      	adds	r7, #232	; 0xe8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop

08004b9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	460b      	mov	r3, r1
 8004be2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b090      	sub	sp, #64	; 0x40
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	603b      	str	r3, [r7, #0]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c00:	e050      	b.n	8004ca4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c08:	d04c      	beq.n	8004ca4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d007      	beq.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c10:	f7fd f90c 	bl	8001e2c <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d241      	bcs.n	8004ca4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	330c      	adds	r3, #12
 8004c26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2a:	e853 3f00 	ldrex	r3, [r3]
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	330c      	adds	r3, #12
 8004c3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c40:	637a      	str	r2, [r7, #52]	; 0x34
 8004c42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c48:	e841 2300 	strex	r3, r2, [r1]
 8004c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1e5      	bne.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3314      	adds	r3, #20
 8004c5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	e853 3f00 	ldrex	r3, [r3]
 8004c62:	613b      	str	r3, [r7, #16]
   return(result);
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	f023 0301 	bic.w	r3, r3, #1
 8004c6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3314      	adds	r3, #20
 8004c72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c74:	623a      	str	r2, [r7, #32]
 8004c76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c78:	69f9      	ldr	r1, [r7, #28]
 8004c7a:	6a3a      	ldr	r2, [r7, #32]
 8004c7c:	e841 2300 	strex	r3, r2, [r1]
 8004c80:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1e5      	bne.n	8004c54 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e00f      	b.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	4013      	ands	r3, r2
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	bf0c      	ite	eq
 8004cb4:	2301      	moveq	r3, #1
 8004cb6:	2300      	movne	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	461a      	mov	r2, r3
 8004cbc:	79fb      	ldrb	r3, [r7, #7]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d09f      	beq.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3740      	adds	r7, #64	; 0x40
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b095      	sub	sp, #84	; 0x54
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	330c      	adds	r3, #12
 8004cda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cde:	e853 3f00 	ldrex	r3, [r3]
 8004ce2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	330c      	adds	r3, #12
 8004cf2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cf4:	643a      	str	r2, [r7, #64]	; 0x40
 8004cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cfc:	e841 2300 	strex	r3, r2, [r1]
 8004d00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e5      	bne.n	8004cd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3314      	adds	r3, #20
 8004d0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	f023 0301 	bic.w	r3, r3, #1
 8004d1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3314      	adds	r3, #20
 8004d26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d30:	e841 2300 	strex	r3, r2, [r1]
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1e5      	bne.n	8004d08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d119      	bne.n	8004d78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	330c      	adds	r3, #12
 8004d4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	e853 3f00 	ldrex	r3, [r3]
 8004d52:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f023 0310 	bic.w	r3, r3, #16
 8004d5a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	330c      	adds	r3, #12
 8004d62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d64:	61ba      	str	r2, [r7, #24]
 8004d66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d68:	6979      	ldr	r1, [r7, #20]
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	e841 2300 	strex	r3, r2, [r1]
 8004d70:	613b      	str	r3, [r7, #16]
   return(result);
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1e5      	bne.n	8004d44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d86:	bf00      	nop
 8004d88:	3754      	adds	r7, #84	; 0x54
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f7ff ff09 	bl	8004bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004db2:	bf00      	nop
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b085      	sub	sp, #20
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b21      	cmp	r3, #33	; 0x21
 8004dcc:	d13e      	bne.n	8004e4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd6:	d114      	bne.n	8004e02 <UART_Transmit_IT+0x48>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d110      	bne.n	8004e02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	461a      	mov	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004df4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	1c9a      	adds	r2, r3, #2
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	621a      	str	r2, [r3, #32]
 8004e00:	e008      	b.n	8004e14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	1c59      	adds	r1, r3, #1
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6211      	str	r1, [r2, #32]
 8004e0c:	781a      	ldrb	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	4619      	mov	r1, r3
 8004e22:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10f      	bne.n	8004e48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e000      	b.n	8004e4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e4c:	2302      	movs	r3, #2
  }
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b082      	sub	sp, #8
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7ff fe8e 	bl	8004b9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b08c      	sub	sp, #48	; 0x30
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b22      	cmp	r3, #34	; 0x22
 8004e9c:	f040 80ab 	bne.w	8004ff6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea8:	d117      	bne.n	8004eda <UART_Receive_IT+0x50>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d113      	bne.n	8004eda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ecc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed2:	1c9a      	adds	r2, r3, #2
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ed8:	e026      	b.n	8004f28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ede:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eec:	d007      	beq.n	8004efe <UART_Receive_IT+0x74>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10a      	bne.n	8004f0c <UART_Receive_IT+0x82>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d106      	bne.n	8004f0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	701a      	strb	r2, [r3, #0]
 8004f0a:	e008      	b.n	8004f1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	4619      	mov	r1, r3
 8004f36:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d15a      	bne.n	8004ff2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0220 	bic.w	r2, r2, #32
 8004f4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695a      	ldr	r2, [r3, #20]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0201 	bic.w	r2, r2, #1
 8004f6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d135      	bne.n	8004fe8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	330c      	adds	r3, #12
 8004f88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	e853 3f00 	ldrex	r3, [r3]
 8004f90:	613b      	str	r3, [r7, #16]
   return(result);
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f023 0310 	bic.w	r3, r3, #16
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	330c      	adds	r3, #12
 8004fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa2:	623a      	str	r2, [r7, #32]
 8004fa4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa6:	69f9      	ldr	r1, [r7, #28]
 8004fa8:	6a3a      	ldr	r2, [r7, #32]
 8004faa:	e841 2300 	strex	r3, r2, [r1]
 8004fae:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1e5      	bne.n	8004f82 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0310 	and.w	r3, r3, #16
 8004fc0:	2b10      	cmp	r3, #16
 8004fc2:	d10a      	bne.n	8004fda <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fde:	4619      	mov	r1, r3
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff fdf9 	bl	8004bd8 <HAL_UARTEx_RxEventCallback>
 8004fe6:	e002      	b.n	8004fee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7ff fde1 	bl	8004bb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	e002      	b.n	8004ff8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	e000      	b.n	8004ff8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004ff6:	2302      	movs	r3, #2
  }
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3730      	adds	r7, #48	; 0x30
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005004:	b0c0      	sub	sp, #256	; 0x100
 8005006:	af00      	add	r7, sp, #0
 8005008:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800500c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501c:	68d9      	ldr	r1, [r3, #12]
 800501e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	ea40 0301 	orr.w	r3, r0, r1
 8005028:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800502a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	431a      	orrs	r2, r3
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	431a      	orrs	r2, r3
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005058:	f021 010c 	bic.w	r1, r1, #12
 800505c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005066:	430b      	orrs	r3, r1
 8005068:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800506a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507a:	6999      	ldr	r1, [r3, #24]
 800507c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	ea40 0301 	orr.w	r3, r0, r1
 8005086:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	4b8f      	ldr	r3, [pc, #572]	; (80052cc <UART_SetConfig+0x2cc>)
 8005090:	429a      	cmp	r2, r3
 8005092:	d005      	beq.n	80050a0 <UART_SetConfig+0xa0>
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	4b8d      	ldr	r3, [pc, #564]	; (80052d0 <UART_SetConfig+0x2d0>)
 800509c:	429a      	cmp	r2, r3
 800509e:	d104      	bne.n	80050aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050a0:	f7fe f9aa 	bl	80033f8 <HAL_RCC_GetPCLK2Freq>
 80050a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80050a8:	e003      	b.n	80050b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050aa:	f7fe f991 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 80050ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050bc:	f040 810c 	bne.w	80052d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050c4:	2200      	movs	r2, #0
 80050c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050d2:	4622      	mov	r2, r4
 80050d4:	462b      	mov	r3, r5
 80050d6:	1891      	adds	r1, r2, r2
 80050d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80050da:	415b      	adcs	r3, r3
 80050dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050e2:	4621      	mov	r1, r4
 80050e4:	eb12 0801 	adds.w	r8, r2, r1
 80050e8:	4629      	mov	r1, r5
 80050ea:	eb43 0901 	adc.w	r9, r3, r1
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	f04f 0300 	mov.w	r3, #0
 80050f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005102:	4690      	mov	r8, r2
 8005104:	4699      	mov	r9, r3
 8005106:	4623      	mov	r3, r4
 8005108:	eb18 0303 	adds.w	r3, r8, r3
 800510c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005110:	462b      	mov	r3, r5
 8005112:	eb49 0303 	adc.w	r3, r9, r3
 8005116:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800511a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005126:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800512a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800512e:	460b      	mov	r3, r1
 8005130:	18db      	adds	r3, r3, r3
 8005132:	653b      	str	r3, [r7, #80]	; 0x50
 8005134:	4613      	mov	r3, r2
 8005136:	eb42 0303 	adc.w	r3, r2, r3
 800513a:	657b      	str	r3, [r7, #84]	; 0x54
 800513c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005140:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005144:	f7fb f864 	bl	8000210 <__aeabi_uldivmod>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	4b61      	ldr	r3, [pc, #388]	; (80052d4 <UART_SetConfig+0x2d4>)
 800514e:	fba3 2302 	umull	r2, r3, r3, r2
 8005152:	095b      	lsrs	r3, r3, #5
 8005154:	011c      	lsls	r4, r3, #4
 8005156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800515a:	2200      	movs	r2, #0
 800515c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005160:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005164:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005168:	4642      	mov	r2, r8
 800516a:	464b      	mov	r3, r9
 800516c:	1891      	adds	r1, r2, r2
 800516e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005170:	415b      	adcs	r3, r3
 8005172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005174:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005178:	4641      	mov	r1, r8
 800517a:	eb12 0a01 	adds.w	sl, r2, r1
 800517e:	4649      	mov	r1, r9
 8005180:	eb43 0b01 	adc.w	fp, r3, r1
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	f04f 0300 	mov.w	r3, #0
 800518c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005190:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005194:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005198:	4692      	mov	sl, r2
 800519a:	469b      	mov	fp, r3
 800519c:	4643      	mov	r3, r8
 800519e:	eb1a 0303 	adds.w	r3, sl, r3
 80051a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051a6:	464b      	mov	r3, r9
 80051a8:	eb4b 0303 	adc.w	r3, fp, r3
 80051ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051c4:	460b      	mov	r3, r1
 80051c6:	18db      	adds	r3, r3, r3
 80051c8:	643b      	str	r3, [r7, #64]	; 0x40
 80051ca:	4613      	mov	r3, r2
 80051cc:	eb42 0303 	adc.w	r3, r2, r3
 80051d0:	647b      	str	r3, [r7, #68]	; 0x44
 80051d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051da:	f7fb f819 	bl	8000210 <__aeabi_uldivmod>
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	4611      	mov	r1, r2
 80051e4:	4b3b      	ldr	r3, [pc, #236]	; (80052d4 <UART_SetConfig+0x2d4>)
 80051e6:	fba3 2301 	umull	r2, r3, r3, r1
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	2264      	movs	r2, #100	; 0x64
 80051ee:	fb02 f303 	mul.w	r3, r2, r3
 80051f2:	1acb      	subs	r3, r1, r3
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051fa:	4b36      	ldr	r3, [pc, #216]	; (80052d4 <UART_SetConfig+0x2d4>)
 80051fc:	fba3 2302 	umull	r2, r3, r3, r2
 8005200:	095b      	lsrs	r3, r3, #5
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005208:	441c      	add	r4, r3
 800520a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800520e:	2200      	movs	r2, #0
 8005210:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005214:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005218:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800521c:	4642      	mov	r2, r8
 800521e:	464b      	mov	r3, r9
 8005220:	1891      	adds	r1, r2, r2
 8005222:	63b9      	str	r1, [r7, #56]	; 0x38
 8005224:	415b      	adcs	r3, r3
 8005226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005228:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800522c:	4641      	mov	r1, r8
 800522e:	1851      	adds	r1, r2, r1
 8005230:	6339      	str	r1, [r7, #48]	; 0x30
 8005232:	4649      	mov	r1, r9
 8005234:	414b      	adcs	r3, r1
 8005236:	637b      	str	r3, [r7, #52]	; 0x34
 8005238:	f04f 0200 	mov.w	r2, #0
 800523c:	f04f 0300 	mov.w	r3, #0
 8005240:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005244:	4659      	mov	r1, fp
 8005246:	00cb      	lsls	r3, r1, #3
 8005248:	4651      	mov	r1, sl
 800524a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800524e:	4651      	mov	r1, sl
 8005250:	00ca      	lsls	r2, r1, #3
 8005252:	4610      	mov	r0, r2
 8005254:	4619      	mov	r1, r3
 8005256:	4603      	mov	r3, r0
 8005258:	4642      	mov	r2, r8
 800525a:	189b      	adds	r3, r3, r2
 800525c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005260:	464b      	mov	r3, r9
 8005262:	460a      	mov	r2, r1
 8005264:	eb42 0303 	adc.w	r3, r2, r3
 8005268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800526c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005278:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800527c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005280:	460b      	mov	r3, r1
 8005282:	18db      	adds	r3, r3, r3
 8005284:	62bb      	str	r3, [r7, #40]	; 0x28
 8005286:	4613      	mov	r3, r2
 8005288:	eb42 0303 	adc.w	r3, r2, r3
 800528c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800528e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005292:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005296:	f7fa ffbb 	bl	8000210 <__aeabi_uldivmod>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	4b0d      	ldr	r3, [pc, #52]	; (80052d4 <UART_SetConfig+0x2d4>)
 80052a0:	fba3 1302 	umull	r1, r3, r3, r2
 80052a4:	095b      	lsrs	r3, r3, #5
 80052a6:	2164      	movs	r1, #100	; 0x64
 80052a8:	fb01 f303 	mul.w	r3, r1, r3
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	3332      	adds	r3, #50	; 0x32
 80052b2:	4a08      	ldr	r2, [pc, #32]	; (80052d4 <UART_SetConfig+0x2d4>)
 80052b4:	fba2 2303 	umull	r2, r3, r2, r3
 80052b8:	095b      	lsrs	r3, r3, #5
 80052ba:	f003 0207 	and.w	r2, r3, #7
 80052be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4422      	add	r2, r4
 80052c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052c8:	e106      	b.n	80054d8 <UART_SetConfig+0x4d8>
 80052ca:	bf00      	nop
 80052cc:	40011000 	.word	0x40011000
 80052d0:	40011400 	.word	0x40011400
 80052d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052dc:	2200      	movs	r2, #0
 80052de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052ea:	4642      	mov	r2, r8
 80052ec:	464b      	mov	r3, r9
 80052ee:	1891      	adds	r1, r2, r2
 80052f0:	6239      	str	r1, [r7, #32]
 80052f2:	415b      	adcs	r3, r3
 80052f4:	627b      	str	r3, [r7, #36]	; 0x24
 80052f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052fa:	4641      	mov	r1, r8
 80052fc:	1854      	adds	r4, r2, r1
 80052fe:	4649      	mov	r1, r9
 8005300:	eb43 0501 	adc.w	r5, r3, r1
 8005304:	f04f 0200 	mov.w	r2, #0
 8005308:	f04f 0300 	mov.w	r3, #0
 800530c:	00eb      	lsls	r3, r5, #3
 800530e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005312:	00e2      	lsls	r2, r4, #3
 8005314:	4614      	mov	r4, r2
 8005316:	461d      	mov	r5, r3
 8005318:	4643      	mov	r3, r8
 800531a:	18e3      	adds	r3, r4, r3
 800531c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005320:	464b      	mov	r3, r9
 8005322:	eb45 0303 	adc.w	r3, r5, r3
 8005326:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800532a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005336:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800533a:	f04f 0200 	mov.w	r2, #0
 800533e:	f04f 0300 	mov.w	r3, #0
 8005342:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005346:	4629      	mov	r1, r5
 8005348:	008b      	lsls	r3, r1, #2
 800534a:	4621      	mov	r1, r4
 800534c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005350:	4621      	mov	r1, r4
 8005352:	008a      	lsls	r2, r1, #2
 8005354:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005358:	f7fa ff5a 	bl	8000210 <__aeabi_uldivmod>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4b60      	ldr	r3, [pc, #384]	; (80054e4 <UART_SetConfig+0x4e4>)
 8005362:	fba3 2302 	umull	r2, r3, r3, r2
 8005366:	095b      	lsrs	r3, r3, #5
 8005368:	011c      	lsls	r4, r3, #4
 800536a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800536e:	2200      	movs	r2, #0
 8005370:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005374:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005378:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800537c:	4642      	mov	r2, r8
 800537e:	464b      	mov	r3, r9
 8005380:	1891      	adds	r1, r2, r2
 8005382:	61b9      	str	r1, [r7, #24]
 8005384:	415b      	adcs	r3, r3
 8005386:	61fb      	str	r3, [r7, #28]
 8005388:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800538c:	4641      	mov	r1, r8
 800538e:	1851      	adds	r1, r2, r1
 8005390:	6139      	str	r1, [r7, #16]
 8005392:	4649      	mov	r1, r9
 8005394:	414b      	adcs	r3, r1
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	f04f 0200 	mov.w	r2, #0
 800539c:	f04f 0300 	mov.w	r3, #0
 80053a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053a4:	4659      	mov	r1, fp
 80053a6:	00cb      	lsls	r3, r1, #3
 80053a8:	4651      	mov	r1, sl
 80053aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ae:	4651      	mov	r1, sl
 80053b0:	00ca      	lsls	r2, r1, #3
 80053b2:	4610      	mov	r0, r2
 80053b4:	4619      	mov	r1, r3
 80053b6:	4603      	mov	r3, r0
 80053b8:	4642      	mov	r2, r8
 80053ba:	189b      	adds	r3, r3, r2
 80053bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053c0:	464b      	mov	r3, r9
 80053c2:	460a      	mov	r2, r1
 80053c4:	eb42 0303 	adc.w	r3, r2, r3
 80053c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80053d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	f04f 0300 	mov.w	r3, #0
 80053e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053e4:	4649      	mov	r1, r9
 80053e6:	008b      	lsls	r3, r1, #2
 80053e8:	4641      	mov	r1, r8
 80053ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053ee:	4641      	mov	r1, r8
 80053f0:	008a      	lsls	r2, r1, #2
 80053f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053f6:	f7fa ff0b 	bl	8000210 <__aeabi_uldivmod>
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	4611      	mov	r1, r2
 8005400:	4b38      	ldr	r3, [pc, #224]	; (80054e4 <UART_SetConfig+0x4e4>)
 8005402:	fba3 2301 	umull	r2, r3, r3, r1
 8005406:	095b      	lsrs	r3, r3, #5
 8005408:	2264      	movs	r2, #100	; 0x64
 800540a:	fb02 f303 	mul.w	r3, r2, r3
 800540e:	1acb      	subs	r3, r1, r3
 8005410:	011b      	lsls	r3, r3, #4
 8005412:	3332      	adds	r3, #50	; 0x32
 8005414:	4a33      	ldr	r2, [pc, #204]	; (80054e4 <UART_SetConfig+0x4e4>)
 8005416:	fba2 2303 	umull	r2, r3, r2, r3
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005420:	441c      	add	r4, r3
 8005422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005426:	2200      	movs	r2, #0
 8005428:	673b      	str	r3, [r7, #112]	; 0x70
 800542a:	677a      	str	r2, [r7, #116]	; 0x74
 800542c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005430:	4642      	mov	r2, r8
 8005432:	464b      	mov	r3, r9
 8005434:	1891      	adds	r1, r2, r2
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	415b      	adcs	r3, r3
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005440:	4641      	mov	r1, r8
 8005442:	1851      	adds	r1, r2, r1
 8005444:	6039      	str	r1, [r7, #0]
 8005446:	4649      	mov	r1, r9
 8005448:	414b      	adcs	r3, r1
 800544a:	607b      	str	r3, [r7, #4]
 800544c:	f04f 0200 	mov.w	r2, #0
 8005450:	f04f 0300 	mov.w	r3, #0
 8005454:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005458:	4659      	mov	r1, fp
 800545a:	00cb      	lsls	r3, r1, #3
 800545c:	4651      	mov	r1, sl
 800545e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005462:	4651      	mov	r1, sl
 8005464:	00ca      	lsls	r2, r1, #3
 8005466:	4610      	mov	r0, r2
 8005468:	4619      	mov	r1, r3
 800546a:	4603      	mov	r3, r0
 800546c:	4642      	mov	r2, r8
 800546e:	189b      	adds	r3, r3, r2
 8005470:	66bb      	str	r3, [r7, #104]	; 0x68
 8005472:	464b      	mov	r3, r9
 8005474:	460a      	mov	r2, r1
 8005476:	eb42 0303 	adc.w	r3, r2, r3
 800547a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800547c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	663b      	str	r3, [r7, #96]	; 0x60
 8005486:	667a      	str	r2, [r7, #100]	; 0x64
 8005488:	f04f 0200 	mov.w	r2, #0
 800548c:	f04f 0300 	mov.w	r3, #0
 8005490:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005494:	4649      	mov	r1, r9
 8005496:	008b      	lsls	r3, r1, #2
 8005498:	4641      	mov	r1, r8
 800549a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800549e:	4641      	mov	r1, r8
 80054a0:	008a      	lsls	r2, r1, #2
 80054a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054a6:	f7fa feb3 	bl	8000210 <__aeabi_uldivmod>
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	4b0d      	ldr	r3, [pc, #52]	; (80054e4 <UART_SetConfig+0x4e4>)
 80054b0:	fba3 1302 	umull	r1, r3, r3, r2
 80054b4:	095b      	lsrs	r3, r3, #5
 80054b6:	2164      	movs	r1, #100	; 0x64
 80054b8:	fb01 f303 	mul.w	r3, r1, r3
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	3332      	adds	r3, #50	; 0x32
 80054c2:	4a08      	ldr	r2, [pc, #32]	; (80054e4 <UART_SetConfig+0x4e4>)
 80054c4:	fba2 2303 	umull	r2, r3, r2, r3
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	f003 020f 	and.w	r2, r3, #15
 80054ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4422      	add	r2, r4
 80054d6:	609a      	str	r2, [r3, #8]
}
 80054d8:	bf00      	nop
 80054da:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054de:	46bd      	mov	sp, r7
 80054e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054e4:	51eb851f 	.word	0x51eb851f

080054e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	4603      	mov	r3, r0
 80054f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80054f2:	2300      	movs	r3, #0
 80054f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80054f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054fa:	2b84      	cmp	r3, #132	; 0x84
 80054fc:	d005      	beq.n	800550a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80054fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	4413      	add	r3, r2
 8005506:	3303      	adds	r3, #3
 8005508:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800550a:	68fb      	ldr	r3, [r7, #12]
}
 800550c:	4618      	mov	r0, r3
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800551c:	f000 faf6 	bl	8005b0c <vTaskStartScheduler>
  
  return osOK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	bd80      	pop	{r7, pc}

08005526 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005526:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005528:	b089      	sub	sp, #36	; 0x24
 800552a:	af04      	add	r7, sp, #16
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d020      	beq.n	800557a <osThreadCreate+0x54>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01c      	beq.n	800557a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685c      	ldr	r4, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	691e      	ldr	r6, [r3, #16]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005552:	4618      	mov	r0, r3
 8005554:	f7ff ffc8 	bl	80054e8 <makeFreeRtosPriority>
 8005558:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005562:	9202      	str	r2, [sp, #8]
 8005564:	9301      	str	r3, [sp, #4]
 8005566:	9100      	str	r1, [sp, #0]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	4632      	mov	r2, r6
 800556c:	4629      	mov	r1, r5
 800556e:	4620      	mov	r0, r4
 8005570:	f000 f8ed 	bl	800574e <xTaskCreateStatic>
 8005574:	4603      	mov	r3, r0
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	e01c      	b.n	80055b4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685c      	ldr	r4, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005586:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff ffaa 	bl	80054e8 <makeFreeRtosPriority>
 8005594:	4602      	mov	r2, r0
 8005596:	f107 030c 	add.w	r3, r7, #12
 800559a:	9301      	str	r3, [sp, #4]
 800559c:	9200      	str	r2, [sp, #0]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	4632      	mov	r2, r6
 80055a2:	4629      	mov	r1, r5
 80055a4:	4620      	mov	r0, r4
 80055a6:	f000 f92f 	bl	8005808 <xTaskCreate>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d001      	beq.n	80055b4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	e000      	b.n	80055b6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80055b4:	68fb      	ldr	r3, [r7, #12]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055be <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <osDelay+0x16>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	e000      	b.n	80055d6 <osDelay+0x18>
 80055d4:	2301      	movs	r3, #1
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 fa64 	bl	8005aa4 <vTaskDelay>
  
  return osOK;
 80055dc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f103 0208 	add.w	r2, r3, #8
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f04f 32ff 	mov.w	r2, #4294967295
 80055fe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f103 0208 	add.w	r2, r3, #8
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f103 0208 	add.w	r2, r3, #8
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	601a      	str	r2, [r3, #0]
}
 800567c:	bf00      	nop
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569e:	d103      	bne.n	80056a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	e00c      	b.n	80056c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3308      	adds	r3, #8
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	e002      	b.n	80056b6 <vListInsert+0x2e>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d2f6      	bcs.n	80056b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	1c5a      	adds	r2, r3, #1
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	601a      	str	r2, [r3, #0]
}
 80056ee:	bf00      	nop
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056fa:	b480      	push	{r7}
 80056fc:	b085      	sub	sp, #20
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6892      	ldr	r2, [r2, #8]
 8005710:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6852      	ldr	r2, [r2, #4]
 800571a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	429a      	cmp	r2, r3
 8005724:	d103      	bne.n	800572e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	1e5a      	subs	r2, r3, #1
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800574e:	b580      	push	{r7, lr}
 8005750:	b08e      	sub	sp, #56	; 0x38
 8005752:	af04      	add	r7, sp, #16
 8005754:	60f8      	str	r0, [r7, #12]
 8005756:	60b9      	str	r1, [r7, #8]
 8005758:	607a      	str	r2, [r7, #4]
 800575a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800575c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10a      	bne.n	8005778 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005774:	bf00      	nop
 8005776:	e7fe      	b.n	8005776 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10a      	bne.n	8005794 <xTaskCreateStatic+0x46>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	61fb      	str	r3, [r7, #28]
}
 8005790:	bf00      	nop
 8005792:	e7fe      	b.n	8005792 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005794:	23a0      	movs	r3, #160	; 0xa0
 8005796:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	2ba0      	cmp	r3, #160	; 0xa0
 800579c:	d00a      	beq.n	80057b4 <xTaskCreateStatic+0x66>
	__asm volatile
 800579e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	61bb      	str	r3, [r7, #24]
}
 80057b0:	bf00      	nop
 80057b2:	e7fe      	b.n	80057b2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d01e      	beq.n	80057fa <xTaskCreateStatic+0xac>
 80057bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d01b      	beq.n	80057fa <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057ca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057d4:	2300      	movs	r3, #0
 80057d6:	9303      	str	r3, [sp, #12]
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	9302      	str	r3, [sp, #8]
 80057dc:	f107 0314 	add.w	r3, r7, #20
 80057e0:	9301      	str	r3, [sp, #4]
 80057e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	68b9      	ldr	r1, [r7, #8]
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 f851 	bl	8005894 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057f4:	f000 f8ec 	bl	80059d0 <prvAddNewTaskToReadyList>
 80057f8:	e001      	b.n	80057fe <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80057fa:	2300      	movs	r3, #0
 80057fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057fe:	697b      	ldr	r3, [r7, #20]
	}
 8005800:	4618      	mov	r0, r3
 8005802:	3728      	adds	r7, #40	; 0x28
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08c      	sub	sp, #48	; 0x30
 800580c:	af04      	add	r7, sp, #16
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	603b      	str	r3, [r7, #0]
 8005814:	4613      	mov	r3, r2
 8005816:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005818:	88fb      	ldrh	r3, [r7, #6]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4618      	mov	r0, r3
 800581e:	f000 fef3 	bl	8006608 <pvPortMalloc>
 8005822:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00e      	beq.n	8005848 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800582a:	20a0      	movs	r0, #160	; 0xa0
 800582c:	f000 feec 	bl	8006608 <pvPortMalloc>
 8005830:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	631a      	str	r2, [r3, #48]	; 0x30
 800583e:	e005      	b.n	800584c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005840:	6978      	ldr	r0, [r7, #20]
 8005842:	f000 ffad 	bl	80067a0 <vPortFree>
 8005846:	e001      	b.n	800584c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005848:	2300      	movs	r3, #0
 800584a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d017      	beq.n	8005882 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800585a:	88fa      	ldrh	r2, [r7, #6]
 800585c:	2300      	movs	r3, #0
 800585e:	9303      	str	r3, [sp, #12]
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	9302      	str	r3, [sp, #8]
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005866:	9301      	str	r3, [sp, #4]
 8005868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	68b9      	ldr	r1, [r7, #8]
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 f80f 	bl	8005894 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005876:	69f8      	ldr	r0, [r7, #28]
 8005878:	f000 f8aa 	bl	80059d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800587c:	2301      	movs	r3, #1
 800587e:	61bb      	str	r3, [r7, #24]
 8005880:	e002      	b.n	8005888 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005882:	f04f 33ff 	mov.w	r3, #4294967295
 8005886:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005888:	69bb      	ldr	r3, [r7, #24]
	}
 800588a:	4618      	mov	r0, r3
 800588c:	3720      	adds	r7, #32
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
	...

08005894 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80058ac:	3b01      	subs	r3, #1
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	f023 0307 	bic.w	r3, r3, #7
 80058ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	f003 0307 	and.w	r3, r3, #7
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <prvInitialiseNewTask+0x48>
	__asm volatile
 80058c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ca:	f383 8811 	msr	BASEPRI, r3
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	617b      	str	r3, [r7, #20]
}
 80058d8:	bf00      	nop
 80058da:	e7fe      	b.n	80058da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d01f      	beq.n	8005922 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058e2:	2300      	movs	r3, #0
 80058e4:	61fb      	str	r3, [r7, #28]
 80058e6:	e012      	b.n	800590e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	4413      	add	r3, r2
 80058ee:	7819      	ldrb	r1, [r3, #0]
 80058f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	4413      	add	r3, r2
 80058f6:	3334      	adds	r3, #52	; 0x34
 80058f8:	460a      	mov	r2, r1
 80058fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	4413      	add	r3, r2
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d006      	beq.n	8005916 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	3301      	adds	r3, #1
 800590c:	61fb      	str	r3, [r7, #28]
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	2b0f      	cmp	r3, #15
 8005912:	d9e9      	bls.n	80058e8 <prvInitialiseNewTask+0x54>
 8005914:	e000      	b.n	8005918 <prvInitialiseNewTask+0x84>
			{
				break;
 8005916:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005920:	e003      	b.n	800592a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800592a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592c:	2b06      	cmp	r3, #6
 800592e:	d901      	bls.n	8005934 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005930:	2306      	movs	r3, #6
 8005932:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005938:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800593a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800593e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005942:	2200      	movs	r2, #0
 8005944:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005948:	3304      	adds	r3, #4
 800594a:	4618      	mov	r0, r3
 800594c:	f7ff fe6b 	bl	8005626 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	3318      	adds	r3, #24
 8005954:	4618      	mov	r0, r3
 8005956:	f7ff fe66 	bl	8005626 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800595e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	f1c3 0207 	rsb	r2, r3, #7
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800596a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800596e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005972:	2200      	movs	r2, #0
 8005974:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	2200      	movs	r2, #0
 800597c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005982:	334c      	adds	r3, #76	; 0x4c
 8005984:	224c      	movs	r2, #76	; 0x4c
 8005986:	2100      	movs	r1, #0
 8005988:	4618      	mov	r0, r3
 800598a:	f001 f827 	bl	80069dc <memset>
 800598e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005990:	4a0c      	ldr	r2, [pc, #48]	; (80059c4 <prvInitialiseNewTask+0x130>)
 8005992:	651a      	str	r2, [r3, #80]	; 0x50
 8005994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005996:	4a0c      	ldr	r2, [pc, #48]	; (80059c8 <prvInitialiseNewTask+0x134>)
 8005998:	655a      	str	r2, [r3, #84]	; 0x54
 800599a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599c:	4a0b      	ldr	r2, [pc, #44]	; (80059cc <prvInitialiseNewTask+0x138>)
 800599e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	68f9      	ldr	r1, [r7, #12]
 80059a4:	69b8      	ldr	r0, [r7, #24]
 80059a6:	f000 fc1f 	bl	80061e8 <pxPortInitialiseStack>
 80059aa:	4602      	mov	r2, r0
 80059ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059bc:	bf00      	nop
 80059be:	3720      	adds	r7, #32
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	2000823c 	.word	0x2000823c
 80059c8:	200082a4 	.word	0x200082a4
 80059cc:	2000830c 	.word	0x2000830c

080059d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059d8:	f000 fd34 	bl	8006444 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059dc:	4b2a      	ldr	r3, [pc, #168]	; (8005a88 <prvAddNewTaskToReadyList+0xb8>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3301      	adds	r3, #1
 80059e2:	4a29      	ldr	r2, [pc, #164]	; (8005a88 <prvAddNewTaskToReadyList+0xb8>)
 80059e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059e6:	4b29      	ldr	r3, [pc, #164]	; (8005a8c <prvAddNewTaskToReadyList+0xbc>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d109      	bne.n	8005a02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059ee:	4a27      	ldr	r2, [pc, #156]	; (8005a8c <prvAddNewTaskToReadyList+0xbc>)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059f4:	4b24      	ldr	r3, [pc, #144]	; (8005a88 <prvAddNewTaskToReadyList+0xb8>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d110      	bne.n	8005a1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059fc:	f000 facc 	bl	8005f98 <prvInitialiseTaskLists>
 8005a00:	e00d      	b.n	8005a1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a02:	4b23      	ldr	r3, [pc, #140]	; (8005a90 <prvAddNewTaskToReadyList+0xc0>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d109      	bne.n	8005a1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a0a:	4b20      	ldr	r3, [pc, #128]	; (8005a8c <prvAddNewTaskToReadyList+0xbc>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d802      	bhi.n	8005a1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a18:	4a1c      	ldr	r2, [pc, #112]	; (8005a8c <prvAddNewTaskToReadyList+0xbc>)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a1e:	4b1d      	ldr	r3, [pc, #116]	; (8005a94 <prvAddNewTaskToReadyList+0xc4>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3301      	adds	r3, #1
 8005a24:	4a1b      	ldr	r2, [pc, #108]	; (8005a94 <prvAddNewTaskToReadyList+0xc4>)
 8005a26:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	409a      	lsls	r2, r3
 8005a30:	4b19      	ldr	r3, [pc, #100]	; (8005a98 <prvAddNewTaskToReadyList+0xc8>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	4a18      	ldr	r2, [pc, #96]	; (8005a98 <prvAddNewTaskToReadyList+0xc8>)
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4a15      	ldr	r2, [pc, #84]	; (8005a9c <prvAddNewTaskToReadyList+0xcc>)
 8005a48:	441a      	add	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	4619      	mov	r1, r3
 8005a50:	4610      	mov	r0, r2
 8005a52:	f7ff fdf5 	bl	8005640 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a56:	f000 fd25 	bl	80064a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a5a:	4b0d      	ldr	r3, [pc, #52]	; (8005a90 <prvAddNewTaskToReadyList+0xc0>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00e      	beq.n	8005a80 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a62:	4b0a      	ldr	r3, [pc, #40]	; (8005a8c <prvAddNewTaskToReadyList+0xbc>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d207      	bcs.n	8005a80 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a70:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <prvAddNewTaskToReadyList+0xd0>)
 8005a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a80:	bf00      	nop
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	200045e8 	.word	0x200045e8
 8005a8c:	200044e8 	.word	0x200044e8
 8005a90:	200045f4 	.word	0x200045f4
 8005a94:	20004604 	.word	0x20004604
 8005a98:	200045f0 	.word	0x200045f0
 8005a9c:	200044ec 	.word	0x200044ec
 8005aa0:	e000ed04 	.word	0xe000ed04

08005aa4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005aac:	2300      	movs	r3, #0
 8005aae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d017      	beq.n	8005ae6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ab6:	4b13      	ldr	r3, [pc, #76]	; (8005b04 <vTaskDelay+0x60>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <vTaskDelay+0x30>
	__asm volatile
 8005abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	60bb      	str	r3, [r7, #8]
}
 8005ad0:	bf00      	nop
 8005ad2:	e7fe      	b.n	8005ad2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ad4:	f000 f884 	bl	8005be0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ad8:	2100      	movs	r1, #0
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fb1e 	bl	800611c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ae0:	f000 f88c 	bl	8005bfc <xTaskResumeAll>
 8005ae4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d107      	bne.n	8005afc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005aec:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <vTaskDelay+0x64>)
 8005aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005afc:	bf00      	nop
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	20004610 	.word	0x20004610
 8005b08:	e000ed04 	.word	0xe000ed04

08005b0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08a      	sub	sp, #40	; 0x28
 8005b10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b16:	2300      	movs	r3, #0
 8005b18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b1a:	463a      	mov	r2, r7
 8005b1c:	1d39      	adds	r1, r7, #4
 8005b1e:	f107 0308 	add.w	r3, r7, #8
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fb fdb6 	bl	8001694 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b28:	6839      	ldr	r1, [r7, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	9202      	str	r2, [sp, #8]
 8005b30:	9301      	str	r3, [sp, #4]
 8005b32:	2300      	movs	r3, #0
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	2300      	movs	r3, #0
 8005b38:	460a      	mov	r2, r1
 8005b3a:	4921      	ldr	r1, [pc, #132]	; (8005bc0 <vTaskStartScheduler+0xb4>)
 8005b3c:	4821      	ldr	r0, [pc, #132]	; (8005bc4 <vTaskStartScheduler+0xb8>)
 8005b3e:	f7ff fe06 	bl	800574e <xTaskCreateStatic>
 8005b42:	4603      	mov	r3, r0
 8005b44:	4a20      	ldr	r2, [pc, #128]	; (8005bc8 <vTaskStartScheduler+0xbc>)
 8005b46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b48:	4b1f      	ldr	r3, [pc, #124]	; (8005bc8 <vTaskStartScheduler+0xbc>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b50:	2301      	movs	r3, #1
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	e001      	b.n	8005b5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b56:	2300      	movs	r3, #0
 8005b58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d11b      	bne.n	8005b98 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	613b      	str	r3, [r7, #16]
}
 8005b72:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b74:	4b15      	ldr	r3, [pc, #84]	; (8005bcc <vTaskStartScheduler+0xc0>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	334c      	adds	r3, #76	; 0x4c
 8005b7a:	4a15      	ldr	r2, [pc, #84]	; (8005bd0 <vTaskStartScheduler+0xc4>)
 8005b7c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b7e:	4b15      	ldr	r3, [pc, #84]	; (8005bd4 <vTaskStartScheduler+0xc8>)
 8005b80:	f04f 32ff 	mov.w	r2, #4294967295
 8005b84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b86:	4b14      	ldr	r3, [pc, #80]	; (8005bd8 <vTaskStartScheduler+0xcc>)
 8005b88:	2201      	movs	r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b8c:	4b13      	ldr	r3, [pc, #76]	; (8005bdc <vTaskStartScheduler+0xd0>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b92:	f000 fbb5 	bl	8006300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b96:	e00e      	b.n	8005bb6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9e:	d10a      	bne.n	8005bb6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	60fb      	str	r3, [r7, #12]
}
 8005bb2:	bf00      	nop
 8005bb4:	e7fe      	b.n	8005bb4 <vTaskStartScheduler+0xa8>
}
 8005bb6:	bf00      	nop
 8005bb8:	3718      	adds	r7, #24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	08006e1c 	.word	0x08006e1c
 8005bc4:	08005f69 	.word	0x08005f69
 8005bc8:	2000460c 	.word	0x2000460c
 8005bcc:	200044e8 	.word	0x200044e8
 8005bd0:	20000070 	.word	0x20000070
 8005bd4:	20004608 	.word	0x20004608
 8005bd8:	200045f4 	.word	0x200045f4
 8005bdc:	200045ec 	.word	0x200045ec

08005be0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005be4:	4b04      	ldr	r3, [pc, #16]	; (8005bf8 <vTaskSuspendAll+0x18>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3301      	adds	r3, #1
 8005bea:	4a03      	ldr	r2, [pc, #12]	; (8005bf8 <vTaskSuspendAll+0x18>)
 8005bec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005bee:	bf00      	nop
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	20004610 	.word	0x20004610

08005bfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c02:	2300      	movs	r3, #0
 8005c04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c06:	2300      	movs	r3, #0
 8005c08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c0a:	4b41      	ldr	r3, [pc, #260]	; (8005d10 <xTaskResumeAll+0x114>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10a      	bne.n	8005c28 <xTaskResumeAll+0x2c>
	__asm volatile
 8005c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	603b      	str	r3, [r7, #0]
}
 8005c24:	bf00      	nop
 8005c26:	e7fe      	b.n	8005c26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c28:	f000 fc0c 	bl	8006444 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c2c:	4b38      	ldr	r3, [pc, #224]	; (8005d10 <xTaskResumeAll+0x114>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3b01      	subs	r3, #1
 8005c32:	4a37      	ldr	r2, [pc, #220]	; (8005d10 <xTaskResumeAll+0x114>)
 8005c34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c36:	4b36      	ldr	r3, [pc, #216]	; (8005d10 <xTaskResumeAll+0x114>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d161      	bne.n	8005d02 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c3e:	4b35      	ldr	r3, [pc, #212]	; (8005d14 <xTaskResumeAll+0x118>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d05d      	beq.n	8005d02 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c46:	e02e      	b.n	8005ca6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c48:	4b33      	ldr	r3, [pc, #204]	; (8005d18 <xTaskResumeAll+0x11c>)
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	3318      	adds	r3, #24
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7ff fd50 	bl	80056fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7ff fd4b 	bl	80056fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	2201      	movs	r2, #1
 8005c6a:	409a      	lsls	r2, r3
 8005c6c:	4b2b      	ldr	r3, [pc, #172]	; (8005d1c <xTaskResumeAll+0x120>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	4a2a      	ldr	r2, [pc, #168]	; (8005d1c <xTaskResumeAll+0x120>)
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4a27      	ldr	r2, [pc, #156]	; (8005d20 <xTaskResumeAll+0x124>)
 8005c84:	441a      	add	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	3304      	adds	r3, #4
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	f7ff fcd7 	bl	8005640 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c96:	4b23      	ldr	r3, [pc, #140]	; (8005d24 <xTaskResumeAll+0x128>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d302      	bcc.n	8005ca6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005ca0:	4b21      	ldr	r3, [pc, #132]	; (8005d28 <xTaskResumeAll+0x12c>)
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ca6:	4b1c      	ldr	r3, [pc, #112]	; (8005d18 <xTaskResumeAll+0x11c>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1cc      	bne.n	8005c48 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cb4:	f000 fa12 	bl	80060dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005cb8:	4b1c      	ldr	r3, [pc, #112]	; (8005d2c <xTaskResumeAll+0x130>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d010      	beq.n	8005ce6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005cc4:	f000 f836 	bl	8005d34 <xTaskIncrementTick>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005cce:	4b16      	ldr	r3, [pc, #88]	; (8005d28 <xTaskResumeAll+0x12c>)
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1f1      	bne.n	8005cc4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005ce0:	4b12      	ldr	r3, [pc, #72]	; (8005d2c <xTaskResumeAll+0x130>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ce6:	4b10      	ldr	r3, [pc, #64]	; (8005d28 <xTaskResumeAll+0x12c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d009      	beq.n	8005d02 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005cf2:	4b0f      	ldr	r3, [pc, #60]	; (8005d30 <xTaskResumeAll+0x134>)
 8005cf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d02:	f000 fbcf 	bl	80064a4 <vPortExitCritical>

	return xAlreadyYielded;
 8005d06:	68bb      	ldr	r3, [r7, #8]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	20004610 	.word	0x20004610
 8005d14:	200045e8 	.word	0x200045e8
 8005d18:	200045a8 	.word	0x200045a8
 8005d1c:	200045f0 	.word	0x200045f0
 8005d20:	200044ec 	.word	0x200044ec
 8005d24:	200044e8 	.word	0x200044e8
 8005d28:	200045fc 	.word	0x200045fc
 8005d2c:	200045f8 	.word	0x200045f8
 8005d30:	e000ed04 	.word	0xe000ed04

08005d34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d3e:	4b4e      	ldr	r3, [pc, #312]	; (8005e78 <xTaskIncrementTick+0x144>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f040 808e 	bne.w	8005e64 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d48:	4b4c      	ldr	r3, [pc, #304]	; (8005e7c <xTaskIncrementTick+0x148>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d50:	4a4a      	ldr	r2, [pc, #296]	; (8005e7c <xTaskIncrementTick+0x148>)
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d120      	bne.n	8005d9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d5c:	4b48      	ldr	r3, [pc, #288]	; (8005e80 <xTaskIncrementTick+0x14c>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00a      	beq.n	8005d7c <xTaskIncrementTick+0x48>
	__asm volatile
 8005d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6a:	f383 8811 	msr	BASEPRI, r3
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	603b      	str	r3, [r7, #0]
}
 8005d78:	bf00      	nop
 8005d7a:	e7fe      	b.n	8005d7a <xTaskIncrementTick+0x46>
 8005d7c:	4b40      	ldr	r3, [pc, #256]	; (8005e80 <xTaskIncrementTick+0x14c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	60fb      	str	r3, [r7, #12]
 8005d82:	4b40      	ldr	r3, [pc, #256]	; (8005e84 <xTaskIncrementTick+0x150>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a3e      	ldr	r2, [pc, #248]	; (8005e80 <xTaskIncrementTick+0x14c>)
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	4a3e      	ldr	r2, [pc, #248]	; (8005e84 <xTaskIncrementTick+0x150>)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6013      	str	r3, [r2, #0]
 8005d90:	4b3d      	ldr	r3, [pc, #244]	; (8005e88 <xTaskIncrementTick+0x154>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3301      	adds	r3, #1
 8005d96:	4a3c      	ldr	r2, [pc, #240]	; (8005e88 <xTaskIncrementTick+0x154>)
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	f000 f99f 	bl	80060dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d9e:	4b3b      	ldr	r3, [pc, #236]	; (8005e8c <xTaskIncrementTick+0x158>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d348      	bcc.n	8005e3a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005da8:	4b35      	ldr	r3, [pc, #212]	; (8005e80 <xTaskIncrementTick+0x14c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d104      	bne.n	8005dbc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005db2:	4b36      	ldr	r3, [pc, #216]	; (8005e8c <xTaskIncrementTick+0x158>)
 8005db4:	f04f 32ff 	mov.w	r2, #4294967295
 8005db8:	601a      	str	r2, [r3, #0]
					break;
 8005dba:	e03e      	b.n	8005e3a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dbc:	4b30      	ldr	r3, [pc, #192]	; (8005e80 <xTaskIncrementTick+0x14c>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d203      	bcs.n	8005ddc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005dd4:	4a2d      	ldr	r2, [pc, #180]	; (8005e8c <xTaskIncrementTick+0x158>)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005dda:	e02e      	b.n	8005e3a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	3304      	adds	r3, #4
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7ff fc8a 	bl	80056fa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d004      	beq.n	8005df8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	3318      	adds	r3, #24
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7ff fc81 	bl	80056fa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	409a      	lsls	r2, r3
 8005e00:	4b23      	ldr	r3, [pc, #140]	; (8005e90 <xTaskIncrementTick+0x15c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	4a22      	ldr	r2, [pc, #136]	; (8005e90 <xTaskIncrementTick+0x15c>)
 8005e08:	6013      	str	r3, [r2, #0]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0e:	4613      	mov	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4a1f      	ldr	r2, [pc, #124]	; (8005e94 <xTaskIncrementTick+0x160>)
 8005e18:	441a      	add	r2, r3
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	4619      	mov	r1, r3
 8005e20:	4610      	mov	r0, r2
 8005e22:	f7ff fc0d 	bl	8005640 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2a:	4b1b      	ldr	r3, [pc, #108]	; (8005e98 <xTaskIncrementTick+0x164>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d3b9      	bcc.n	8005da8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005e34:	2301      	movs	r3, #1
 8005e36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e38:	e7b6      	b.n	8005da8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e3a:	4b17      	ldr	r3, [pc, #92]	; (8005e98 <xTaskIncrementTick+0x164>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e40:	4914      	ldr	r1, [pc, #80]	; (8005e94 <xTaskIncrementTick+0x160>)
 8005e42:	4613      	mov	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	440b      	add	r3, r1
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d901      	bls.n	8005e56 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005e52:	2301      	movs	r3, #1
 8005e54:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e56:	4b11      	ldr	r3, [pc, #68]	; (8005e9c <xTaskIncrementTick+0x168>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d007      	beq.n	8005e6e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	617b      	str	r3, [r7, #20]
 8005e62:	e004      	b.n	8005e6e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e64:	4b0e      	ldr	r3, [pc, #56]	; (8005ea0 <xTaskIncrementTick+0x16c>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	4a0d      	ldr	r2, [pc, #52]	; (8005ea0 <xTaskIncrementTick+0x16c>)
 8005e6c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e6e:	697b      	ldr	r3, [r7, #20]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3718      	adds	r7, #24
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	20004610 	.word	0x20004610
 8005e7c:	200045ec 	.word	0x200045ec
 8005e80:	200045a0 	.word	0x200045a0
 8005e84:	200045a4 	.word	0x200045a4
 8005e88:	20004600 	.word	0x20004600
 8005e8c:	20004608 	.word	0x20004608
 8005e90:	200045f0 	.word	0x200045f0
 8005e94:	200044ec 	.word	0x200044ec
 8005e98:	200044e8 	.word	0x200044e8
 8005e9c:	200045fc 	.word	0x200045fc
 8005ea0:	200045f8 	.word	0x200045f8

08005ea4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005eaa:	4b29      	ldr	r3, [pc, #164]	; (8005f50 <vTaskSwitchContext+0xac>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005eb2:	4b28      	ldr	r3, [pc, #160]	; (8005f54 <vTaskSwitchContext+0xb0>)
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005eb8:	e044      	b.n	8005f44 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005eba:	4b26      	ldr	r3, [pc, #152]	; (8005f54 <vTaskSwitchContext+0xb0>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ec0:	4b25      	ldr	r3, [pc, #148]	; (8005f58 <vTaskSwitchContext+0xb4>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	fab3 f383 	clz	r3, r3
 8005ecc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005ece:	7afb      	ldrb	r3, [r7, #11]
 8005ed0:	f1c3 031f 	rsb	r3, r3, #31
 8005ed4:	617b      	str	r3, [r7, #20]
 8005ed6:	4921      	ldr	r1, [pc, #132]	; (8005f5c <vTaskSwitchContext+0xb8>)
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	4613      	mov	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	440b      	add	r3, r1
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10a      	bne.n	8005f00 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	607b      	str	r3, [r7, #4]
}
 8005efc:	bf00      	nop
 8005efe:	e7fe      	b.n	8005efe <vTaskSwitchContext+0x5a>
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	4613      	mov	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4a14      	ldr	r2, [pc, #80]	; (8005f5c <vTaskSwitchContext+0xb8>)
 8005f0c:	4413      	add	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	605a      	str	r2, [r3, #4]
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	3308      	adds	r3, #8
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d104      	bne.n	8005f30 <vTaskSwitchContext+0x8c>
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	605a      	str	r2, [r3, #4]
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	4a0a      	ldr	r2, [pc, #40]	; (8005f60 <vTaskSwitchContext+0xbc>)
 8005f38:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f3a:	4b09      	ldr	r3, [pc, #36]	; (8005f60 <vTaskSwitchContext+0xbc>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	334c      	adds	r3, #76	; 0x4c
 8005f40:	4a08      	ldr	r2, [pc, #32]	; (8005f64 <vTaskSwitchContext+0xc0>)
 8005f42:	6013      	str	r3, [r2, #0]
}
 8005f44:	bf00      	nop
 8005f46:	371c      	adds	r7, #28
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	20004610 	.word	0x20004610
 8005f54:	200045fc 	.word	0x200045fc
 8005f58:	200045f0 	.word	0x200045f0
 8005f5c:	200044ec 	.word	0x200044ec
 8005f60:	200044e8 	.word	0x200044e8
 8005f64:	20000070 	.word	0x20000070

08005f68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f70:	f000 f852 	bl	8006018 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f74:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <prvIdleTask+0x28>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d9f9      	bls.n	8005f70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f7c:	4b05      	ldr	r3, [pc, #20]	; (8005f94 <prvIdleTask+0x2c>)
 8005f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f8c:	e7f0      	b.n	8005f70 <prvIdleTask+0x8>
 8005f8e:	bf00      	nop
 8005f90:	200044ec 	.word	0x200044ec
 8005f94:	e000ed04 	.word	0xe000ed04

08005f98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	607b      	str	r3, [r7, #4]
 8005fa2:	e00c      	b.n	8005fbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4a12      	ldr	r2, [pc, #72]	; (8005ff8 <prvInitialiseTaskLists+0x60>)
 8005fb0:	4413      	add	r3, r2
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7ff fb17 	bl	80055e6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	607b      	str	r3, [r7, #4]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b06      	cmp	r3, #6
 8005fc2:	d9ef      	bls.n	8005fa4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005fc4:	480d      	ldr	r0, [pc, #52]	; (8005ffc <prvInitialiseTaskLists+0x64>)
 8005fc6:	f7ff fb0e 	bl	80055e6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fca:	480d      	ldr	r0, [pc, #52]	; (8006000 <prvInitialiseTaskLists+0x68>)
 8005fcc:	f7ff fb0b 	bl	80055e6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fd0:	480c      	ldr	r0, [pc, #48]	; (8006004 <prvInitialiseTaskLists+0x6c>)
 8005fd2:	f7ff fb08 	bl	80055e6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005fd6:	480c      	ldr	r0, [pc, #48]	; (8006008 <prvInitialiseTaskLists+0x70>)
 8005fd8:	f7ff fb05 	bl	80055e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005fdc:	480b      	ldr	r0, [pc, #44]	; (800600c <prvInitialiseTaskLists+0x74>)
 8005fde:	f7ff fb02 	bl	80055e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005fe2:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <prvInitialiseTaskLists+0x78>)
 8005fe4:	4a05      	ldr	r2, [pc, #20]	; (8005ffc <prvInitialiseTaskLists+0x64>)
 8005fe6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fe8:	4b0a      	ldr	r3, [pc, #40]	; (8006014 <prvInitialiseTaskLists+0x7c>)
 8005fea:	4a05      	ldr	r2, [pc, #20]	; (8006000 <prvInitialiseTaskLists+0x68>)
 8005fec:	601a      	str	r2, [r3, #0]
}
 8005fee:	bf00      	nop
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	200044ec 	.word	0x200044ec
 8005ffc:	20004578 	.word	0x20004578
 8006000:	2000458c 	.word	0x2000458c
 8006004:	200045a8 	.word	0x200045a8
 8006008:	200045bc 	.word	0x200045bc
 800600c:	200045d4 	.word	0x200045d4
 8006010:	200045a0 	.word	0x200045a0
 8006014:	200045a4 	.word	0x200045a4

08006018 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800601e:	e019      	b.n	8006054 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006020:	f000 fa10 	bl	8006444 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006024:	4b10      	ldr	r3, [pc, #64]	; (8006068 <prvCheckTasksWaitingTermination+0x50>)
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3304      	adds	r3, #4
 8006030:	4618      	mov	r0, r3
 8006032:	f7ff fb62 	bl	80056fa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006036:	4b0d      	ldr	r3, [pc, #52]	; (800606c <prvCheckTasksWaitingTermination+0x54>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3b01      	subs	r3, #1
 800603c:	4a0b      	ldr	r2, [pc, #44]	; (800606c <prvCheckTasksWaitingTermination+0x54>)
 800603e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006040:	4b0b      	ldr	r3, [pc, #44]	; (8006070 <prvCheckTasksWaitingTermination+0x58>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3b01      	subs	r3, #1
 8006046:	4a0a      	ldr	r2, [pc, #40]	; (8006070 <prvCheckTasksWaitingTermination+0x58>)
 8006048:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800604a:	f000 fa2b 	bl	80064a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f810 	bl	8006074 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006054:	4b06      	ldr	r3, [pc, #24]	; (8006070 <prvCheckTasksWaitingTermination+0x58>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e1      	bne.n	8006020 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800605c:	bf00      	nop
 800605e:	bf00      	nop
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	200045bc 	.word	0x200045bc
 800606c:	200045e8 	.word	0x200045e8
 8006070:	200045d0 	.word	0x200045d0

08006074 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	334c      	adds	r3, #76	; 0x4c
 8006080:	4618      	mov	r0, r3
 8006082:	f000 fcb3 	bl	80069ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800608c:	2b00      	cmp	r3, #0
 800608e:	d108      	bne.n	80060a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006094:	4618      	mov	r0, r3
 8006096:	f000 fb83 	bl	80067a0 <vPortFree>
				vPortFree( pxTCB );
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fb80 	bl	80067a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80060a0:	e018      	b.n	80060d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d103      	bne.n	80060b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 fb77 	bl	80067a0 <vPortFree>
	}
 80060b2:	e00f      	b.n	80060d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d00a      	beq.n	80060d4 <prvDeleteTCB+0x60>
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	60fb      	str	r3, [r7, #12]
}
 80060d0:	bf00      	nop
 80060d2:	e7fe      	b.n	80060d2 <prvDeleteTCB+0x5e>
	}
 80060d4:	bf00      	nop
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060e2:	4b0c      	ldr	r3, [pc, #48]	; (8006114 <prvResetNextTaskUnblockTime+0x38>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d104      	bne.n	80060f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060ec:	4b0a      	ldr	r3, [pc, #40]	; (8006118 <prvResetNextTaskUnblockTime+0x3c>)
 80060ee:	f04f 32ff 	mov.w	r2, #4294967295
 80060f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060f4:	e008      	b.n	8006108 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060f6:	4b07      	ldr	r3, [pc, #28]	; (8006114 <prvResetNextTaskUnblockTime+0x38>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	4a04      	ldr	r2, [pc, #16]	; (8006118 <prvResetNextTaskUnblockTime+0x3c>)
 8006106:	6013      	str	r3, [r2, #0]
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	200045a0 	.word	0x200045a0
 8006118:	20004608 	.word	0x20004608

0800611c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006126:	4b29      	ldr	r3, [pc, #164]	; (80061cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800612c:	4b28      	ldr	r3, [pc, #160]	; (80061d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3304      	adds	r3, #4
 8006132:	4618      	mov	r0, r3
 8006134:	f7ff fae1 	bl	80056fa <uxListRemove>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10b      	bne.n	8006156 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800613e:	4b24      	ldr	r3, [pc, #144]	; (80061d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006144:	2201      	movs	r2, #1
 8006146:	fa02 f303 	lsl.w	r3, r2, r3
 800614a:	43da      	mvns	r2, r3
 800614c:	4b21      	ldr	r3, [pc, #132]	; (80061d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4013      	ands	r3, r2
 8006152:	4a20      	ldr	r2, [pc, #128]	; (80061d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006154:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615c:	d10a      	bne.n	8006174 <prvAddCurrentTaskToDelayedList+0x58>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d007      	beq.n	8006174 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006164:	4b1a      	ldr	r3, [pc, #104]	; (80061d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3304      	adds	r3, #4
 800616a:	4619      	mov	r1, r3
 800616c:	481a      	ldr	r0, [pc, #104]	; (80061d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800616e:	f7ff fa67 	bl	8005640 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006172:	e026      	b.n	80061c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4413      	add	r3, r2
 800617a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800617c:	4b14      	ldr	r3, [pc, #80]	; (80061d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	429a      	cmp	r2, r3
 800618a:	d209      	bcs.n	80061a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800618c:	4b13      	ldr	r3, [pc, #76]	; (80061dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	4b0f      	ldr	r3, [pc, #60]	; (80061d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3304      	adds	r3, #4
 8006196:	4619      	mov	r1, r3
 8006198:	4610      	mov	r0, r2
 800619a:	f7ff fa75 	bl	8005688 <vListInsert>
}
 800619e:	e010      	b.n	80061c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061a0:	4b0f      	ldr	r3, [pc, #60]	; (80061e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	4b0a      	ldr	r3, [pc, #40]	; (80061d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3304      	adds	r3, #4
 80061aa:	4619      	mov	r1, r3
 80061ac:	4610      	mov	r0, r2
 80061ae:	f7ff fa6b 	bl	8005688 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061b2:	4b0c      	ldr	r3, [pc, #48]	; (80061e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d202      	bcs.n	80061c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80061bc:	4a09      	ldr	r2, [pc, #36]	; (80061e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	6013      	str	r3, [r2, #0]
}
 80061c2:	bf00      	nop
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	200045ec 	.word	0x200045ec
 80061d0:	200044e8 	.word	0x200044e8
 80061d4:	200045f0 	.word	0x200045f0
 80061d8:	200045d4 	.word	0x200045d4
 80061dc:	200045a4 	.word	0x200045a4
 80061e0:	200045a0 	.word	0x200045a0
 80061e4:	20004608 	.word	0x20004608

080061e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	3b04      	subs	r3, #4
 80061f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006200:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3b04      	subs	r3, #4
 8006206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f023 0201 	bic.w	r2, r3, #1
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	3b04      	subs	r3, #4
 8006216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006218:	4a0c      	ldr	r2, [pc, #48]	; (800624c <pxPortInitialiseStack+0x64>)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3b14      	subs	r3, #20
 8006222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3b04      	subs	r3, #4
 800622e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f06f 0202 	mvn.w	r2, #2
 8006236:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	3b20      	subs	r3, #32
 800623c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800623e:	68fb      	ldr	r3, [r7, #12]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	08006251 	.word	0x08006251

08006250 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006256:	2300      	movs	r3, #0
 8006258:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800625a:	4b12      	ldr	r3, [pc, #72]	; (80062a4 <prvTaskExitError+0x54>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006262:	d00a      	beq.n	800627a <prvTaskExitError+0x2a>
	__asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	60fb      	str	r3, [r7, #12]
}
 8006276:	bf00      	nop
 8006278:	e7fe      	b.n	8006278 <prvTaskExitError+0x28>
	__asm volatile
 800627a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627e:	f383 8811 	msr	BASEPRI, r3
 8006282:	f3bf 8f6f 	isb	sy
 8006286:	f3bf 8f4f 	dsb	sy
 800628a:	60bb      	str	r3, [r7, #8]
}
 800628c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800628e:	bf00      	nop
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0fc      	beq.n	8006290 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006296:	bf00      	nop
 8006298:	bf00      	nop
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	20000020 	.word	0x20000020
	...

080062b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062b0:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <pxCurrentTCBConst2>)
 80062b2:	6819      	ldr	r1, [r3, #0]
 80062b4:	6808      	ldr	r0, [r1, #0]
 80062b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ba:	f380 8809 	msr	PSP, r0
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f04f 0000 	mov.w	r0, #0
 80062c6:	f380 8811 	msr	BASEPRI, r0
 80062ca:	4770      	bx	lr
 80062cc:	f3af 8000 	nop.w

080062d0 <pxCurrentTCBConst2>:
 80062d0:	200044e8 	.word	0x200044e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop

080062d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80062d8:	4808      	ldr	r0, [pc, #32]	; (80062fc <prvPortStartFirstTask+0x24>)
 80062da:	6800      	ldr	r0, [r0, #0]
 80062dc:	6800      	ldr	r0, [r0, #0]
 80062de:	f380 8808 	msr	MSP, r0
 80062e2:	f04f 0000 	mov.w	r0, #0
 80062e6:	f380 8814 	msr	CONTROL, r0
 80062ea:	b662      	cpsie	i
 80062ec:	b661      	cpsie	f
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	df00      	svc	0
 80062f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062fa:	bf00      	nop
 80062fc:	e000ed08 	.word	0xe000ed08

08006300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006306:	4b46      	ldr	r3, [pc, #280]	; (8006420 <xPortStartScheduler+0x120>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a46      	ldr	r2, [pc, #280]	; (8006424 <xPortStartScheduler+0x124>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d10a      	bne.n	8006326 <xPortStartScheduler+0x26>
	__asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	613b      	str	r3, [r7, #16]
}
 8006322:	bf00      	nop
 8006324:	e7fe      	b.n	8006324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006326:	4b3e      	ldr	r3, [pc, #248]	; (8006420 <xPortStartScheduler+0x120>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a3f      	ldr	r2, [pc, #252]	; (8006428 <xPortStartScheduler+0x128>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d10a      	bne.n	8006346 <xPortStartScheduler+0x46>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	60fb      	str	r3, [r7, #12]
}
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006346:	4b39      	ldr	r3, [pc, #228]	; (800642c <xPortStartScheduler+0x12c>)
 8006348:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	b2db      	uxtb	r3, r3
 8006350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	22ff      	movs	r2, #255	; 0xff
 8006356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006360:	78fb      	ldrb	r3, [r7, #3]
 8006362:	b2db      	uxtb	r3, r3
 8006364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006368:	b2da      	uxtb	r2, r3
 800636a:	4b31      	ldr	r3, [pc, #196]	; (8006430 <xPortStartScheduler+0x130>)
 800636c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800636e:	4b31      	ldr	r3, [pc, #196]	; (8006434 <xPortStartScheduler+0x134>)
 8006370:	2207      	movs	r2, #7
 8006372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006374:	e009      	b.n	800638a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006376:	4b2f      	ldr	r3, [pc, #188]	; (8006434 <xPortStartScheduler+0x134>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3b01      	subs	r3, #1
 800637c:	4a2d      	ldr	r2, [pc, #180]	; (8006434 <xPortStartScheduler+0x134>)
 800637e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	b2db      	uxtb	r3, r3
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	b2db      	uxtb	r3, r3
 8006388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800638a:	78fb      	ldrb	r3, [r7, #3]
 800638c:	b2db      	uxtb	r3, r3
 800638e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006392:	2b80      	cmp	r3, #128	; 0x80
 8006394:	d0ef      	beq.n	8006376 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006396:	4b27      	ldr	r3, [pc, #156]	; (8006434 <xPortStartScheduler+0x134>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f1c3 0307 	rsb	r3, r3, #7
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d00a      	beq.n	80063b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	60bb      	str	r3, [r7, #8]
}
 80063b4:	bf00      	nop
 80063b6:	e7fe      	b.n	80063b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063b8:	4b1e      	ldr	r3, [pc, #120]	; (8006434 <xPortStartScheduler+0x134>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	021b      	lsls	r3, r3, #8
 80063be:	4a1d      	ldr	r2, [pc, #116]	; (8006434 <xPortStartScheduler+0x134>)
 80063c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063c2:	4b1c      	ldr	r3, [pc, #112]	; (8006434 <xPortStartScheduler+0x134>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063ca:	4a1a      	ldr	r2, [pc, #104]	; (8006434 <xPortStartScheduler+0x134>)
 80063cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063d6:	4b18      	ldr	r3, [pc, #96]	; (8006438 <xPortStartScheduler+0x138>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a17      	ldr	r2, [pc, #92]	; (8006438 <xPortStartScheduler+0x138>)
 80063dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063e2:	4b15      	ldr	r3, [pc, #84]	; (8006438 <xPortStartScheduler+0x138>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a14      	ldr	r2, [pc, #80]	; (8006438 <xPortStartScheduler+0x138>)
 80063e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063ee:	f000 f8dd 	bl	80065ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063f2:	4b12      	ldr	r3, [pc, #72]	; (800643c <xPortStartScheduler+0x13c>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063f8:	f000 f8fc 	bl	80065f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063fc:	4b10      	ldr	r3, [pc, #64]	; (8006440 <xPortStartScheduler+0x140>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a0f      	ldr	r2, [pc, #60]	; (8006440 <xPortStartScheduler+0x140>)
 8006402:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006406:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006408:	f7ff ff66 	bl	80062d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800640c:	f7ff fd4a 	bl	8005ea4 <vTaskSwitchContext>
	prvTaskExitError();
 8006410:	f7ff ff1e 	bl	8006250 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3718      	adds	r7, #24
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	e000ed00 	.word	0xe000ed00
 8006424:	410fc271 	.word	0x410fc271
 8006428:	410fc270 	.word	0x410fc270
 800642c:	e000e400 	.word	0xe000e400
 8006430:	20004614 	.word	0x20004614
 8006434:	20004618 	.word	0x20004618
 8006438:	e000ed20 	.word	0xe000ed20
 800643c:	20000020 	.word	0x20000020
 8006440:	e000ef34 	.word	0xe000ef34

08006444 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	607b      	str	r3, [r7, #4]
}
 800645c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800645e:	4b0f      	ldr	r3, [pc, #60]	; (800649c <vPortEnterCritical+0x58>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3301      	adds	r3, #1
 8006464:	4a0d      	ldr	r2, [pc, #52]	; (800649c <vPortEnterCritical+0x58>)
 8006466:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006468:	4b0c      	ldr	r3, [pc, #48]	; (800649c <vPortEnterCritical+0x58>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d10f      	bne.n	8006490 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006470:	4b0b      	ldr	r3, [pc, #44]	; (80064a0 <vPortEnterCritical+0x5c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <vPortEnterCritical+0x4c>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	603b      	str	r3, [r7, #0]
}
 800648c:	bf00      	nop
 800648e:	e7fe      	b.n	800648e <vPortEnterCritical+0x4a>
	}
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	20000020 	.word	0x20000020
 80064a0:	e000ed04 	.word	0xe000ed04

080064a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064aa:	4b12      	ldr	r3, [pc, #72]	; (80064f4 <vPortExitCritical+0x50>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10a      	bne.n	80064c8 <vPortExitCritical+0x24>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	607b      	str	r3, [r7, #4]
}
 80064c4:	bf00      	nop
 80064c6:	e7fe      	b.n	80064c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80064c8:	4b0a      	ldr	r3, [pc, #40]	; (80064f4 <vPortExitCritical+0x50>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3b01      	subs	r3, #1
 80064ce:	4a09      	ldr	r2, [pc, #36]	; (80064f4 <vPortExitCritical+0x50>)
 80064d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064d2:	4b08      	ldr	r3, [pc, #32]	; (80064f4 <vPortExitCritical+0x50>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d105      	bne.n	80064e6 <vPortExitCritical+0x42>
 80064da:	2300      	movs	r3, #0
 80064dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064e6:	bf00      	nop
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	20000020 	.word	0x20000020
	...

08006500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006500:	f3ef 8009 	mrs	r0, PSP
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	4b15      	ldr	r3, [pc, #84]	; (8006560 <pxCurrentTCBConst>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	f01e 0f10 	tst.w	lr, #16
 8006510:	bf08      	it	eq
 8006512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651a:	6010      	str	r0, [r2, #0]
 800651c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006520:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006524:	f380 8811 	msr	BASEPRI, r0
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	f7ff fcb8 	bl	8005ea4 <vTaskSwitchContext>
 8006534:	f04f 0000 	mov.w	r0, #0
 8006538:	f380 8811 	msr	BASEPRI, r0
 800653c:	bc09      	pop	{r0, r3}
 800653e:	6819      	ldr	r1, [r3, #0]
 8006540:	6808      	ldr	r0, [r1, #0]
 8006542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006546:	f01e 0f10 	tst.w	lr, #16
 800654a:	bf08      	it	eq
 800654c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006550:	f380 8809 	msr	PSP, r0
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	f3af 8000 	nop.w

08006560 <pxCurrentTCBConst>:
 8006560:	200044e8 	.word	0x200044e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop

08006568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	607b      	str	r3, [r7, #4]
}
 8006580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006582:	f7ff fbd7 	bl	8005d34 <xTaskIncrementTick>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d003      	beq.n	8006594 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800658c:	4b06      	ldr	r3, [pc, #24]	; (80065a8 <SysTick_Handler+0x40>)
 800658e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	2300      	movs	r3, #0
 8006596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	f383 8811 	msr	BASEPRI, r3
}
 800659e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065a0:	bf00      	nop
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	e000ed04 	.word	0xe000ed04

080065ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065ac:	b480      	push	{r7}
 80065ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065b0:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <vPortSetupTimerInterrupt+0x34>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065b6:	4b0b      	ldr	r3, [pc, #44]	; (80065e4 <vPortSetupTimerInterrupt+0x38>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065bc:	4b0a      	ldr	r3, [pc, #40]	; (80065e8 <vPortSetupTimerInterrupt+0x3c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a0a      	ldr	r2, [pc, #40]	; (80065ec <vPortSetupTimerInterrupt+0x40>)
 80065c2:	fba2 2303 	umull	r2, r3, r2, r3
 80065c6:	099b      	lsrs	r3, r3, #6
 80065c8:	4a09      	ldr	r2, [pc, #36]	; (80065f0 <vPortSetupTimerInterrupt+0x44>)
 80065ca:	3b01      	subs	r3, #1
 80065cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065ce:	4b04      	ldr	r3, [pc, #16]	; (80065e0 <vPortSetupTimerInterrupt+0x34>)
 80065d0:	2207      	movs	r2, #7
 80065d2:	601a      	str	r2, [r3, #0]
}
 80065d4:	bf00      	nop
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	e000e010 	.word	0xe000e010
 80065e4:	e000e018 	.word	0xe000e018
 80065e8:	20000014 	.word	0x20000014
 80065ec:	10624dd3 	.word	0x10624dd3
 80065f0:	e000e014 	.word	0xe000e014

080065f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006604 <vPortEnableVFP+0x10>
 80065f8:	6801      	ldr	r1, [r0, #0]
 80065fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065fe:	6001      	str	r1, [r0, #0]
 8006600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006602:	bf00      	nop
 8006604:	e000ed88 	.word	0xe000ed88

08006608 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b08a      	sub	sp, #40	; 0x28
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006610:	2300      	movs	r3, #0
 8006612:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006614:	f7ff fae4 	bl	8005be0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006618:	4b5b      	ldr	r3, [pc, #364]	; (8006788 <pvPortMalloc+0x180>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006620:	f000 f920 	bl	8006864 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006624:	4b59      	ldr	r3, [pc, #356]	; (800678c <pvPortMalloc+0x184>)
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4013      	ands	r3, r2
 800662c:	2b00      	cmp	r3, #0
 800662e:	f040 8093 	bne.w	8006758 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d01d      	beq.n	8006674 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006638:	2208      	movs	r2, #8
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4413      	add	r3, r2
 800663e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f003 0307 	and.w	r3, r3, #7
 8006646:	2b00      	cmp	r3, #0
 8006648:	d014      	beq.n	8006674 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f023 0307 	bic.w	r3, r3, #7
 8006650:	3308      	adds	r3, #8
 8006652:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00a      	beq.n	8006674 <pvPortMalloc+0x6c>
	__asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	617b      	str	r3, [r7, #20]
}
 8006670:	bf00      	nop
 8006672:	e7fe      	b.n	8006672 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d06e      	beq.n	8006758 <pvPortMalloc+0x150>
 800667a:	4b45      	ldr	r3, [pc, #276]	; (8006790 <pvPortMalloc+0x188>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	429a      	cmp	r2, r3
 8006682:	d869      	bhi.n	8006758 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006684:	4b43      	ldr	r3, [pc, #268]	; (8006794 <pvPortMalloc+0x18c>)
 8006686:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006688:	4b42      	ldr	r3, [pc, #264]	; (8006794 <pvPortMalloc+0x18c>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800668e:	e004      	b.n	800669a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d903      	bls.n	80066ac <pvPortMalloc+0xa4>
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1f1      	bne.n	8006690 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066ac:	4b36      	ldr	r3, [pc, #216]	; (8006788 <pvPortMalloc+0x180>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d050      	beq.n	8006758 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2208      	movs	r2, #8
 80066bc:	4413      	add	r3, r2
 80066be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	6a3b      	ldr	r3, [r7, #32]
 80066c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	1ad2      	subs	r2, r2, r3
 80066d0:	2308      	movs	r3, #8
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d91f      	bls.n	8006718 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80066d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4413      	add	r3, r2
 80066de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <pvPortMalloc+0xf8>
	__asm volatile
 80066ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	613b      	str	r3, [r7, #16]
}
 80066fc:	bf00      	nop
 80066fe:	e7fe      	b.n	80066fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	1ad2      	subs	r2, r2, r3
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006712:	69b8      	ldr	r0, [r7, #24]
 8006714:	f000 f908 	bl	8006928 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006718:	4b1d      	ldr	r3, [pc, #116]	; (8006790 <pvPortMalloc+0x188>)
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	4a1b      	ldr	r2, [pc, #108]	; (8006790 <pvPortMalloc+0x188>)
 8006724:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006726:	4b1a      	ldr	r3, [pc, #104]	; (8006790 <pvPortMalloc+0x188>)
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	4b1b      	ldr	r3, [pc, #108]	; (8006798 <pvPortMalloc+0x190>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	429a      	cmp	r2, r3
 8006730:	d203      	bcs.n	800673a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006732:	4b17      	ldr	r3, [pc, #92]	; (8006790 <pvPortMalloc+0x188>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a18      	ldr	r2, [pc, #96]	; (8006798 <pvPortMalloc+0x190>)
 8006738:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	4b13      	ldr	r3, [pc, #76]	; (800678c <pvPortMalloc+0x184>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	431a      	orrs	r2, r3
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800674e:	4b13      	ldr	r3, [pc, #76]	; (800679c <pvPortMalloc+0x194>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3301      	adds	r3, #1
 8006754:	4a11      	ldr	r2, [pc, #68]	; (800679c <pvPortMalloc+0x194>)
 8006756:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006758:	f7ff fa50 	bl	8005bfc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	f003 0307 	and.w	r3, r3, #7
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00a      	beq.n	800677c <pvPortMalloc+0x174>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	60fb      	str	r3, [r7, #12]
}
 8006778:	bf00      	nop
 800677a:	e7fe      	b.n	800677a <pvPortMalloc+0x172>
	return pvReturn;
 800677c:	69fb      	ldr	r3, [r7, #28]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3728      	adds	r7, #40	; 0x28
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	20008224 	.word	0x20008224
 800678c:	20008238 	.word	0x20008238
 8006790:	20008228 	.word	0x20008228
 8006794:	2000821c 	.word	0x2000821c
 8006798:	2000822c 	.word	0x2000822c
 800679c:	20008230 	.word	0x20008230

080067a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d04d      	beq.n	800684e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067b2:	2308      	movs	r3, #8
 80067b4:	425b      	negs	r3, r3
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	4413      	add	r3, r2
 80067ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	4b24      	ldr	r3, [pc, #144]	; (8006858 <vPortFree+0xb8>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4013      	ands	r3, r2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10a      	bne.n	80067e4 <vPortFree+0x44>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	60fb      	str	r3, [r7, #12]
}
 80067e0:	bf00      	nop
 80067e2:	e7fe      	b.n	80067e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00a      	beq.n	8006802 <vPortFree+0x62>
	__asm volatile
 80067ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	60bb      	str	r3, [r7, #8]
}
 80067fe:	bf00      	nop
 8006800:	e7fe      	b.n	8006800 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	685a      	ldr	r2, [r3, #4]
 8006806:	4b14      	ldr	r3, [pc, #80]	; (8006858 <vPortFree+0xb8>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4013      	ands	r3, r2
 800680c:	2b00      	cmp	r3, #0
 800680e:	d01e      	beq.n	800684e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d11a      	bne.n	800684e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	4b0e      	ldr	r3, [pc, #56]	; (8006858 <vPortFree+0xb8>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	43db      	mvns	r3, r3
 8006822:	401a      	ands	r2, r3
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006828:	f7ff f9da 	bl	8005be0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	4b0a      	ldr	r3, [pc, #40]	; (800685c <vPortFree+0xbc>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4413      	add	r3, r2
 8006836:	4a09      	ldr	r2, [pc, #36]	; (800685c <vPortFree+0xbc>)
 8006838:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800683a:	6938      	ldr	r0, [r7, #16]
 800683c:	f000 f874 	bl	8006928 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006840:	4b07      	ldr	r3, [pc, #28]	; (8006860 <vPortFree+0xc0>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3301      	adds	r3, #1
 8006846:	4a06      	ldr	r2, [pc, #24]	; (8006860 <vPortFree+0xc0>)
 8006848:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800684a:	f7ff f9d7 	bl	8005bfc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800684e:	bf00      	nop
 8006850:	3718      	adds	r7, #24
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	20008238 	.word	0x20008238
 800685c:	20008228 	.word	0x20008228
 8006860:	20008234 	.word	0x20008234

08006864 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800686a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800686e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006870:	4b27      	ldr	r3, [pc, #156]	; (8006910 <prvHeapInit+0xac>)
 8006872:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f003 0307 	and.w	r3, r3, #7
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00c      	beq.n	8006898 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3307      	adds	r3, #7
 8006882:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 0307 	bic.w	r3, r3, #7
 800688a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	4a1f      	ldr	r2, [pc, #124]	; (8006910 <prvHeapInit+0xac>)
 8006894:	4413      	add	r3, r2
 8006896:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800689c:	4a1d      	ldr	r2, [pc, #116]	; (8006914 <prvHeapInit+0xb0>)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068a2:	4b1c      	ldr	r3, [pc, #112]	; (8006914 <prvHeapInit+0xb0>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	4413      	add	r3, r2
 80068ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068b0:	2208      	movs	r2, #8
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	1a9b      	subs	r3, r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f023 0307 	bic.w	r3, r3, #7
 80068be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	4a15      	ldr	r2, [pc, #84]	; (8006918 <prvHeapInit+0xb4>)
 80068c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80068c6:	4b14      	ldr	r3, [pc, #80]	; (8006918 <prvHeapInit+0xb4>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2200      	movs	r2, #0
 80068cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80068ce:	4b12      	ldr	r3, [pc, #72]	; (8006918 <prvHeapInit+0xb4>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2200      	movs	r2, #0
 80068d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	1ad2      	subs	r2, r2, r3
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80068e4:	4b0c      	ldr	r3, [pc, #48]	; (8006918 <prvHeapInit+0xb4>)
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	4a0a      	ldr	r2, [pc, #40]	; (800691c <prvHeapInit+0xb8>)
 80068f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	4a09      	ldr	r2, [pc, #36]	; (8006920 <prvHeapInit+0xbc>)
 80068fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80068fc:	4b09      	ldr	r3, [pc, #36]	; (8006924 <prvHeapInit+0xc0>)
 80068fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006902:	601a      	str	r2, [r3, #0]
}
 8006904:	bf00      	nop
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	2000461c 	.word	0x2000461c
 8006914:	2000821c 	.word	0x2000821c
 8006918:	20008224 	.word	0x20008224
 800691c:	2000822c 	.word	0x2000822c
 8006920:	20008228 	.word	0x20008228
 8006924:	20008238 	.word	0x20008238

08006928 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006930:	4b28      	ldr	r3, [pc, #160]	; (80069d4 <prvInsertBlockIntoFreeList+0xac>)
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	e002      	b.n	800693c <prvInsertBlockIntoFreeList+0x14>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	429a      	cmp	r2, r3
 8006944:	d8f7      	bhi.n	8006936 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	4413      	add	r3, r2
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	429a      	cmp	r2, r3
 8006956:	d108      	bne.n	800696a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	441a      	add	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	441a      	add	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	429a      	cmp	r2, r3
 800697c:	d118      	bne.n	80069b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	4b15      	ldr	r3, [pc, #84]	; (80069d8 <prvInsertBlockIntoFreeList+0xb0>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	429a      	cmp	r2, r3
 8006988:	d00d      	beq.n	80069a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	441a      	add	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	e008      	b.n	80069b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069a6:	4b0c      	ldr	r3, [pc, #48]	; (80069d8 <prvInsertBlockIntoFreeList+0xb0>)
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	e003      	b.n	80069b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d002      	beq.n	80069c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069c6:	bf00      	nop
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	2000821c 	.word	0x2000821c
 80069d8:	20008224 	.word	0x20008224

080069dc <memset>:
 80069dc:	4402      	add	r2, r0
 80069de:	4603      	mov	r3, r0
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d100      	bne.n	80069e6 <memset+0xa>
 80069e4:	4770      	bx	lr
 80069e6:	f803 1b01 	strb.w	r1, [r3], #1
 80069ea:	e7f9      	b.n	80069e0 <memset+0x4>

080069ec <_reclaim_reent>:
 80069ec:	4b29      	ldr	r3, [pc, #164]	; (8006a94 <_reclaim_reent+0xa8>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4283      	cmp	r3, r0
 80069f2:	b570      	push	{r4, r5, r6, lr}
 80069f4:	4604      	mov	r4, r0
 80069f6:	d04b      	beq.n	8006a90 <_reclaim_reent+0xa4>
 80069f8:	69c3      	ldr	r3, [r0, #28]
 80069fa:	b143      	cbz	r3, 8006a0e <_reclaim_reent+0x22>
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d144      	bne.n	8006a8c <_reclaim_reent+0xa0>
 8006a02:	69e3      	ldr	r3, [r4, #28]
 8006a04:	6819      	ldr	r1, [r3, #0]
 8006a06:	b111      	cbz	r1, 8006a0e <_reclaim_reent+0x22>
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f000 f86b 	bl	8006ae4 <_free_r>
 8006a0e:	6961      	ldr	r1, [r4, #20]
 8006a10:	b111      	cbz	r1, 8006a18 <_reclaim_reent+0x2c>
 8006a12:	4620      	mov	r0, r4
 8006a14:	f000 f866 	bl	8006ae4 <_free_r>
 8006a18:	69e1      	ldr	r1, [r4, #28]
 8006a1a:	b111      	cbz	r1, 8006a22 <_reclaim_reent+0x36>
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	f000 f861 	bl	8006ae4 <_free_r>
 8006a22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006a24:	b111      	cbz	r1, 8006a2c <_reclaim_reent+0x40>
 8006a26:	4620      	mov	r0, r4
 8006a28:	f000 f85c 	bl	8006ae4 <_free_r>
 8006a2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a2e:	b111      	cbz	r1, 8006a36 <_reclaim_reent+0x4a>
 8006a30:	4620      	mov	r0, r4
 8006a32:	f000 f857 	bl	8006ae4 <_free_r>
 8006a36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006a38:	b111      	cbz	r1, 8006a40 <_reclaim_reent+0x54>
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f000 f852 	bl	8006ae4 <_free_r>
 8006a40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006a42:	b111      	cbz	r1, 8006a4a <_reclaim_reent+0x5e>
 8006a44:	4620      	mov	r0, r4
 8006a46:	f000 f84d 	bl	8006ae4 <_free_r>
 8006a4a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006a4c:	b111      	cbz	r1, 8006a54 <_reclaim_reent+0x68>
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f000 f848 	bl	8006ae4 <_free_r>
 8006a54:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006a56:	b111      	cbz	r1, 8006a5e <_reclaim_reent+0x72>
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f000 f843 	bl	8006ae4 <_free_r>
 8006a5e:	6a23      	ldr	r3, [r4, #32]
 8006a60:	b1b3      	cbz	r3, 8006a90 <_reclaim_reent+0xa4>
 8006a62:	4620      	mov	r0, r4
 8006a64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a68:	4718      	bx	r3
 8006a6a:	5949      	ldr	r1, [r1, r5]
 8006a6c:	b941      	cbnz	r1, 8006a80 <_reclaim_reent+0x94>
 8006a6e:	3504      	adds	r5, #4
 8006a70:	69e3      	ldr	r3, [r4, #28]
 8006a72:	2d80      	cmp	r5, #128	; 0x80
 8006a74:	68d9      	ldr	r1, [r3, #12]
 8006a76:	d1f8      	bne.n	8006a6a <_reclaim_reent+0x7e>
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f000 f833 	bl	8006ae4 <_free_r>
 8006a7e:	e7c0      	b.n	8006a02 <_reclaim_reent+0x16>
 8006a80:	680e      	ldr	r6, [r1, #0]
 8006a82:	4620      	mov	r0, r4
 8006a84:	f000 f82e 	bl	8006ae4 <_free_r>
 8006a88:	4631      	mov	r1, r6
 8006a8a:	e7ef      	b.n	8006a6c <_reclaim_reent+0x80>
 8006a8c:	2500      	movs	r5, #0
 8006a8e:	e7ef      	b.n	8006a70 <_reclaim_reent+0x84>
 8006a90:	bd70      	pop	{r4, r5, r6, pc}
 8006a92:	bf00      	nop
 8006a94:	20000070 	.word	0x20000070

08006a98 <__libc_init_array>:
 8006a98:	b570      	push	{r4, r5, r6, lr}
 8006a9a:	4d0d      	ldr	r5, [pc, #52]	; (8006ad0 <__libc_init_array+0x38>)
 8006a9c:	4c0d      	ldr	r4, [pc, #52]	; (8006ad4 <__libc_init_array+0x3c>)
 8006a9e:	1b64      	subs	r4, r4, r5
 8006aa0:	10a4      	asrs	r4, r4, #2
 8006aa2:	2600      	movs	r6, #0
 8006aa4:	42a6      	cmp	r6, r4
 8006aa6:	d109      	bne.n	8006abc <__libc_init_array+0x24>
 8006aa8:	4d0b      	ldr	r5, [pc, #44]	; (8006ad8 <__libc_init_array+0x40>)
 8006aaa:	4c0c      	ldr	r4, [pc, #48]	; (8006adc <__libc_init_array+0x44>)
 8006aac:	f000 f872 	bl	8006b94 <_init>
 8006ab0:	1b64      	subs	r4, r4, r5
 8006ab2:	10a4      	asrs	r4, r4, #2
 8006ab4:	2600      	movs	r6, #0
 8006ab6:	42a6      	cmp	r6, r4
 8006ab8:	d105      	bne.n	8006ac6 <__libc_init_array+0x2e>
 8006aba:	bd70      	pop	{r4, r5, r6, pc}
 8006abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ac0:	4798      	blx	r3
 8006ac2:	3601      	adds	r6, #1
 8006ac4:	e7ee      	b.n	8006aa4 <__libc_init_array+0xc>
 8006ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aca:	4798      	blx	r3
 8006acc:	3601      	adds	r6, #1
 8006ace:	e7f2      	b.n	8006ab6 <__libc_init_array+0x1e>
 8006ad0:	08006e44 	.word	0x08006e44
 8006ad4:	08006e44 	.word	0x08006e44
 8006ad8:	08006e44 	.word	0x08006e44
 8006adc:	08006e48 	.word	0x08006e48

08006ae0 <__retarget_lock_acquire_recursive>:
 8006ae0:	4770      	bx	lr

08006ae2 <__retarget_lock_release_recursive>:
 8006ae2:	4770      	bx	lr

08006ae4 <_free_r>:
 8006ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ae6:	2900      	cmp	r1, #0
 8006ae8:	d044      	beq.n	8006b74 <_free_r+0x90>
 8006aea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aee:	9001      	str	r0, [sp, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f1a1 0404 	sub.w	r4, r1, #4
 8006af6:	bfb8      	it	lt
 8006af8:	18e4      	addlt	r4, r4, r3
 8006afa:	f000 f83f 	bl	8006b7c <__malloc_lock>
 8006afe:	4a1e      	ldr	r2, [pc, #120]	; (8006b78 <_free_r+0x94>)
 8006b00:	9801      	ldr	r0, [sp, #4]
 8006b02:	6813      	ldr	r3, [r2, #0]
 8006b04:	b933      	cbnz	r3, 8006b14 <_free_r+0x30>
 8006b06:	6063      	str	r3, [r4, #4]
 8006b08:	6014      	str	r4, [r2, #0]
 8006b0a:	b003      	add	sp, #12
 8006b0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b10:	f000 b83a 	b.w	8006b88 <__malloc_unlock>
 8006b14:	42a3      	cmp	r3, r4
 8006b16:	d908      	bls.n	8006b2a <_free_r+0x46>
 8006b18:	6825      	ldr	r5, [r4, #0]
 8006b1a:	1961      	adds	r1, r4, r5
 8006b1c:	428b      	cmp	r3, r1
 8006b1e:	bf01      	itttt	eq
 8006b20:	6819      	ldreq	r1, [r3, #0]
 8006b22:	685b      	ldreq	r3, [r3, #4]
 8006b24:	1949      	addeq	r1, r1, r5
 8006b26:	6021      	streq	r1, [r4, #0]
 8006b28:	e7ed      	b.n	8006b06 <_free_r+0x22>
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	b10b      	cbz	r3, 8006b34 <_free_r+0x50>
 8006b30:	42a3      	cmp	r3, r4
 8006b32:	d9fa      	bls.n	8006b2a <_free_r+0x46>
 8006b34:	6811      	ldr	r1, [r2, #0]
 8006b36:	1855      	adds	r5, r2, r1
 8006b38:	42a5      	cmp	r5, r4
 8006b3a:	d10b      	bne.n	8006b54 <_free_r+0x70>
 8006b3c:	6824      	ldr	r4, [r4, #0]
 8006b3e:	4421      	add	r1, r4
 8006b40:	1854      	adds	r4, r2, r1
 8006b42:	42a3      	cmp	r3, r4
 8006b44:	6011      	str	r1, [r2, #0]
 8006b46:	d1e0      	bne.n	8006b0a <_free_r+0x26>
 8006b48:	681c      	ldr	r4, [r3, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	6053      	str	r3, [r2, #4]
 8006b4e:	440c      	add	r4, r1
 8006b50:	6014      	str	r4, [r2, #0]
 8006b52:	e7da      	b.n	8006b0a <_free_r+0x26>
 8006b54:	d902      	bls.n	8006b5c <_free_r+0x78>
 8006b56:	230c      	movs	r3, #12
 8006b58:	6003      	str	r3, [r0, #0]
 8006b5a:	e7d6      	b.n	8006b0a <_free_r+0x26>
 8006b5c:	6825      	ldr	r5, [r4, #0]
 8006b5e:	1961      	adds	r1, r4, r5
 8006b60:	428b      	cmp	r3, r1
 8006b62:	bf04      	itt	eq
 8006b64:	6819      	ldreq	r1, [r3, #0]
 8006b66:	685b      	ldreq	r3, [r3, #4]
 8006b68:	6063      	str	r3, [r4, #4]
 8006b6a:	bf04      	itt	eq
 8006b6c:	1949      	addeq	r1, r1, r5
 8006b6e:	6021      	streq	r1, [r4, #0]
 8006b70:	6054      	str	r4, [r2, #4]
 8006b72:	e7ca      	b.n	8006b0a <_free_r+0x26>
 8006b74:	b003      	add	sp, #12
 8006b76:	bd30      	pop	{r4, r5, pc}
 8006b78:	20008378 	.word	0x20008378

08006b7c <__malloc_lock>:
 8006b7c:	4801      	ldr	r0, [pc, #4]	; (8006b84 <__malloc_lock+0x8>)
 8006b7e:	f7ff bfaf 	b.w	8006ae0 <__retarget_lock_acquire_recursive>
 8006b82:	bf00      	nop
 8006b84:	20008374 	.word	0x20008374

08006b88 <__malloc_unlock>:
 8006b88:	4801      	ldr	r0, [pc, #4]	; (8006b90 <__malloc_unlock+0x8>)
 8006b8a:	f7ff bfaa 	b.w	8006ae2 <__retarget_lock_release_recursive>
 8006b8e:	bf00      	nop
 8006b90:	20008374 	.word	0x20008374

08006b94 <_init>:
 8006b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b96:	bf00      	nop
 8006b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b9a:	bc08      	pop	{r3}
 8006b9c:	469e      	mov	lr, r3
 8006b9e:	4770      	bx	lr

08006ba0 <_fini>:
 8006ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba2:	bf00      	nop
 8006ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ba6:	bc08      	pop	{r3}
 8006ba8:	469e      	mov	lr, r3
 8006baa:	4770      	bx	lr
