
ONE_TO_ONE_CONVERSATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a58  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08007c28  08007c28  00017c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080a0  080080a0  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  080080a0  080080a0  000180a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080a8  080080a8  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080a8  080080a8  000180a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080ac  080080ac  000180ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  080080b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b314  200000b8  08008168  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b3cc  08008168  0002b3cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000198f7  00000000  00000000  0002012b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041d7  00000000  00000000  00039a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001508  00000000  00000000  0003dc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001036  00000000  00000000  0003f108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025708  00000000  00000000  0004013e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b388  00000000  00000000  00065846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcc9d  00000000  00000000  00080bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b08  00000000  00000000  0015d86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00163374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b8 	.word	0x200000b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007c10 	.word	0x08007c10

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000bc 	.word	0x200000bc
 800020c:	08007c10 	.word	0x08007c10

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <UDS_Tester_Presenter_Client>:
}



void UDS_Tester_Presenter_Client(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	PduInfoTypePtr.Data[0]= 0x2; 	// TESTER_PRESENT_PCI
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <UDS_Tester_Presenter_Client+0x28>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	PduInfoTypePtr.Data[1]= 0x3E; 	// TESTER_PRESENT_SID
 80005c6:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <UDS_Tester_Presenter_Client+0x28>)
 80005c8:	223e      	movs	r2, #62	; 0x3e
 80005ca:	705a      	strb	r2, [r3, #1]
	PduInfoTypePtr.Length = 2;		// TESTER_PRESENT_LENGTH
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <UDS_Tester_Presenter_Client+0x28>)
 80005ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80005d2:	461a      	mov	r2, r3
 80005d4:	2302      	movs	r3, #2
 80005d6:	6013      	str	r3, [r2, #0]
	//Sending Frame to Can TP
	CanTp_Transmit(0, &PduInfoTypePtr);
 80005d8:	4902      	ldr	r1, [pc, #8]	; (80005e4 <UDS_Tester_Presenter_Client+0x28>)
 80005da:	2000      	movs	r0, #0
 80005dc:	f000 fd58 	bl	8001090 <CanTp_Transmit>
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	200050e8 	.word	0x200050e8

080005e8 <UDS_Read_Data_Client>:

/***************************************************************Read**********************************************************************/

//Send Read Frame
void UDS_Read_Data_Client(DID did)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]
	Read_Data_Client.Data[SID] = 0x22; //SID of Read
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <UDS_Read_Data_Client+0x5c>)
 80005f4:	2222      	movs	r2, #34	; 0x22
 80005f6:	705a      	strb	r2, [r3, #1]
	Read_Data_Client.Length = 4; //length of Read frame
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <UDS_Read_Data_Client+0x5c>)
 80005fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80005fe:	461a      	mov	r2, r3
 8000600:	2304      	movs	r3, #4
 8000602:	6013      	str	r3, [r2, #0]

	//check DID which Data
	if(did == Oil_Temp)
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	f24f 123d 	movw	r2, #61757	; 0xf13d
 800060a:	4293      	cmp	r3, r2
 800060c:	d106      	bne.n	800061c <UDS_Read_Data_Client+0x34>
	{
		Read_Data_Client.Data[DID_1] = 0xF1;
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <UDS_Read_Data_Client+0x5c>)
 8000610:	22f1      	movs	r2, #241	; 0xf1
 8000612:	709a      	strb	r2, [r3, #2]
		Read_Data_Client.Data[DID_2] = 0x3D;
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <UDS_Read_Data_Client+0x5c>)
 8000616:	223d      	movs	r2, #61	; 0x3d
 8000618:	70da      	strb	r2, [r3, #3]
 800061a:	e00a      	b.n	8000632 <UDS_Read_Data_Client+0x4a>
	}
	else if (did == Oil_Pressure)
 800061c:	88fb      	ldrh	r3, [r7, #6]
 800061e:	f24f 523d 	movw	r2, #62781	; 0xf53d
 8000622:	4293      	cmp	r3, r2
 8000624:	d105      	bne.n	8000632 <UDS_Read_Data_Client+0x4a>
	{
		Read_Data_Client.Data[DID_1] = 0xF5;
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <UDS_Read_Data_Client+0x5c>)
 8000628:	22f5      	movs	r2, #245	; 0xf5
 800062a:	709a      	strb	r2, [r3, #2]
		Read_Data_Client.Data[DID_2] = 0x3D;
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <UDS_Read_Data_Client+0x5c>)
 800062e:	223d      	movs	r2, #61	; 0x3d
 8000630:	70da      	strb	r2, [r3, #3]
	}
	//Send Frame to Can TP
	CanTp_Transmit(0, &Read_Data_Client);
 8000632:	4904      	ldr	r1, [pc, #16]	; (8000644 <UDS_Read_Data_Client+0x5c>)
 8000634:	2000      	movs	r0, #0
 8000636:	f000 fd2b 	bl	8001090 <CanTp_Transmit>

	//For Debugging
	//HAL_UART_Transmit(&huart2, "\r\nRead Frame Client:", 50, HAL_MAX_DELAY);
	//sendHexArrayAsASCII(Read_Data_Client.Data, Read_Data_Client.Length);
	//HAL_UART_Transmit(&huart2, "\r\n", 50, HAL_MAX_DELAY);
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	200000d4 	.word	0x200000d4

08000648 <UDS_Write_Data_Client>:


/***************************************************************Write**********************************************************************/

void UDS_Write_Data_Client(DID did, uint32_t data)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	6039      	str	r1, [r7, #0]
 8000652:	80fb      	strh	r3, [r7, #6]

	//PduInfoType Write_Data_Client;
	Write_Data_Client.Data[SID] = 0x2E; //SID of WDID
 8000654:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <UDS_Write_Data_Client+0xa0>)
 8000656:	222e      	movs	r2, #46	; 0x2e
 8000658:	705a      	strb	r2, [r3, #1]

	//check DID which Data
	if(did == Oil_Temp)
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	f24f 123d 	movw	r2, #61757	; 0xf13d
 8000660:	4293      	cmp	r3, r2
 8000662:	d115      	bne.n	8000690 <UDS_Write_Data_Client+0x48>
	{
		Write_Data_Client.Data[DID_1] = 0xF1;
 8000664:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <UDS_Write_Data_Client+0xa0>)
 8000666:	22f1      	movs	r2, #241	; 0xf1
 8000668:	709a      	strb	r2, [r3, #2]
		Write_Data_Client.Data[DID_2] = 0x3D;
 800066a:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <UDS_Write_Data_Client+0xa0>)
 800066c:	223d      	movs	r2, #61	; 0x3d
 800066e:	70da      	strb	r2, [r3, #3]

	    // Assuming data is 2 bytes
		Write_Data_Client.Data[Data_DID] = data >> 8; // Most significant byte of data
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	0a1b      	lsrs	r3, r3, #8
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <UDS_Write_Data_Client+0xa0>)
 8000678:	711a      	strb	r2, [r3, #4]
		Write_Data_Client.Data[Data_DID+1] = data & 0xFF;	   // Least significant byte of data
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <UDS_Write_Data_Client+0xa0>)
 8000680:	715a      	strb	r2, [r3, #5]

        Write_Data_Client.Length = 6; // SID + DID + Data
 8000682:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <UDS_Write_Data_Client+0xa0>)
 8000684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000688:	461a      	mov	r2, r3
 800068a:	2306      	movs	r3, #6
 800068c:	6013      	str	r3, [r2, #0]
 800068e:	e023      	b.n	80006d8 <UDS_Write_Data_Client+0x90>



	}
	else if (did == Oil_Pressure)
 8000690:	88fb      	ldrh	r3, [r7, #6]
 8000692:	f24f 523d 	movw	r2, #62781	; 0xf53d
 8000696:	4293      	cmp	r3, r2
 8000698:	d11e      	bne.n	80006d8 <UDS_Write_Data_Client+0x90>
	{
		Write_Data_Client.Data[DID_1] = 0xF5;
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <UDS_Write_Data_Client+0xa0>)
 800069c:	22f5      	movs	r2, #245	; 0xf5
 800069e:	709a      	strb	r2, [r3, #2]
		Write_Data_Client.Data[DID_2] = 0x3D;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <UDS_Write_Data_Client+0xa0>)
 80006a2:	223d      	movs	r2, #61	; 0x3d
 80006a4:	70da      	strb	r2, [r3, #3]

		// Assuming data is 4 bytes
		Write_Data_Client.Data[Data_DID] = (data >> 24) & 0xFF; // Most significant byte of data
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	0e1b      	lsrs	r3, r3, #24
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <UDS_Write_Data_Client+0xa0>)
 80006ae:	711a      	strb	r2, [r3, #4]
		Write_Data_Client.Data[Data_DID+1] = (data >> 16) & 0xFF;
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	0c1b      	lsrs	r3, r3, #16
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <UDS_Write_Data_Client+0xa0>)
 80006b8:	715a      	strb	r2, [r3, #5]
		Write_Data_Client.Data[Data_DID+2] = (data >> 8) & 0xFF;
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	0a1b      	lsrs	r3, r3, #8
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <UDS_Write_Data_Client+0xa0>)
 80006c2:	719a      	strb	r2, [r3, #6]
		Write_Data_Client.Data[Data_DID+3] = data & 0xFF;		  // Least significant byte of data
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <UDS_Write_Data_Client+0xa0>)
 80006ca:	71da      	strb	r2, [r3, #7]

		Write_Data_Client.Length = 8; // SID + DID + Data
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <UDS_Write_Data_Client+0xa0>)
 80006ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d2:	461a      	mov	r2, r3
 80006d4:	2308      	movs	r3, #8
 80006d6:	6013      	str	r3, [r2, #0]


	}

	//Sending Frame to Can TP
	CanTp_Transmit(0, &Write_Data_Client);
 80006d8:	4903      	ldr	r1, [pc, #12]	; (80006e8 <UDS_Write_Data_Client+0xa0>)
 80006da:	2000      	movs	r0, #0
 80006dc:	f000 fcd8 	bl	8001090 <CanTp_Transmit>

	//For Debugging
	//HAL_UART_Transmit(&huart2, "\r\nWrite Frame Client:", 50, HAL_MAX_DELAY);
//	sendHexArrayAsASCII(Write_Data_Client.Data,  Write_Data_Client.Length);
	//HAL_UART_Transmit(&huart2, "\r\n", 50, HAL_MAX_DELAY);
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200010d8 	.word	0x200010d8

080006ec <UDS_Control_Session_Default>:
//}
//

/***************************************************************Control Session**********************************************************************/
void UDS_Control_Session_Default(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	// init struct var  to use for send TP

	// fill the struct data
	Control_Session_Default.Data[SID] = Control_Service;
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <UDS_Control_Session_Default+0x28>)
 80006f2:	2210      	movs	r2, #16
 80006f4:	705a      	strb	r2, [r3, #1]
	Control_Session_Default.Data[Sub_F] = DefaultSession;
 80006f6:	4b07      	ldr	r3, [pc, #28]	; (8000714 <UDS_Control_Session_Default+0x28>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	709a      	strb	r2, [r3, #2]
	Control_Session_Default.Length = 3;
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <UDS_Control_Session_Default+0x28>)
 80006fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000702:	461a      	mov	r2, r3
 8000704:	2303      	movs	r3, #3
 8000706:	6013      	str	r3, [r2, #0]

	// send to can tp
	CanTp_Transmit(0, &Control_Session_Default);
 8000708:	4902      	ldr	r1, [pc, #8]	; (8000714 <UDS_Control_Session_Default+0x28>)
 800070a:	2000      	movs	r0, #0
 800070c:	f000 fcc0 	bl	8001090 <CanTp_Transmit>

	//For Debugging
	//HAL_UART_Transmit(&huart2, "\r\nControl_Session_Default:", 100, HAL_MAX_DELAY);
	//sendHexArrayAsASCII(Control_Session_Default.Data,  Control_Session_Default.Length);
	//HAL_UART_Transmit(&huart2, "\r\n", 50, HAL_MAX_DELAY);
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200020dc 	.word	0x200020dc

08000718 <UDS_Control_Session_Extended>:


void UDS_Control_Session_Extended(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	// init struct var  to use for send TP


	// fill the struct data
	Control_Session_Extended.Data[SID] = Control_Service;
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <UDS_Control_Session_Extended+0x28>)
 800071e:	2210      	movs	r2, #16
 8000720:	705a      	strb	r2, [r3, #1]
	Control_Session_Extended.Data[Sub_F] = ExtendedSession;
 8000722:	4b07      	ldr	r3, [pc, #28]	; (8000740 <UDS_Control_Session_Extended+0x28>)
 8000724:	2203      	movs	r2, #3
 8000726:	709a      	strb	r2, [r3, #2]
	Control_Session_Extended.Length = 3;
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <UDS_Control_Session_Extended+0x28>)
 800072a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800072e:	461a      	mov	r2, r3
 8000730:	2303      	movs	r3, #3
 8000732:	6013      	str	r3, [r2, #0]

	// send to can tp
	CanTp_Transmit(0, &Control_Session_Extended);
 8000734:	4902      	ldr	r1, [pc, #8]	; (8000740 <UDS_Control_Session_Extended+0x28>)
 8000736:	2000      	movs	r0, #0
 8000738:	f000 fcaa 	bl	8001090 <CanTp_Transmit>

	//For Debugging
	//HAL_UART_Transmit(&huart2, "\r\Control_Session_Extended:", 100, HAL_MAX_DELAY);
	//sendHexArrayAsASCII(Control_Session_Extended.Data,  Control_Session_Extended.Length);
	//HAL_UART_Transmit(&huart2, "\r\n", 50, HAL_MAX_DELAY);
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	200040e4 	.word	0x200040e4

08000744 <UDS_Send_Security_Client>:


/***************************************************************Security**********************************************************************/

void UDS_Send_Security_Client(Sub_Fun sub_fun)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
	Send_Security_Seed.Data[SID] = 0x27;//Security SID
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <UDS_Send_Security_Client+0x5c>)
 8000750:	2227      	movs	r2, #39	; 0x27
 8000752:	705a      	strb	r2, [r3, #1]

	//Prepare the Key
	//Security_Key security_key;

	if(sub_fun == Seed)
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d109      	bne.n	800076e <UDS_Send_Security_Client+0x2a>
	{
		Send_Security_Seed.Data[Sub_F] = 0x01;//Sub_Fun Seed
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <UDS_Send_Security_Client+0x5c>)
 800075c:	2201      	movs	r2, #1
 800075e:	709a      	strb	r2, [r3, #2]
		Send_Security_Seed.Length = 3;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <UDS_Send_Security_Client+0x5c>)
 8000762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000766:	461a      	mov	r2, r3
 8000768:	2303      	movs	r3, #3
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	e00f      	b.n	800078e <UDS_Send_Security_Client+0x4a>
	}
	else if(sub_fun == Key)
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b02      	cmp	r3, #2
 8000772:	d10c      	bne.n	800078e <UDS_Send_Security_Client+0x4a>
	{
		Send_Security_Seed.Data[Sub_F] = 0x02;//Sub_Fun Key
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <UDS_Send_Security_Client+0x5c>)
 8000776:	2202      	movs	r2, #2
 8000778:	709a      	strb	r2, [r3, #2]
		Send_Security_Seed.Length = 3+Seed_Key_Lenght;
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <UDS_Send_Security_Client+0x5c>)
 800077c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000780:	461a      	mov	r2, r3
 8000782:	2307      	movs	r3, #7
 8000784:	6013      	str	r3, [r2, #0]
		UART_ReceiveAndConvert(8,&Send_Security_Seed);
 8000786:	4906      	ldr	r1, [pc, #24]	; (80007a0 <UDS_Send_Security_Client+0x5c>)
 8000788:	2008      	movs	r0, #8
 800078a:	f000 f86d 	bl	8000868 <UART_ReceiveAndConvert>
	{
		//Nothing
	}

	//Send Frame to Can TP
	CanTp_Transmit(0, &Send_Security_Seed);
 800078e:	4904      	ldr	r1, [pc, #16]	; (80007a0 <UDS_Send_Security_Client+0x5c>)
 8000790:	2000      	movs	r0, #0
 8000792:	f000 fc7d 	bl	8001090 <CanTp_Transmit>
	//HAL_UART_Transmit(&huart2, "\r\n", 50, HAL_MAX_DELAY);
	//sendHexArrayAsASCII(Send_Security_Seed.Data, Send_Security_Seed.Length);
	//HAL_UART_Transmit(&huart2, "\r\n", 50, HAL_MAX_DELAY);


}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200030e0 	.word	0x200030e0

080007a4 <sendHexArrayAsASCII>:

/***************************************************************Shared Functions**********************************************************************/

//Function to convert from Hex to ASCII and Displays Frame on UART
void sendHexArrayAsASCII(uint8_t* hexArray, uint16_t length)
{
 80007a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80007a8:	b087      	sub	sp, #28
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
 80007ae:	460b      	mov	r3, r1
 80007b0:	807b      	strh	r3, [r7, #2]
 80007b2:	466b      	mov	r3, sp
 80007b4:	461e      	mov	r6, r3

    // Buffer to hold the ASCII representation (2 chars per byte + 1 for null terminator)
    char asciiBuffer[length * 2 + 1];
 80007b6:	887b      	ldrh	r3, [r7, #2]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	1c59      	adds	r1, r3, #1
 80007bc:	1e4b      	subs	r3, r1, #1
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	460a      	mov	r2, r1
 80007c2:	2300      	movs	r3, #0
 80007c4:	4690      	mov	r8, r2
 80007c6:	4699      	mov	r9, r3
 80007c8:	f04f 0200 	mov.w	r2, #0
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80007dc:	460a      	mov	r2, r1
 80007de:	2300      	movs	r3, #0
 80007e0:	4614      	mov	r4, r2
 80007e2:	461d      	mov	r5, r3
 80007e4:	f04f 0200 	mov.w	r2, #0
 80007e8:	f04f 0300 	mov.w	r3, #0
 80007ec:	00eb      	lsls	r3, r5, #3
 80007ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80007f2:	00e2      	lsls	r2, r4, #3
 80007f4:	460b      	mov	r3, r1
 80007f6:	3307      	adds	r3, #7
 80007f8:	08db      	lsrs	r3, r3, #3
 80007fa:	00db      	lsls	r3, r3, #3
 80007fc:	ebad 0d03 	sub.w	sp, sp, r3
 8000800:	466b      	mov	r3, sp
 8000802:	3300      	adds	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
    char* pBuffer = asciiBuffer;
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	617b      	str	r3, [r7, #20]

    // Convert each byte to its ASCII representation
    for (uint16_t i = 0; i < length; i++) {
 800080a:	2300      	movs	r3, #0
 800080c:	827b      	strh	r3, [r7, #18]
 800080e:	e00e      	b.n	800082e <sendHexArrayAsASCII+0x8a>
        sprintf(pBuffer, "%02X", hexArray[i]);
 8000810:	8a7b      	ldrh	r3, [r7, #18]
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	4413      	add	r3, r2
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4911      	ldr	r1, [pc, #68]	; (8000860 <sendHexArrayAsASCII+0xbc>)
 800081c:	6978      	ldr	r0, [r7, #20]
 800081e:	f006 fcfd 	bl	800721c <siprintf>
        pBuffer += 2;
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	3302      	adds	r3, #2
 8000826:	617b      	str	r3, [r7, #20]
    for (uint16_t i = 0; i < length; i++) {
 8000828:	8a7b      	ldrh	r3, [r7, #18]
 800082a:	3301      	adds	r3, #1
 800082c:	827b      	strh	r3, [r7, #18]
 800082e:	8a7a      	ldrh	r2, [r7, #18]
 8000830:	887b      	ldrh	r3, [r7, #2]
 8000832:	429a      	cmp	r2, r3
 8000834:	d3ec      	bcc.n	8000810 <sendHexArrayAsASCII+0x6c>
    }

    // Null-terminate the string
    *pBuffer = '\0';
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]

    // Transmit the ASCII string over UART
    HAL_UART_Transmit(&huart2, (uint8_t*)asciiBuffer, strlen(asciiBuffer), HAL_MAX_DELAY);
 800083c:	68b8      	ldr	r0, [r7, #8]
 800083e:	f7ff fce7 	bl	8000210 <strlen>
 8000842:	4603      	mov	r3, r0
 8000844:	b29a      	uxth	r2, r3
 8000846:	f04f 33ff 	mov.w	r3, #4294967295
 800084a:	68b9      	ldr	r1, [r7, #8]
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <sendHexArrayAsASCII+0xc0>)
 800084e:	f004 f99c 	bl	8004b8a <HAL_UART_Transmit>
 8000852:	46b5      	mov	sp, r6
}
 8000854:	bf00      	nop
 8000856:	371c      	adds	r7, #28
 8000858:	46bd      	mov	sp, r7
 800085a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800085e:	bf00      	nop
 8000860:	08007c28 	.word	0x08007c28
 8000864:	200074e8 	.word	0x200074e8

08000868 <UART_ReceiveAndConvert>:



void UART_ReceiveAndConvert(uint8_t RX_BUFFER_SIZE, PduInfoType* PduInfoType_Ptr)
{
 8000868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800086c:	b097      	sub	sp, #92	; 0x5c
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	73fb      	strb	r3, [r7, #15]
 8000876:	466b      	mov	r3, sp
 8000878:	461e      	mov	r6, r3
    uint8_t rxBuffer[RX_BUFFER_SIZE];
 800087a:	7bf9      	ldrb	r1, [r7, #15]
 800087c:	460b      	mov	r3, r1
 800087e:	3b01      	subs	r3, #1
 8000880:	653b      	str	r3, [r7, #80]	; 0x50
 8000882:	b2cb      	uxtb	r3, r1
 8000884:	2200      	movs	r2, #0
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	607a      	str	r2, [r7, #4]
 800088a:	f04f 0200 	mov.w	r2, #0
 800088e:	f04f 0300 	mov.w	r3, #0
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	00c3      	lsls	r3, r0, #3
 8000896:	6838      	ldr	r0, [r7, #0]
 8000898:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800089c:	6838      	ldr	r0, [r7, #0]
 800089e:	00c2      	lsls	r2, r0, #3
 80008a0:	b2cb      	uxtb	r3, r1
 80008a2:	2200      	movs	r2, #0
 80008a4:	469a      	mov	sl, r3
 80008a6:	4693      	mov	fp, r2
 80008a8:	f04f 0200 	mov.w	r2, #0
 80008ac:	f04f 0300 	mov.w	r3, #0
 80008b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80008b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80008b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80008bc:	460b      	mov	r3, r1
 80008be:	3307      	adds	r3, #7
 80008c0:	08db      	lsrs	r3, r3, #3
 80008c2:	00db      	lsls	r3, r3, #3
 80008c4:	ebad 0d03 	sub.w	sp, sp, r3
 80008c8:	466b      	mov	r3, sp
 80008ca:	3300      	adds	r3, #0
 80008cc:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint8_t hexValue;
    uint8_t hexOutput[RX_BUFFER_SIZE / 2];
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	4619      	mov	r1, r3
 80008d6:	1e4b      	subs	r3, r1, #1
 80008d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80008da:	460a      	mov	r2, r1
 80008dc:	2300      	movs	r3, #0
 80008de:	4690      	mov	r8, r2
 80008e0:	4699      	mov	r9, r3
 80008e2:	f04f 0200 	mov.w	r2, #0
 80008e6:	f04f 0300 	mov.w	r3, #0
 80008ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80008ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80008f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80008f6:	460a      	mov	r2, r1
 80008f8:	2300      	movs	r3, #0
 80008fa:	4614      	mov	r4, r2
 80008fc:	461d      	mov	r5, r3
 80008fe:	f04f 0200 	mov.w	r2, #0
 8000902:	f04f 0300 	mov.w	r3, #0
 8000906:	00eb      	lsls	r3, r5, #3
 8000908:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800090c:	00e2      	lsls	r2, r4, #3
 800090e:	460b      	mov	r3, r1
 8000910:	3307      	adds	r3, #7
 8000912:	08db      	lsrs	r3, r3, #3
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	ebad 0d03 	sub.w	sp, sp, r3
 800091a:	466b      	mov	r3, sp
 800091c:	3300      	adds	r3, #0
 800091e:	647b      	str	r3, [r7, #68]	; 0x44
    uint16_t length = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    // Receive ASCII characters from UART
    if (HAL_UART_Receive(&huart2, rxBuffer, RX_BUFFER_SIZE, HAL_MAX_DELAY) == HAL_OK) {
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	b29a      	uxth	r2, r3
 800092a:	f04f 33ff 	mov.w	r3, #4294967295
 800092e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000930:	483a      	ldr	r0, [pc, #232]	; (8000a1c <UART_ReceiveAndConvert+0x1b4>)
 8000932:	f004 f9bc 	bl	8004cae <HAL_UART_Receive>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d169      	bne.n	8000a10 <UART_ReceiveAndConvert+0x1a8>
        // Calculate the length of the received string
        length = RX_BUFFER_SIZE/*strlen((char*)rxBuffer)*/;
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

        // Ensure the length is even (each hex byte is represented by 2 ASCII characters)
        if (length % 2 != 0) {
 8000942:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	b29b      	uxth	r3, r3
 800094c:	2b00      	cmp	r3, #0
 800094e:	d01e      	beq.n	800098e <UART_ReceiveAndConvert+0x126>
            // Send an error message
            char errorMsg[] = "Error: Odd number of characters received.\n";
 8000950:	4b33      	ldr	r3, [pc, #204]	; (8000a20 <UART_ReceiveAndConvert+0x1b8>)
 8000952:	f107 0414 	add.w	r4, r7, #20
 8000956:	461d      	mov	r5, r3
 8000958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800095a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800095e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000960:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000964:	c403      	stmia	r4!, {r0, r1}
 8000966:	8022      	strh	r2, [r4, #0]
 8000968:	3402      	adds	r4, #2
 800096a:	0c13      	lsrs	r3, r2, #16
 800096c:	7023      	strb	r3, [r4, #0]
            HAL_UART_Transmit(&huart2, (uint8_t*)errorMsg, strlen(errorMsg), HAL_MAX_DELAY);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fc4c 	bl	8000210 <strlen>
 8000978:	4603      	mov	r3, r0
 800097a:	b29a      	uxth	r2, r3
 800097c:	f107 0114 	add.w	r1, r7, #20
 8000980:	f04f 33ff 	mov.w	r3, #4294967295
 8000984:	4825      	ldr	r0, [pc, #148]	; (8000a1c <UART_ReceiveAndConvert+0x1b4>)
 8000986:	f004 f900 	bl	8004b8a <HAL_UART_Transmit>
 800098a:	46b5      	mov	sp, r6
 800098c:	e041      	b.n	8000a12 <UART_ReceiveAndConvert+0x1aa>
            return;
        }

        // Process each pair of ASCII characters
        for (uint16_t i = 0; i < length; i += 2) {
 800098e:	2300      	movs	r3, #0
 8000990:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000994:	e02e      	b.n	80009f4 <UART_ReceiveAndConvert+0x18c>
            hexValue = (charToHex(rxBuffer[i]) << 4) | charToHex(rxBuffer[i + 1]);
 8000996:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800099a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800099c:	5cd3      	ldrb	r3, [r2, r3]
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 f840 	bl	8000a24 <charToHex>
 80009a4:	4603      	mov	r3, r0
 80009a6:	011b      	lsls	r3, r3, #4
 80009a8:	b25c      	sxtb	r4, r3
 80009aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80009ae:	3301      	adds	r3, #1
 80009b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80009b2:	5cd3      	ldrb	r3, [r2, r3]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 f835 	bl	8000a24 <charToHex>
 80009ba:	4603      	mov	r3, r0
 80009bc:	b25b      	sxtb	r3, r3
 80009be:	4323      	orrs	r3, r4
 80009c0:	b25b      	sxtb	r3, r3
 80009c2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            //update hexvalue into frame
            PduInfoType_Ptr->Data[(i / 2)+3] = hexValue;
 80009c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80009ca:	085b      	lsrs	r3, r3, #1
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	3303      	adds	r3, #3
 80009d0:	68ba      	ldr	r2, [r7, #8]
 80009d2:	f897 1041 	ldrb.w	r1, [r7, #65]	; 0x41
 80009d6:	54d1      	strb	r1, [r2, r3]
            hexOutput[i / 2] = hexValue;
 80009d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80009dc:	085b      	lsrs	r3, r3, #1
 80009de:	b29b      	uxth	r3, r3
 80009e0:	4619      	mov	r1, r3
 80009e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009e4:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80009e8:	545a      	strb	r2, [r3, r1]
        for (uint16_t i = 0; i < length; i += 2) {
 80009ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80009ee:	3302      	adds	r3, #2
 80009f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80009f4:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80009f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d3ca      	bcc.n	8000996 <UART_ReceiveAndConvert+0x12e>
            // Optionally, send the hexadecimal values back via UART
            //HAL_UART_Transmit(&huart2, hexOutput, 1/*length / 2*/, HAL_MAX_DELAY);
        }
        sendHexArrayAsASCII(hexOutput,  length / 2);
 8000a00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000a04:	085b      	lsrs	r3, r3, #1
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	4619      	mov	r1, r3
 8000a0a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000a0c:	f7ff feca 	bl	80007a4 <sendHexArrayAsASCII>
 8000a10:	46b5      	mov	sp, r6

    }
}
 8000a12:	375c      	adds	r7, #92	; 0x5c
 8000a14:	46bd      	mov	sp, r7
 8000a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200074e8 	.word	0x200074e8
 8000a20:	08007c30 	.word	0x08007c30

08000a24 <charToHex>:

uint8_t charToHex(uint8_t ascii)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
    if (ascii >= '0' && ascii <= '9') {
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	2b2f      	cmp	r3, #47	; 0x2f
 8000a32:	d906      	bls.n	8000a42 <charToHex+0x1e>
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	2b39      	cmp	r3, #57	; 0x39
 8000a38:	d803      	bhi.n	8000a42 <charToHex+0x1e>
        return ascii - '0';
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	3b30      	subs	r3, #48	; 0x30
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	e014      	b.n	8000a6c <charToHex+0x48>
    } else if (ascii >= 'A' && ascii <= 'F') {
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	2b40      	cmp	r3, #64	; 0x40
 8000a46:	d906      	bls.n	8000a56 <charToHex+0x32>
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	2b46      	cmp	r3, #70	; 0x46
 8000a4c:	d803      	bhi.n	8000a56 <charToHex+0x32>
        return ascii - 'A' + 10;
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	3b37      	subs	r3, #55	; 0x37
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	e00a      	b.n	8000a6c <charToHex+0x48>
    } else if (ascii >= 'a' && ascii <= 'f') {
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b60      	cmp	r3, #96	; 0x60
 8000a5a:	d906      	bls.n	8000a6a <charToHex+0x46>
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2b66      	cmp	r3, #102	; 0x66
 8000a60:	d803      	bhi.n	8000a6a <charToHex+0x46>
        return ascii - 'a' + 10;
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	3b57      	subs	r3, #87	; 0x57
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	e000      	b.n	8000a6c <charToHex+0x48>
    } else {
        return 0; // Invalid character
 8000a6a:	2300      	movs	r3, #0
    }
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <UDS_MainFunction>:
	}

}

void UDS_MainFunction()
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	while(1)
	{
		if(UDS_Tx_Confirm)
 8000a7c:	4b67      	ldr	r3, [pc, #412]	; (8000c1c <UDS_MainFunction+0x1a4>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	f000 80c6 	beq.w	8000c12 <UDS_MainFunction+0x19a>
		{
			UDS_Tx_Confirm = 0;
 8000a86:	4b65      	ldr	r3, [pc, #404]	; (8000c1c <UDS_MainFunction+0x1a4>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
			if ( UDS_Struct ->Data[Neg_Res] == 0x7f)
 8000a8c:	4b64      	ldr	r3, [pc, #400]	; (8000c20 <UDS_MainFunction+0x1a8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	785b      	ldrb	r3, [r3, #1]
 8000a92:	2b7f      	cmp	r3, #127	; 0x7f
 8000a94:	d107      	bne.n	8000aa6 <UDS_MainFunction+0x2e>
			{
				HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n Sorry Negative frame .\r\n",strlen("\r\n Sorry Negative frame .\r\n"), HAL_MAX_DELAY);
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9a:	221b      	movs	r2, #27
 8000a9c:	4961      	ldr	r1, [pc, #388]	; (8000c24 <UDS_MainFunction+0x1ac>)
 8000a9e:	4862      	ldr	r0, [pc, #392]	; (8000c28 <UDS_MainFunction+0x1b0>)
 8000aa0:	f004 f873 	bl	8004b8a <HAL_UART_Transmit>
 8000aa4:	e0b5      	b.n	8000c12 <UDS_MainFunction+0x19a>
			}

			else {
				UDS_Struct->Data[SID] = UDS_Struct->Data[SID] - 0x40;
 8000aa6:	4b5e      	ldr	r3, [pc, #376]	; (8000c20 <UDS_MainFunction+0x1a8>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	785a      	ldrb	r2, [r3, #1]
 8000aac:	4b5c      	ldr	r3, [pc, #368]	; (8000c20 <UDS_MainFunction+0x1a8>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	3a40      	subs	r2, #64	; 0x40
 8000ab2:	b2d2      	uxtb	r2, r2
 8000ab4:	705a      	strb	r2, [r3, #1]
				if (UDS_Struct->Data[SID] == Read_Service)
 8000ab6:	4b5a      	ldr	r3, [pc, #360]	; (8000c20 <UDS_MainFunction+0x1a8>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	785b      	ldrb	r3, [r3, #1]
 8000abc:	2b22      	cmp	r3, #34	; 0x22
 8000abe:	d133      	bne.n	8000b28 <UDS_MainFunction+0xb0>

				{
					if  ( UDS_Struct->Data[DID_1] == Oil_Temp_First_byte &&  UDS_Struct->Data[DID_2] == Oil_Temp_Second_byte )
 8000ac0:	4b57      	ldr	r3, [pc, #348]	; (8000c20 <UDS_MainFunction+0x1a8>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	789b      	ldrb	r3, [r3, #2]
 8000ac6:	2bf1      	cmp	r3, #241	; 0xf1
 8000ac8:	d113      	bne.n	8000af2 <UDS_MainFunction+0x7a>
 8000aca:	4b55      	ldr	r3, [pc, #340]	; (8000c20 <UDS_MainFunction+0x1a8>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	78db      	ldrb	r3, [r3, #3]
 8000ad0:	2b3d      	cmp	r3, #61	; 0x3d
 8000ad2:	d10e      	bne.n	8000af2 <UDS_MainFunction+0x7a>
					{

						HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n Oil Temp .\r\n", strlen("\r\n Oil Temp .\r\n"), HAL_MAX_DELAY);
 8000ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad8:	220f      	movs	r2, #15
 8000ada:	4954      	ldr	r1, [pc, #336]	; (8000c2c <UDS_MainFunction+0x1b4>)
 8000adc:	4852      	ldr	r0, [pc, #328]	; (8000c28 <UDS_MainFunction+0x1b0>)
 8000ade:	f004 f854 	bl	8004b8a <HAL_UART_Transmit>
						sendHexArrayAsASCII((uint8_t*)&UDS_Struct->Data[Data_DID],2);
 8000ae2:	4b4f      	ldr	r3, [pc, #316]	; (8000c20 <UDS_MainFunction+0x1a8>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3304      	adds	r3, #4
 8000ae8:	2102      	movs	r1, #2
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fe5a 	bl	80007a4 <sendHexArrayAsASCII>
 8000af0:	e08f      	b.n	8000c12 <UDS_MainFunction+0x19a>

					}

					else if  ( UDS_Struct->Data[DID_1] == Oil_Pressure_First_byte &&  UDS_Struct->Data[DID_2] == Oil_Pressure_Second_byte  )
 8000af2:	4b4b      	ldr	r3, [pc, #300]	; (8000c20 <UDS_MainFunction+0x1a8>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	789b      	ldrb	r3, [r3, #2]
 8000af8:	2bf5      	cmp	r3, #245	; 0xf5
 8000afa:	f040 808a 	bne.w	8000c12 <UDS_MainFunction+0x19a>
 8000afe:	4b48      	ldr	r3, [pc, #288]	; (8000c20 <UDS_MainFunction+0x1a8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	78db      	ldrb	r3, [r3, #3]
 8000b04:	2b3d      	cmp	r3, #61	; 0x3d
 8000b06:	f040 8084 	bne.w	8000c12 <UDS_MainFunction+0x19a>
					{
						HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n Oil Pressure .\r\n", strlen("\r\n Oil Pressure .\r\n"), HAL_MAX_DELAY);
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	2213      	movs	r2, #19
 8000b10:	4947      	ldr	r1, [pc, #284]	; (8000c30 <UDS_MainFunction+0x1b8>)
 8000b12:	4845      	ldr	r0, [pc, #276]	; (8000c28 <UDS_MainFunction+0x1b0>)
 8000b14:	f004 f839 	bl	8004b8a <HAL_UART_Transmit>
						sendHexArrayAsASCII((uint8_t*)&UDS_Struct->Data[Data_DID],4);
 8000b18:	4b41      	ldr	r3, [pc, #260]	; (8000c20 <UDS_MainFunction+0x1a8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	2104      	movs	r1, #4
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fe3f 	bl	80007a4 <sendHexArrayAsASCII>
 8000b26:	e074      	b.n	8000c12 <UDS_MainFunction+0x19a>

					}
				}

				/*  Write IDS Message */
				else if (UDS_Struct->Data[SID] == Write_Service)
 8000b28:	4b3d      	ldr	r3, [pc, #244]	; (8000c20 <UDS_MainFunction+0x1a8>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	785b      	ldrb	r3, [r3, #1]
 8000b2e:	2b2e      	cmp	r3, #46	; 0x2e
 8000b30:	d123      	bne.n	8000b7a <UDS_MainFunction+0x102>

				{

					if ( UDS_Struct->Data[DID_1] == Oil_Temp_First_byte &&  UDS_Struct->Data[DID_2] == Oil_Temp_Second_byte )
 8000b32:	4b3b      	ldr	r3, [pc, #236]	; (8000c20 <UDS_MainFunction+0x1a8>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	789b      	ldrb	r3, [r3, #2]
 8000b38:	2bf1      	cmp	r3, #241	; 0xf1
 8000b3a:	d10c      	bne.n	8000b56 <UDS_MainFunction+0xde>
 8000b3c:	4b38      	ldr	r3, [pc, #224]	; (8000c20 <UDS_MainFunction+0x1a8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	78db      	ldrb	r3, [r3, #3]
 8000b42:	2b3d      	cmp	r3, #61	; 0x3d
 8000b44:	d107      	bne.n	8000b56 <UDS_MainFunction+0xde>
					{
						HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n Oil Temperature Written successfully .\r\n", strlen("\r\n Oil Temperature Written successfully .\r\n"), HAL_MAX_DELAY);
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	222b      	movs	r2, #43	; 0x2b
 8000b4c:	4939      	ldr	r1, [pc, #228]	; (8000c34 <UDS_MainFunction+0x1bc>)
 8000b4e:	4836      	ldr	r0, [pc, #216]	; (8000c28 <UDS_MainFunction+0x1b0>)
 8000b50:	f004 f81b 	bl	8004b8a <HAL_UART_Transmit>
 8000b54:	e05d      	b.n	8000c12 <UDS_MainFunction+0x19a>
					}

					else if  ( UDS_Struct->Data[DID_1] == Oil_Pressure_First_byte &&  UDS_Struct->Data[DID_2] == Oil_Pressure_Second_byte  )
 8000b56:	4b32      	ldr	r3, [pc, #200]	; (8000c20 <UDS_MainFunction+0x1a8>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	789b      	ldrb	r3, [r3, #2]
 8000b5c:	2bf5      	cmp	r3, #245	; 0xf5
 8000b5e:	d158      	bne.n	8000c12 <UDS_MainFunction+0x19a>
 8000b60:	4b2f      	ldr	r3, [pc, #188]	; (8000c20 <UDS_MainFunction+0x1a8>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	78db      	ldrb	r3, [r3, #3]
 8000b66:	2b3d      	cmp	r3, #61	; 0x3d
 8000b68:	d153      	bne.n	8000c12 <UDS_MainFunction+0x19a>
					{
						HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n Oil Pressure Written successfully .\r\n", strlen("\r\n Oil Pressure Written successfully .\r\n"), HAL_MAX_DELAY);
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	2228      	movs	r2, #40	; 0x28
 8000b70:	4931      	ldr	r1, [pc, #196]	; (8000c38 <UDS_MainFunction+0x1c0>)
 8000b72:	482d      	ldr	r0, [pc, #180]	; (8000c28 <UDS_MainFunction+0x1b0>)
 8000b74:	f004 f809 	bl	8004b8a <HAL_UART_Transmit>
 8000b78:	e04b      	b.n	8000c12 <UDS_MainFunction+0x19a>
					}
				}
				/*  Control Service  Session */

				else if (UDS_Struct->Data[SID] == Control_Service)
 8000b7a:	4b29      	ldr	r3, [pc, #164]	; (8000c20 <UDS_MainFunction+0x1a8>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	785b      	ldrb	r3, [r3, #1]
 8000b80:	2b10      	cmp	r3, #16
 8000b82:	d117      	bne.n	8000bb4 <UDS_MainFunction+0x13c>

				{

					switch ( UDS_Struct->Data[Sub_F] )
 8000b84:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <UDS_MainFunction+0x1a8>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	789b      	ldrb	r3, [r3, #2]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d002      	beq.n	8000b94 <UDS_MainFunction+0x11c>
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d008      	beq.n	8000ba4 <UDS_MainFunction+0x12c>
 8000b92:	e03e      	b.n	8000c12 <UDS_MainFunction+0x19a>
					{

					case DefaultSession :
						HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n It's Default Session ! .\r\n", strlen("\r\n It's Default Session ! .\r\n"), HAL_MAX_DELAY);
 8000b94:	f04f 33ff 	mov.w	r3, #4294967295
 8000b98:	221d      	movs	r2, #29
 8000b9a:	4928      	ldr	r1, [pc, #160]	; (8000c3c <UDS_MainFunction+0x1c4>)
 8000b9c:	4822      	ldr	r0, [pc, #136]	; (8000c28 <UDS_MainFunction+0x1b0>)
 8000b9e:	f003 fff4 	bl	8004b8a <HAL_UART_Transmit>
						//UDS_Read_Data_Client(Frame_Info.DID);
						break ;
 8000ba2:	e036      	b.n	8000c12 <UDS_MainFunction+0x19a>

					case ExtendedSession :
						HAL_UART_Transmit(&huart2,(uint8_t*) "\r\n It's Extended Session ! .\r\n", strlen("\r\n It's Extended Session ! .\r\n"), HAL_MAX_DELAY);
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba8:	221e      	movs	r2, #30
 8000baa:	4925      	ldr	r1, [pc, #148]	; (8000c40 <UDS_MainFunction+0x1c8>)
 8000bac:	481e      	ldr	r0, [pc, #120]	; (8000c28 <UDS_MainFunction+0x1b0>)
 8000bae:	f003 ffec 	bl	8004b8a <HAL_UART_Transmit>
						//UDS_Read_Data_Client(Frame_Info.DID);
						break ;
 8000bb2:	e02e      	b.n	8000c12 <UDS_MainFunction+0x19a>
					}
				}
				/*  Security Service  */

				else if (UDS_Struct->Data[SID] == Security_Service)
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <UDS_MainFunction+0x1a8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	785b      	ldrb	r3, [r3, #1]
 8000bba:	2b27      	cmp	r3, #39	; 0x27
 8000bbc:	d11d      	bne.n	8000bfa <UDS_MainFunction+0x182>

				{

					switch ( UDS_Struct->Data[Sub_F] )
 8000bbe:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <UDS_MainFunction+0x1a8>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	789b      	ldrb	r3, [r3, #2]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d009      	beq.n	8000bdc <UDS_MainFunction+0x164>
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d122      	bne.n	8000c12 <UDS_MainFunction+0x19a>
					{

					case Key :
						HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n Key is Compatible ! .\r\n", strlen ( "\r\n Key is Compatible ! .\r\n"), HAL_MAX_DELAY);
 8000bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd0:	221a      	movs	r2, #26
 8000bd2:	491c      	ldr	r1, [pc, #112]	; (8000c44 <UDS_MainFunction+0x1cc>)
 8000bd4:	4814      	ldr	r0, [pc, #80]	; (8000c28 <UDS_MainFunction+0x1b0>)
 8000bd6:	f003 ffd8 	bl	8004b8a <HAL_UART_Transmit>
						break ;
 8000bda:	e01a      	b.n	8000c12 <UDS_MainFunction+0x19a>

					case Seed :
						HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n Seed is \r\n", strlen ("\r\n Seed is \r\n"), HAL_MAX_DELAY);
 8000bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000be0:	220d      	movs	r2, #13
 8000be2:	4919      	ldr	r1, [pc, #100]	; (8000c48 <UDS_MainFunction+0x1d0>)
 8000be4:	4810      	ldr	r0, [pc, #64]	; (8000c28 <UDS_MainFunction+0x1b0>)
 8000be6:	f003 ffd0 	bl	8004b8a <HAL_UART_Transmit>
						sendHexArrayAsASCII((uint8_t*)&UDS_Struct->Data[Data_Sub_Fun],4);
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <UDS_MainFunction+0x1a8>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	3303      	adds	r3, #3
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fdd6 	bl	80007a4 <sendHexArrayAsASCII>

						break ;
 8000bf8:	e00b      	b.n	8000c12 <UDS_MainFunction+0x19a>
					}
				}
				/*  Tester_Representer_Service  */

				else if (UDS_Struct->Data[SID] == Tester_Representer_Service)
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <UDS_MainFunction+0x1a8>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	785b      	ldrb	r3, [r3, #1]
 8000c00:	2b3e      	cmp	r3, #62	; 0x3e
 8000c02:	d106      	bne.n	8000c12 <UDS_MainFunction+0x19a>

				{

					HAL_UART_Transmit(&huart2,(uint8_t*) "\r\n ECU Reseted ! .\r\n", strlen("\r\n ECU Reseted ! .\r\n"), HAL_MAX_DELAY);
 8000c04:	f04f 33ff 	mov.w	r3, #4294967295
 8000c08:	2214      	movs	r2, #20
 8000c0a:	4910      	ldr	r1, [pc, #64]	; (8000c4c <UDS_MainFunction+0x1d4>)
 8000c0c:	4806      	ldr	r0, [pc, #24]	; (8000c28 <UDS_MainFunction+0x1b0>)
 8000c0e:	f003 ffbc 	bl	8004b8a <HAL_UART_Transmit>

			}

		}

		vTaskDelay(50);
 8000c12:	2032      	movs	r0, #50	; 0x32
 8000c14:	f005 fb64 	bl	80062e0 <vTaskDelay>
		if(UDS_Tx_Confirm)
 8000c18:	e730      	b.n	8000a7c <UDS_MainFunction+0x4>
 8000c1a:	bf00      	nop
 8000c1c:	200060ec 	.word	0x200060ec
 8000c20:	200060f0 	.word	0x200060f0
 8000c24:	08007cb0 	.word	0x08007cb0
 8000c28:	200074e8 	.word	0x200074e8
 8000c2c:	08007ccc 	.word	0x08007ccc
 8000c30:	08007cdc 	.word	0x08007cdc
 8000c34:	08007cf0 	.word	0x08007cf0
 8000c38:	08007d1c 	.word	0x08007d1c
 8000c3c:	08007d48 	.word	0x08007d48
 8000c40:	08007d68 	.word	0x08007d68
 8000c44:	08007d88 	.word	0x08007d88
 8000c48:	08007da4 	.word	0x08007da4
 8000c4c:	08007db4 	.word	0x08007db4

08000c50 <UDS_Client_Callback>:
	}
}

void UDS_Client_Callback(uint32_t TxPduId,PduInfoType *PduInfoPtr)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
	UDS_Tx_Confirm = 1;
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <UDS_Client_Callback+0x24>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	701a      	strb	r2, [r3, #0]
	UDS_Struct = PduInfoPtr;
 8000c60:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <UDS_Client_Callback+0x28>)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	6013      	str	r3, [r2, #0]

}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	200060ec 	.word	0x200060ec
 8000c78:	200060f0 	.word	0x200060f0

08000c7c <HAL_CAN_RxFifo0MsgPendingCallback>:
CAN_RxHeaderTypeDef rxHeader;
PduInfoTRx CanIfPduInfo;
volatile int8_t CanIf_Rx;
Std_ReturnType (*CanTp_Callback)(uint32_t RxPduId, PduInfoTRx* PduInfoPtr) = NULL;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, CanIfPduInfo.Data) != HAL_OK) {
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000c86:	4a09      	ldr	r2, [pc, #36]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000c88:	2100      	movs	r1, #0
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f001 ff6c 	bl	8002b68 <HAL_CAN_GetRxMessage>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		// Reception error
		Error_Handler();
 8000c96:	f001 f9bf 	bl	8002018 <Error_Handler>
	}
	CanIf_Rx = 1;
 8000c9a:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20006114 	.word	0x20006114
 8000cac:	200060f8 	.word	0x200060f8
 8000cb0:	20006120 	.word	0x20006120

08000cb4 <CanIf_Transmit>:
 *  @brief CAN interface transmit function
 *  @param  PduInfoTRx*		: Pointer to message structure contain (Data, Length)
 *  @param  TxPduId	: PDU ID
 *  @return None
 */
void CanIf_Transmit(uint32_t TxPduId, PduInfoTRx* PduInfoPtr){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;
	if(TxPduId == 0){
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <CanIf_Transmit+0x16>
		txHeader.StdId = 0x100;
 8000cc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc8:	613b      	str	r3, [r7, #16]
	}

	txHeader.ExtId = 0x00;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
	txHeader.IDE = CAN_ID_STD;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
	txHeader.RTR = CAN_RTR_DATA;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
	txHeader.DLC = 8;
 8000cd6:	2308      	movs	r3, #8
 8000cd8:	623b      	str	r3, [r7, #32]
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0);
 8000cda:	bf00      	nop
 8000cdc:	480b      	ldr	r0, [pc, #44]	; (8000d0c <CanIf_Transmit+0x58>)
 8000cde:	f001 ff0e 	bl	8002afe <HAL_CAN_GetTxMailboxesFreeLevel>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d0f9      	beq.n	8000cdc <CanIf_Transmit+0x28>
	if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, PduInfoPtr->Data, &txMailbox) != HAL_OK) {
 8000ce8:	683a      	ldr	r2, [r7, #0]
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	f107 0110 	add.w	r1, r7, #16
 8000cf2:	4806      	ldr	r0, [pc, #24]	; (8000d0c <CanIf_Transmit+0x58>)
 8000cf4:	f001 fe28 	bl	8002948 <HAL_CAN_AddTxMessage>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <CanIf_Transmit+0x4e>
		// Transmission error
		Error_Handler();
 8000cfe:	f001 f98b 	bl	8002018 <Error_Handler>

	}
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
}
 8000d02:	bf00      	nop
 8000d04:	3728      	adds	r7, #40	; 0x28
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20007178 	.word	0x20007178

08000d10 <CanIf_Receive>:
/**
 *  @brief CAN interface receive data
 *  @param  None
 *  @return None
 */
void CanIf_Receive(){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
	uint32_t PDU_ID;
	while(1){
		if(CanIf_Rx){
 8000d16:	4b2f      	ldr	r3, [pc, #188]	; (8000dd4 <CanIf_Receive+0xc4>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b25b      	sxtb	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d054      	beq.n	8000dca <CanIf_Receive+0xba>
			CanIf_Rx = 0;
 8000d20:	4b2c      	ldr	r3, [pc, #176]	; (8000dd4 <CanIf_Receive+0xc4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
			CanIfPduInfo.Length = rxHeader.DLC;
 8000d26:	4b2c      	ldr	r3, [pc, #176]	; (8000dd8 <CanIf_Receive+0xc8>)
 8000d28:	691b      	ldr	r3, [r3, #16]
 8000d2a:	4a2c      	ldr	r2, [pc, #176]	; (8000ddc <CanIf_Receive+0xcc>)
 8000d2c:	6093      	str	r3, [r2, #8]
			switch(rxHeader.StdId)
 8000d2e:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <CanIf_Receive+0xc8>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d36:	d03c      	beq.n	8000db2 <CanIf_Receive+0xa2>
 8000d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d3c:	d83c      	bhi.n	8000db8 <CanIf_Receive+0xa8>
 8000d3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000d42:	d033      	beq.n	8000dac <CanIf_Receive+0x9c>
 8000d44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000d48:	d836      	bhi.n	8000db8 <CanIf_Receive+0xa8>
 8000d4a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000d4e:	d02a      	beq.n	8000da6 <CanIf_Receive+0x96>
 8000d50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000d54:	d830      	bhi.n	8000db8 <CanIf_Receive+0xa8>
 8000d56:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000d5a:	d021      	beq.n	8000da0 <CanIf_Receive+0x90>
 8000d5c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000d60:	d82a      	bhi.n	8000db8 <CanIf_Receive+0xa8>
 8000d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d66:	d018      	beq.n	8000d9a <CanIf_Receive+0x8a>
 8000d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d6c:	d824      	bhi.n	8000db8 <CanIf_Receive+0xa8>
 8000d6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000d72:	d00f      	beq.n	8000d94 <CanIf_Receive+0x84>
 8000d74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000d78:	d81e      	bhi.n	8000db8 <CanIf_Receive+0xa8>
 8000d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d7e:	d003      	beq.n	8000d88 <CanIf_Receive+0x78>
 8000d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d84:	d003      	beq.n	8000d8e <CanIf_Receive+0x7e>
 8000d86:	e017      	b.n	8000db8 <CanIf_Receive+0xa8>
			{
			case 0x100 :PDU_ID = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	607b      	str	r3, [r7, #4]
			break;
 8000d8c:	e014      	b.n	8000db8 <CanIf_Receive+0xa8>
			case 0x200 :PDU_ID = 1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	607b      	str	r3, [r7, #4]
			break;
 8000d92:	e011      	b.n	8000db8 <CanIf_Receive+0xa8>
			case 0x300 :PDU_ID = 2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	607b      	str	r3, [r7, #4]
			break;
 8000d98:	e00e      	b.n	8000db8 <CanIf_Receive+0xa8>
			case 0x400 :PDU_ID = 3;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	607b      	str	r3, [r7, #4]
			break;
 8000d9e:	e00b      	b.n	8000db8 <CanIf_Receive+0xa8>
			case 0x500 :PDU_ID = 4;
 8000da0:	2304      	movs	r3, #4
 8000da2:	607b      	str	r3, [r7, #4]
			break;
 8000da4:	e008      	b.n	8000db8 <CanIf_Receive+0xa8>
			case 0x600 :PDU_ID = 5;
 8000da6:	2305      	movs	r3, #5
 8000da8:	607b      	str	r3, [r7, #4]
			break;
 8000daa:	e005      	b.n	8000db8 <CanIf_Receive+0xa8>
			case 0x700 :PDU_ID = 6;
 8000dac:	2306      	movs	r3, #6
 8000dae:	607b      	str	r3, [r7, #4]
			break;
 8000db0:	e002      	b.n	8000db8 <CanIf_Receive+0xa8>
			case 0x800 :PDU_ID = 7;
 8000db2:	2307      	movs	r3, #7
 8000db4:	607b      	str	r3, [r7, #4]
			break;
 8000db6:	bf00      	nop
			}

			if(CanTp_Callback != NULL)
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <CanIf_Receive+0xd0>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d004      	beq.n	8000dca <CanIf_Receive+0xba>
			{
				CanTp_Callback(PDU_ID, &CanIfPduInfo);
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <CanIf_Receive+0xd0>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4905      	ldr	r1, [pc, #20]	; (8000ddc <CanIf_Receive+0xcc>)
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	4798      	blx	r3
			}
		}
		vTaskDelay(10);
 8000dca:	200a      	movs	r0, #10
 8000dcc:	f005 fa88 	bl	80062e0 <vTaskDelay>
		if(CanIf_Rx){
 8000dd0:	e7a1      	b.n	8000d16 <CanIf_Receive+0x6>
 8000dd2:	bf00      	nop
 8000dd4:	20006120 	.word	0x20006120
 8000dd8:	200060f8 	.word	0x200060f8
 8000ddc:	20006114 	.word	0x20006114
 8000de0:	20006124 	.word	0x20006124

08000de4 <CanIf_setCallback>:
	}
}

void CanIf_setCallback(Std_ReturnType (*IF_Callback)(uint32_t RxPduId, PduInfoTRx* PduInfoPtr)){
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	if(IF_Callback != NULL)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d002      	beq.n	8000df8 <CanIf_setCallback+0x14>
	{
		CanTp_Callback = IF_Callback ;
 8000df2:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <CanIf_setCallback+0x20>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6013      	str	r3, [r2, #0]
	}
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	20006124 	.word	0x20006124

08000e08 <CanTp_Init>:
volatile int32_t rxCurrentMaxIndex = 0;

volatile uint8_t rxData = 0;
volatile uint8_t rxComplete = 0;

void CanTp_Init(){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	CanIf_setCallback(CanTp_RxIndication);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <CanTp_Init+0x10>)
 8000e0e:	f7ff ffe9 	bl	8000de4 <CanIf_setCallback>
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	080010c9 	.word	0x080010c9

08000e1c <CanTp_MainFunction>:

void CanTp_MainFunction(){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
	while(1){
		if(CanTp_Rx){
 8000e22:	4b8c      	ldr	r3, [pc, #560]	; (8001054 <CanTp_MainFunction+0x238>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d07b      	beq.n	8000f24 <CanTp_MainFunction+0x108>
			CanTp_Rx = 0;
 8000e2c:	4b89      	ldr	r3, [pc, #548]	; (8001054 <CanTp_MainFunction+0x238>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
			//Stop the program if the PduID doesn't equal 0 :)
			if(GlobalRxPduId != 0){
 8000e32:	4b89      	ldr	r3, [pc, #548]	; (8001058 <CanTp_MainFunction+0x23c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d000      	beq.n	8000e3c <CanTp_MainFunction+0x20>
				while(1);
 8000e3a:	e7fe      	b.n	8000e3a <CanTp_MainFunction+0x1e>
			}
			//Get the frame type from the
			Frame_Type frame_type = CanTp_GetFrameType(GlobalRxPduInfoPtr->Data[0]);
 8000e3c:	4b87      	ldr	r3, [pc, #540]	; (800105c <CanTp_MainFunction+0x240>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f95c 	bl	8001100 <CanTp_GetFrameType>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	71bb      	strb	r3, [r7, #6]
			//	Frame_Type frame_type = First_Frame

			//Call the correct decoder depending on the frame type
			//extract the length and save it in numberOfRemainingBytesToReceive and connect the data
			switch(frame_type){
 8000e4c:	79bb      	ldrb	r3, [r7, #6]
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d84c      	bhi.n	8000eec <CanTp_MainFunction+0xd0>
 8000e52:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <CanTp_MainFunction+0x3c>)
 8000e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e58:	08000e69 	.word	0x08000e69
 8000e5c:	08000e7b 	.word	0x08000e7b
 8000e60:	08000ea3 	.word	0x08000ea3
 8000e64:	08000edb 	.word	0x08000edb
			case Single_Frame:
				CanTp_decodeSingleFrame(GlobalRxPduId, GlobalRxPduInfoPtr);
 8000e68:	4b7b      	ldr	r3, [pc, #492]	; (8001058 <CanTp_MainFunction+0x23c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a7b      	ldr	r2, [pc, #492]	; (800105c <CanTp_MainFunction+0x240>)
 8000e6e:	6812      	ldr	r2, [r2, #0]
 8000e70:	4611      	mov	r1, r2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 fa88 	bl	8001388 <CanTp_decodeSingleFrame>
				break;
 8000e78:	e03b      	b.n	8000ef2 <CanTp_MainFunction+0xd6>
			case First_Frame:
				CanTp_decodeFirstFrame(GlobalRxPduId, GlobalRxPduInfoPtr);
 8000e7a:	4b77      	ldr	r3, [pc, #476]	; (8001058 <CanTp_MainFunction+0x23c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a77      	ldr	r2, [pc, #476]	; (800105c <CanTp_MainFunction+0x240>)
 8000e80:	6812      	ldr	r2, [r2, #0]
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 fab5 	bl	80013f4 <CanTp_decodeFirstFrame>
				expectedFrameState = FlowControl_Frame_State;
 8000e8a:	4b75      	ldr	r3, [pc, #468]	; (8001060 <CanTp_MainFunction+0x244>)
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	701a      	strb	r2, [r3, #0]
				CanTp_Transmit(GlobalRxPduId, (PduInfoType*) GlobalRxPduInfoPtr);
 8000e90:	4b71      	ldr	r3, [pc, #452]	; (8001058 <CanTp_MainFunction+0x23c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a71      	ldr	r2, [pc, #452]	; (800105c <CanTp_MainFunction+0x240>)
 8000e96:	6812      	ldr	r2, [r2, #0]
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f8f8 	bl	8001090 <CanTp_Transmit>
				break;
 8000ea0:	e027      	b.n	8000ef2 <CanTp_MainFunction+0xd6>
			case Consecutive_Frame:
				CanTp_decodeConsecutiveFrame(GlobalRxPduId, GlobalRxPduInfoPtr);
 8000ea2:	4b6d      	ldr	r3, [pc, #436]	; (8001058 <CanTp_MainFunction+0x23c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a6d      	ldr	r2, [pc, #436]	; (800105c <CanTp_MainFunction+0x240>)
 8000ea8:	6812      	ldr	r2, [r2, #0]
 8000eaa:	4611      	mov	r1, r2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 fad9 	bl	8001464 <CanTp_decodeConsecutiveFrame>
				if(numberOfConsecutiveFramesToReceive == 0 && numberOfRemainingBytesToReceive > 0){
 8000eb2:	4b6c      	ldr	r3, [pc, #432]	; (8001064 <CanTp_MainFunction+0x248>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d11a      	bne.n	8000ef0 <CanTp_MainFunction+0xd4>
 8000eba:	4b6b      	ldr	r3, [pc, #428]	; (8001068 <CanTp_MainFunction+0x24c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d016      	beq.n	8000ef0 <CanTp_MainFunction+0xd4>
					expectedFrameState = FlowControl_Frame_State;
 8000ec2:	4b67      	ldr	r3, [pc, #412]	; (8001060 <CanTp_MainFunction+0x244>)
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	701a      	strb	r2, [r3, #0]
					CanTp_Transmit(GlobalRxPduId, (PduInfoType*) GlobalRxPduInfoPtr);
 8000ec8:	4b63      	ldr	r3, [pc, #396]	; (8001058 <CanTp_MainFunction+0x23c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a63      	ldr	r2, [pc, #396]	; (800105c <CanTp_MainFunction+0x240>)
 8000ece:	6812      	ldr	r2, [r2, #0]
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f8dc 	bl	8001090 <CanTp_Transmit>
				}
				break;
 8000ed8:	e00a      	b.n	8000ef0 <CanTp_MainFunction+0xd4>
			case FlowControl_Frame:
				//adjust the numberOfConsecutiveFramesToSend variable inside a function
				//based on the number of empty buffers available in the other node
				//as indicated in the BS (block size) byte of the flow control frame
				CanTp_decodeFlowControlFrame(GlobalRxPduId, GlobalRxPduInfoPtr);
 8000eda:	4b5f      	ldr	r3, [pc, #380]	; (8001058 <CanTp_MainFunction+0x23c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a5f      	ldr	r2, [pc, #380]	; (800105c <CanTp_MainFunction+0x240>)
 8000ee0:	6812      	ldr	r2, [r2, #0]
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 fb05 	bl	80014f4 <CanTp_decodeFlowControlFrame>
				break;
 8000eea:	e002      	b.n	8000ef2 <CanTp_MainFunction+0xd6>
			default:
				break;
 8000eec:	bf00      	nop
 8000eee:	e000      	b.n	8000ef2 <CanTp_MainFunction+0xd6>
				break;
 8000ef0:	bf00      	nop
			}

			if(frame_type == FlowControl_Frame){
 8000ef2:	79bb      	ldrb	r3, [r7, #6]
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	f000 80a8 	beq.w	800104a <CanTp_MainFunction+0x22e>

			}
			else if(numberOfRemainingBytesToReceive == 0){
 8000efa:	4b5b      	ldr	r3, [pc, #364]	; (8001068 <CanTp_MainFunction+0x24c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f040 80a3 	bne.w	800104a <CanTp_MainFunction+0x22e>
				if(App_Callback != NULL){
 8000f04:	4b59      	ldr	r3, [pc, #356]	; (800106c <CanTp_MainFunction+0x250>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 809e 	beq.w	800104a <CanTp_MainFunction+0x22e>
					currentIndex = 0;
 8000f0e:	4b58      	ldr	r3, [pc, #352]	; (8001070 <CanTp_MainFunction+0x254>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	801a      	strh	r2, [r3, #0]
					App_Callback(GlobalRxPduId, &CompletePduInfo);
 8000f14:	4b55      	ldr	r3, [pc, #340]	; (800106c <CanTp_MainFunction+0x250>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a4f      	ldr	r2, [pc, #316]	; (8001058 <CanTp_MainFunction+0x23c>)
 8000f1a:	6812      	ldr	r2, [r2, #0]
 8000f1c:	4955      	ldr	r1, [pc, #340]	; (8001074 <CanTp_MainFunction+0x258>)
 8000f1e:	4610      	mov	r0, r2
 8000f20:	4798      	blx	r3
 8000f22:	e092      	b.n	800104a <CanTp_MainFunction+0x22e>
				}
			}
		}
		else if(CanTp_Tx){
 8000f24:	4b54      	ldr	r3, [pc, #336]	; (8001078 <CanTp_MainFunction+0x25c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f000 808d 	beq.w	800104a <CanTp_MainFunction+0x22e>
			//Stop the program if the PduID doesn't equal 0 :)
			if(GlobalTxPduId != 0){
 8000f30:	4b52      	ldr	r3, [pc, #328]	; (800107c <CanTp_MainFunction+0x260>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d000      	beq.n	8000f3a <CanTp_MainFunction+0x11e>
				while(1);
 8000f38:	e7fe      	b.n	8000f38 <CanTp_MainFunction+0x11c>
			}

			Frame_Type frame_type = None;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	71fb      	strb	r3, [r7, #7]
			if(numberOfRemainingBytesToSend == 0 && expectedFrameState == Any_State){
 8000f3e:	4b50      	ldr	r3, [pc, #320]	; (8001080 <CanTp_MainFunction+0x264>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d11c      	bne.n	8000f80 <CanTp_MainFunction+0x164>
 8000f46:	4b46      	ldr	r3, [pc, #280]	; (8001060 <CanTp_MainFunction+0x244>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d118      	bne.n	8000f80 <CanTp_MainFunction+0x164>
				numberOfRemainingBytesToSend = GlobalTxPduInfoPtr->Length;
 8000f4e:	4b4d      	ldr	r3, [pc, #308]	; (8001084 <CanTp_MainFunction+0x268>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a49      	ldr	r2, [pc, #292]	; (8001080 <CanTp_MainFunction+0x264>)
 8000f5a:	6013      	str	r3, [r2, #0]
				CompletePduInfo.Length = numberOfRemainingBytesToSend;
 8000f5c:	4b48      	ldr	r3, [pc, #288]	; (8001080 <CanTp_MainFunction+0x264>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a44      	ldr	r2, [pc, #272]	; (8001074 <CanTp_MainFunction+0x258>)
 8000f62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000f66:	6013      	str	r3, [r2, #0]
				if(GlobalTxPduInfoPtr->Length < 8){
 8000f68:	4b46      	ldr	r3, [pc, #280]	; (8001084 <CanTp_MainFunction+0x268>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b07      	cmp	r3, #7
 8000f74:	d802      	bhi.n	8000f7c <CanTp_MainFunction+0x160>
					frame_type = Single_Frame;
 8000f76:	2300      	movs	r3, #0
 8000f78:	71fb      	strb	r3, [r7, #7]
 8000f7a:	e001      	b.n	8000f80 <CanTp_MainFunction+0x164>
				}
				else{
					frame_type = First_Frame;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	71fb      	strb	r3, [r7, #7]
				}
			}


			if(numberOfRemainingBytesToSend > 0 || expectedFrameState == FlowControl_Frame_State){
 8000f80:	4b3f      	ldr	r3, [pc, #252]	; (8001080 <CanTp_MainFunction+0x264>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d103      	bne.n	8000f90 <CanTp_MainFunction+0x174>
 8000f88:	4b35      	ldr	r3, [pc, #212]	; (8001060 <CanTp_MainFunction+0x244>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d14e      	bne.n	800102e <CanTp_MainFunction+0x212>

				if(expectedFrameState == Consecutive_Frame_State){
 8000f90:	4b33      	ldr	r3, [pc, #204]	; (8001060 <CanTp_MainFunction+0x244>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d102      	bne.n	8000f9e <CanTp_MainFunction+0x182>
					frame_type = Consecutive_Frame;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	71fb      	strb	r3, [r7, #7]
 8000f9c:	e005      	b.n	8000faa <CanTp_MainFunction+0x18e>
				}
				else if(expectedFrameState == FlowControl_Frame_State){
 8000f9e:	4b30      	ldr	r3, [pc, #192]	; (8001060 <CanTp_MainFunction+0x244>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d101      	bne.n	8000faa <CanTp_MainFunction+0x18e>
					frame_type = FlowControl_Frame;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	71fb      	strb	r3, [r7, #7]
				}

				//Call the right encoder function according to the frame type
				//Make sure to adjust the numberOfRemainingBytesToSend variable to know if all the data has been sent
				//Also make sure to call the CanIf_Transmit method at the end of these functions.
				switch(frame_type){
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d83d      	bhi.n	800102c <CanTp_MainFunction+0x210>
 8000fb0:	a201      	add	r2, pc, #4	; (adr r2, 8000fb8 <CanTp_MainFunction+0x19c>)
 8000fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb6:	bf00      	nop
 8000fb8:	08000fc9 	.word	0x08000fc9
 8000fbc:	08000fdb 	.word	0x08000fdb
 8000fc0:	08000ff1 	.word	0x08000ff1
 8000fc4:	0800101b 	.word	0x0800101b
				case Single_Frame:
					CanTp_encodeSingleFrame(GlobalTxPduId, GlobalTxPduInfoPtr);
 8000fc8:	4b2c      	ldr	r3, [pc, #176]	; (800107c <CanTp_MainFunction+0x260>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a2d      	ldr	r2, [pc, #180]	; (8001084 <CanTp_MainFunction+0x268>)
 8000fce:	6812      	ldr	r2, [r2, #0]
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f8ba 	bl	800114c <CanTp_encodeSingleFrame>
					break;
 8000fd8:	e029      	b.n	800102e <CanTp_MainFunction+0x212>
				case First_Frame:
					CanTp_encodeFirstFrame(GlobalTxPduId, GlobalTxPduInfoPtr);
 8000fda:	4b28      	ldr	r3, [pc, #160]	; (800107c <CanTp_MainFunction+0x260>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a29      	ldr	r2, [pc, #164]	; (8001084 <CanTp_MainFunction+0x268>)
 8000fe0:	6812      	ldr	r2, [r2, #0]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 f8fb 	bl	80011e0 <CanTp_encodeFirstFrame>
					frame_type = None;
 8000fea:	2304      	movs	r3, #4
 8000fec:	71fb      	strb	r3, [r7, #7]
					break;
 8000fee:	e01e      	b.n	800102e <CanTp_MainFunction+0x212>
				case Consecutive_Frame:
					if(numberOfConsecutiveFramesToSend > 0){
 8000ff0:	4b25      	ldr	r3, [pc, #148]	; (8001088 <CanTp_MainFunction+0x26c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d00d      	beq.n	8001014 <CanTp_MainFunction+0x1f8>
						numberOfConsecutiveFramesToSend--;
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <CanTp_MainFunction+0x26c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	4a22      	ldr	r2, [pc, #136]	; (8001088 <CanTp_MainFunction+0x26c>)
 8001000:	6013      	str	r3, [r2, #0]
						CanTp_encodeConsecutiveFrame(GlobalTxPduId, GlobalTxPduInfoPtr);
 8001002:	4b1e      	ldr	r3, [pc, #120]	; (800107c <CanTp_MainFunction+0x260>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a1f      	ldr	r2, [pc, #124]	; (8001084 <CanTp_MainFunction+0x268>)
 8001008:	6812      	ldr	r2, [r2, #0]
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f000 f927 	bl	8001260 <CanTp_encodeConsecutiveFrame>
					}
					else{
						frame_type = None;
						//wait for flow control to reach CanTp_RxIndication in order to change numberOfConsecutiveFramesToSend variable
					}
					break;
 8001012:	e00c      	b.n	800102e <CanTp_MainFunction+0x212>
						frame_type = None;
 8001014:	2304      	movs	r3, #4
 8001016:	71fb      	strb	r3, [r7, #7]
					break;
 8001018:	e009      	b.n	800102e <CanTp_MainFunction+0x212>
				case FlowControl_Frame:
					//Check the availableBuffers variable (in our case it's the size of the receive array)
					CanTp_encodeFlowControlFrame(GlobalTxPduId, GlobalTxPduInfoPtr);
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <CanTp_MainFunction+0x260>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a19      	ldr	r2, [pc, #100]	; (8001084 <CanTp_MainFunction+0x268>)
 8001020:	6812      	ldr	r2, [r2, #0]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f000 f981 	bl	800132c <CanTp_encodeFlowControlFrame>
					break;
 800102a:	e000      	b.n	800102e <CanTp_MainFunction+0x212>
				default:
					break;
 800102c:	bf00      	nop
				}
			}

			if(numberOfRemainingBytesToSend == 0){
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <CanTp_MainFunction+0x264>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d109      	bne.n	800104a <CanTp_MainFunction+0x22e>
				//Reset the expected frame
				expectedFrameState = Any_State;
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <CanTp_MainFunction+0x244>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
				currentOffset = -1;
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <CanTp_MainFunction+0x270>)
 800103e:	f04f 32ff 	mov.w	r2, #4294967295
 8001042:	601a      	str	r2, [r3, #0]
				CanTp_Tx = 0;
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <CanTp_MainFunction+0x25c>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
			}
		}
		vTaskDelay(100);
 800104a:	2064      	movs	r0, #100	; 0x64
 800104c:	f005 f948 	bl	80062e0 <vTaskDelay>
		if(CanTp_Rx){
 8001050:	e6e7      	b.n	8000e22 <CanTp_MainFunction+0x6>
 8001052:	bf00      	nop
 8001054:	2000716c 	.word	0x2000716c
 8001058:	20007170 	.word	0x20007170
 800105c:	2000715c 	.word	0x2000715c
 8001060:	2000613c 	.word	0x2000613c
 8001064:	2000612c 	.word	0x2000612c
 8001068:	20006134 	.word	0x20006134
 800106c:	20006138 	.word	0x20006138
 8001070:	20007166 	.word	0x20007166
 8001074:	20006158 	.word	0x20006158
 8001078:	2000716d 	.word	0x2000716d
 800107c:	20007174 	.word	0x20007174
 8001080:	20006130 	.word	0x20006130
 8001084:	20007160 	.word	0x20007160
 8001088:	20006128 	.word	0x20006128
 800108c:	20000004 	.word	0x20000004

08001090 <CanTp_Transmit>:
	}
}

Std_ReturnType CanTp_Transmit(uint32_t TxPduId, PduInfoType* PduInfoPtr){
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
	GlobalTxPduInfoPtr = PduInfoPtr;
 800109a:	4a08      	ldr	r2, [pc, #32]	; (80010bc <CanTp_Transmit+0x2c>)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	6013      	str	r3, [r2, #0]
	GlobalTxPduId = TxPduId;
 80010a0:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <CanTp_Transmit+0x30>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
	CanTp_Tx = 1;
 80010a6:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <CanTp_Transmit+0x34>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	701a      	strb	r2, [r3, #0]
	return E_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20007160 	.word	0x20007160
 80010c0:	20007174 	.word	0x20007174
 80010c4:	2000716d 	.word	0x2000716d

080010c8 <CanTp_RxIndication>:

Std_ReturnType CanTp_RxIndication (uint32_t RxPduId, PduInfoTRx* PduInfoPtr){
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
	GlobalRxPduInfoPtr = PduInfoPtr;
 80010d2:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <CanTp_RxIndication+0x2c>)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	6013      	str	r3, [r2, #0]
	GlobalRxPduId = RxPduId;
 80010d8:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <CanTp_RxIndication+0x30>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
	CanTp_Rx = 1;
 80010de:	4b07      	ldr	r3, [pc, #28]	; (80010fc <CanTp_RxIndication+0x34>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
	return E_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	2000715c 	.word	0x2000715c
 80010f8:	20007170 	.word	0x20007170
 80010fc:	2000716c 	.word	0x2000716c

08001100 <CanTp_GetFrameType>:

Frame_Type CanTp_GetFrameType(uint8_t PCI){
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
	//Switch case on the PCI to determine the frame type
	PCI >>= 4;
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	091b      	lsrs	r3, r3, #4
 800110e:	71fb      	strb	r3, [r7, #7]
	if(PCI < 4){
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	2b03      	cmp	r3, #3
 8001114:	d801      	bhi.n	800111a <CanTp_GetFrameType+0x1a>
		return (Frame_Type) PCI;
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	e000      	b.n	800111c <CanTp_GetFrameType+0x1c>
	}
	else{
		return None;
 800111a:	2304      	movs	r3, #4
	}
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <CanTp_setCallback>:

void CanTp_setCallback(void (*PTF)(uint32_t TxPduId, PduInfoType* PduInfoPtr)){
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	if(PTF != NULL){
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d002      	beq.n	800113c <CanTp_setCallback+0x14>
		App_Callback = PTF;
 8001136:	4a04      	ldr	r2, [pc, #16]	; (8001148 <CanTp_setCallback+0x20>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6013      	str	r3, [r2, #0]
	}
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	20006138 	.word	0x20006138

0800114c <CanTp_encodeSingleFrame>:


void CanTp_encodeSingleFrame(uint32_t TxPduId, PduInfoType* PduInfoPtr){
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
	//	if (PduInfoPtr == NULL ) {
	//		return E_NOK; // Return E_NOK for NULL pointer
	//	}

	// Ensure the data length does not exceed the maximum payload length
	uint32_t dataLength = PduInfoPtr->Length;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	60bb      	str	r3, [r7, #8]
	EncodedPduInfo.Length = PduInfoPtr->Length;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a1b      	ldr	r2, [pc, #108]	; (80011d8 <CanTp_encodeSingleFrame+0x8c>)
 800116a:	6093      	str	r3, [r2, #8]
	numberOfRemainingBytesToSend -= dataLength;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <CanTp_encodeSingleFrame+0x90>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	4a19      	ldr	r2, [pc, #100]	; (80011dc <CanTp_encodeSingleFrame+0x90>)
 8001176:	6013      	str	r3, [r2, #0]
	//	if (dataLength > CAN_MAX_PAYLOAD_LENGTH) {
	//		return E_NOK; // Return E_NOK for data length exceeding CAN payload length
	//	}

	// The first byte of the CAN frame is reserved for PCI (Protocol Control Information)
	EncodedPduInfo.Data[0] = 0x00 | (dataLength & 0x0F); // PCI is 0x0N where N is the length of the data
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f003 030f 	and.w	r3, r3, #15
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <CanTp_encodeSingleFrame+0x8c>)
 8001184:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	// Copy the data from PduInfoType to the CAN frame manually, starting from the second byte
	for ( i = 0; i < dataLength; i++) {
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	e00a      	b.n	80011a2 <CanTp_encodeSingleFrame+0x56>
		EncodedPduInfo.Data[i + 1] = PduInfoPtr->Data[i];
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	3301      	adds	r3, #1
 8001190:	6839      	ldr	r1, [r7, #0]
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	440a      	add	r2, r1
 8001196:	7811      	ldrb	r1, [r2, #0]
 8001198:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <CanTp_encodeSingleFrame+0x8c>)
 800119a:	54d1      	strb	r1, [r2, r3]
	for ( i = 0; i < dataLength; i++) {
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	3301      	adds	r3, #1
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d3f0      	bcc.n	800118c <CanTp_encodeSingleFrame+0x40>
	}

	// Fill the rest of the frame with zeros if necessary
	for (i = dataLength + 1; i < CAN_FRAME_LENGTH; i++) {
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	3301      	adds	r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	e007      	b.n	80011c2 <CanTp_encodeSingleFrame+0x76>
		EncodedPduInfo.Data[i] = 0;
 80011b2:	4a09      	ldr	r2, [pc, #36]	; (80011d8 <CanTp_encodeSingleFrame+0x8c>)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4413      	add	r3, r2
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
	for (i = dataLength + 1; i < CAN_FRAME_LENGTH; i++) {
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3301      	adds	r3, #1
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2b07      	cmp	r3, #7
 80011c6:	d9f4      	bls.n	80011b2 <CanTp_encodeSingleFrame+0x66>
	}

	CanIf_Transmit(TxPduId, &EncodedPduInfo);
 80011c8:	4903      	ldr	r1, [pc, #12]	; (80011d8 <CanTp_encodeSingleFrame+0x8c>)
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff fd72 	bl	8000cb4 <CanIf_Transmit>
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20006140 	.word	0x20006140
 80011dc:	20006130 	.word	0x20006130

080011e0 <CanTp_encodeFirstFrame>:
void CanTp_encodeFirstFrame(uint32_t TxPduId, PduInfoType* PduInfoPtr){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
	/*** Local Variables ****/
	uint8_t Counter=0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	75fb      	strb	r3, [r7, #23]
	PduInfoTRx EncodedPduInfo ;
	/************/

	// assume that data is [0x1 0x2 0x3 0x4 0x5 0x6 0x7 0x8 0x9 0xA]
	EncodedPduInfo.Data[0] = (0x01 <<4 ) | ((PduInfoPtr->Length)>>8 & 0x0F); // First Frame Should be 10 A 0x1 0x2 0x3 0x4 0x5 0x6
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	0a1b      	lsrs	r3, r3, #8
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f043 0310 	orr.w	r3, r3, #16
 8001204:	b2db      	uxtb	r3, r3
 8001206:	723b      	strb	r3, [r7, #8]
	EncodedPduInfo.Data[1] = (PduInfoPtr->Length)& 0xFF;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	727b      	strb	r3, [r7, #9]

	// Form First Frame
	for(Counter=2;Counter<8;Counter++)
 8001214:	2302      	movs	r3, #2
 8001216:	75fb      	strb	r3, [r7, #23]
 8001218:	e00b      	b.n	8001232 <CanTp_encodeFirstFrame+0x52>
	{
		EncodedPduInfo.Data[Counter]=PduInfoPtr->Data[Counter - 2];
 800121a:	7dfb      	ldrb	r3, [r7, #23]
 800121c:	1e9a      	subs	r2, r3, #2
 800121e:	7dfb      	ldrb	r3, [r7, #23]
 8001220:	6839      	ldr	r1, [r7, #0]
 8001222:	5c8a      	ldrb	r2, [r1, r2]
 8001224:	3318      	adds	r3, #24
 8001226:	443b      	add	r3, r7
 8001228:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(Counter=2;Counter<8;Counter++)
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	3301      	adds	r3, #1
 8001230:	75fb      	strb	r3, [r7, #23]
 8001232:	7dfb      	ldrb	r3, [r7, #23]
 8001234:	2b07      	cmp	r3, #7
 8001236:	d9f0      	bls.n	800121a <CanTp_encodeFirstFrame+0x3a>
	}

	/** Call CanIF_Transmit Function**/
	numberOfRemainingBytesToSend = (PduInfoPtr->Length - 6);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	3b06      	subs	r3, #6
 8001242:	4a06      	ldr	r2, [pc, #24]	; (800125c <CanTp_encodeFirstFrame+0x7c>)
 8001244:	6013      	str	r3, [r2, #0]
	CanIf_Transmit(TxPduId, &EncodedPduInfo);
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	4619      	mov	r1, r3
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff fd31 	bl	8000cb4 <CanIf_Transmit>
}
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20006130 	.word	0x20006130

08001260 <CanTp_encodeConsecutiveFrame>:
void CanTp_encodeConsecutiveFrame(uint32_t TxPduId, PduInfoType* PduInfoPtr){
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	73fb      	strb	r3, [r7, #15]
	EncodedPduInfo.Length = numberOfRemainingBytesToSend > 7 ? 7 : numberOfRemainingBytesToSend;
 800126e:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <CanTp_encodeConsecutiveFrame+0xb8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b07      	cmp	r3, #7
 8001274:	d802      	bhi.n	800127c <CanTp_encodeConsecutiveFrame+0x1c>
 8001276:	4b28      	ldr	r3, [pc, #160]	; (8001318 <CanTp_encodeConsecutiveFrame+0xb8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	e000      	b.n	800127e <CanTp_encodeConsecutiveFrame+0x1e>
 800127c:	2307      	movs	r3, #7
 800127e:	4a27      	ldr	r2, [pc, #156]	; (800131c <CanTp_encodeConsecutiveFrame+0xbc>)
 8001280:	6093      	str	r3, [r2, #8]
	EncodedPduInfo.Data[0]=(0x02 << 4) | ConsecSN;
 8001282:	4b27      	ldr	r3, [pc, #156]	; (8001320 <CanTp_encodeConsecutiveFrame+0xc0>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f043 0320 	orr.w	r3, r3, #32
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b23      	ldr	r3, [pc, #140]	; (800131c <CanTp_encodeConsecutiveFrame+0xbc>)
 8001290:	701a      	strb	r2, [r3, #0]

	currentOffset = startOffset + ConsecSN * 7;
 8001292:	4b23      	ldr	r3, [pc, #140]	; (8001320 <CanTp_encodeConsecutiveFrame+0xc0>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	4613      	mov	r3, r2
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	1a9a      	subs	r2, r3, r2
 80012a0:	4b20      	ldr	r3, [pc, #128]	; (8001324 <CanTp_encodeConsecutiveFrame+0xc4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4413      	add	r3, r2
 80012a6:	4a20      	ldr	r2, [pc, #128]	; (8001328 <CanTp_encodeConsecutiveFrame+0xc8>)
 80012a8:	6013      	str	r3, [r2, #0]

	for(i=0 ; i < EncodedPduInfo.Length ; i++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	73fb      	strb	r3, [r7, #15]
 80012ae:	e00c      	b.n	80012ca <CanTp_encodeConsecutiveFrame+0x6a>
	{
		EncodedPduInfo.Data[i+1] = PduInfoPtr->Data[i + currentOffset];
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <CanTp_encodeConsecutiveFrame+0xc8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	441a      	add	r2, r3
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	3301      	adds	r3, #1
 80012bc:	6839      	ldr	r1, [r7, #0]
 80012be:	5c89      	ldrb	r1, [r1, r2]
 80012c0:	4a16      	ldr	r2, [pc, #88]	; (800131c <CanTp_encodeConsecutiveFrame+0xbc>)
 80012c2:	54d1      	strb	r1, [r2, r3]
	for(i=0 ; i < EncodedPduInfo.Length ; i++)
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	3301      	adds	r3, #1
 80012c8:	73fb      	strb	r3, [r7, #15]
 80012ca:	7bfa      	ldrb	r2, [r7, #15]
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <CanTp_encodeConsecutiveFrame+0xbc>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d3ed      	bcc.n	80012b0 <CanTp_encodeConsecutiveFrame+0x50>
	}

	ConsecSN++;
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <CanTp_encodeConsecutiveFrame+0xc0>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	3301      	adds	r3, #1
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <CanTp_encodeConsecutiveFrame+0xc0>)
 80012e0:	701a      	strb	r2, [r3, #0]
	if(ConsecSN > 0xF){
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <CanTp_encodeConsecutiveFrame+0xc0>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b0f      	cmp	r3, #15
 80012ea:	d906      	bls.n	80012fa <CanTp_encodeConsecutiveFrame+0x9a>
		startOffset = currentOffset;
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <CanTp_encodeConsecutiveFrame+0xc8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0c      	ldr	r2, [pc, #48]	; (8001324 <CanTp_encodeConsecutiveFrame+0xc4>)
 80012f2:	6013      	str	r3, [r2, #0]
		ConsecSN = 0;
 80012f4:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <CanTp_encodeConsecutiveFrame+0xc0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
	}
	numberOfRemainingBytesToSend -= EncodedPduInfo.Length;
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <CanTp_encodeConsecutiveFrame+0xb8>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <CanTp_encodeConsecutiveFrame+0xbc>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	4a04      	ldr	r2, [pc, #16]	; (8001318 <CanTp_encodeConsecutiveFrame+0xb8>)
 8001306:	6013      	str	r3, [r2, #0]
	CanIf_Transmit(TxPduId, &EncodedPduInfo);
 8001308:	4904      	ldr	r1, [pc, #16]	; (800131c <CanTp_encodeConsecutiveFrame+0xbc>)
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fcd2 	bl	8000cb4 <CanIf_Transmit>
}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20006130 	.word	0x20006130
 800131c:	20006140 	.word	0x20006140
 8001320:	20007164 	.word	0x20007164
 8001324:	20007168 	.word	0x20007168
 8001328:	20000004 	.word	0x20000004

0800132c <CanTp_encodeFlowControlFrame>:
void CanTp_encodeFlowControlFrame(uint32_t TxPduId, PduInfoType* PduInfoPtr){
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
	// Initialize the flow control frame parameters
	// Byte 0: Flow Status (0x30 for continue to send, 0x31 for wait, 0x32 for overflow/abort)
	// Byte 1: Block Size (0 for continuous sending without waiting for flow control)
	// Byte 2: Separation Time (ST, in milliseconds, 0-127, 241-249 are valid values)

	EncodedPduInfo.Data[0] = 0x30;  // Flow Status: Continue to send (CTS)
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <CanTp_encodeFlowControlFrame+0x50>)
 8001338:	2230      	movs	r2, #48	; 0x30
 800133a:	701a      	strb	r2, [r3, #0]
	EncodedPduInfo.Data[1] = availableBuffers;  // Block Size: 0 (no blocks)
 800133c:	4b10      	ldr	r3, [pc, #64]	; (8001380 <CanTp_encodeFlowControlFrame+0x54>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <CanTp_encodeFlowControlFrame+0x50>)
 8001344:	705a      	strb	r2, [r3, #1]
	EncodedPduInfo.Data[2] = 0x00;  // Separation Time: 0 ms (no delay)
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <CanTp_encodeFlowControlFrame+0x50>)
 8001348:	2200      	movs	r2, #0
 800134a:	709a      	strb	r2, [r3, #2]

	// The remaining bytes can be set to 0
	for (uint8_t i = 3; i < 8; i++) {
 800134c:	2303      	movs	r3, #3
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	e006      	b.n	8001360 <CanTp_encodeFlowControlFrame+0x34>
		EncodedPduInfo.Data[i] = 0x00;
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	4a09      	ldr	r2, [pc, #36]	; (800137c <CanTp_encodeFlowControlFrame+0x50>)
 8001356:	2100      	movs	r1, #0
 8001358:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 3; i < 8; i++) {
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	3301      	adds	r3, #1
 800135e:	73fb      	strb	r3, [r7, #15]
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	2b07      	cmp	r3, #7
 8001364:	d9f5      	bls.n	8001352 <CanTp_encodeFlowControlFrame+0x26>
	}

	// Set the length of the flow control frame
	//    EncodedPduInfo.Length = 3;
	ConsecSN = 1;
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <CanTp_encodeFlowControlFrame+0x58>)
 8001368:	2201      	movs	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]
	// Use CanIf_Transmit to send the flow control frame
	CanIf_Transmit(TxPduId, &EncodedPduInfo);
 800136c:	4903      	ldr	r1, [pc, #12]	; (800137c <CanTp_encodeFlowControlFrame+0x50>)
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fca0 	bl	8000cb4 <CanIf_Transmit>
}
 8001374:	bf00      	nop
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20006140 	.word	0x20006140
 8001380:	20000000 	.word	0x20000000
 8001384:	20007164 	.word	0x20007164

08001388 <CanTp_decodeSingleFrame>:

void CanTp_decodeSingleFrame(uint32_t RxPduId, PduInfoTRx* PduInfoPtr){
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
	// Extract the data length from the first byte of the CAN frame
	uint32_t dataLength = PduInfoPtr->Data[0] & 0x0F;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	60bb      	str	r3, [r7, #8]
	numberOfRemainingBytesToReceive = dataLength;
 800139c:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <CanTp_decodeSingleFrame+0x60>)
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	6013      	str	r3, [r2, #0]
	CompletePduInfo.Length = numberOfRemainingBytesToReceive;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <CanTp_decodeSingleFrame+0x60>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a11      	ldr	r2, [pc, #68]	; (80013ec <CanTp_decodeSingleFrame+0x64>)
 80013a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013ac:	6013      	str	r3, [r2, #0]
	int i;
	// Allocate memory for the data in the PduInfoTRx struct
	for ( i = 0; i < dataLength; i++) {
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	e00b      	b.n	80013cc <CanTp_decodeSingleFrame+0x44>
		DecodedPduInfo.Data[i] = PduInfoPtr->Data[i+1];
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	3301      	adds	r3, #1
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	5cd1      	ldrb	r1, [r2, r3]
 80013bc:	4a0c      	ldr	r2, [pc, #48]	; (80013f0 <CanTp_decodeSingleFrame+0x68>)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4413      	add	r3, r2
 80013c2:	460a      	mov	r2, r1
 80013c4:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < dataLength; i++) {
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	3301      	adds	r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d8ef      	bhi.n	80013b4 <CanTp_decodeSingleFrame+0x2c>
	//		DecodedPduInfo.Length = 0;
	//		return DecodedPduInfo;
	//	}

	// Set the length in the PduInfoType struct
	DecodedPduInfo.Length = dataLength;
 80013d4:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <CanTp_decodeSingleFrame+0x68>)
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	6093      	str	r3, [r2, #8]

	CanTp_ConnectData(&DecodedPduInfo);
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <CanTp_decodeSingleFrame+0x68>)
 80013dc:	f000 f8c4 	bl	8001568 <CanTp_ConnectData>
}
 80013e0:	bf00      	nop
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20006134 	.word	0x20006134
 80013ec:	20006158 	.word	0x20006158
 80013f0:	2000614c 	.word	0x2000614c

080013f4 <CanTp_decodeFirstFrame>:
void CanTp_decodeFirstFrame(uint32_t RxPduId, PduInfoTRx* PduInfoPtr){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
	numberOfRemainingBytesToReceive = ((PduInfoPtr->Data[0] & 0x0F) << 8) | PduInfoPtr->Data[1];
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	7852      	ldrb	r2, [r2, #1]
 800140c:	4313      	orrs	r3, r2
 800140e:	461a      	mov	r2, r3
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <CanTp_decodeFirstFrame+0x64>)
 8001412:	601a      	str	r2, [r3, #0]
	CompletePduInfo.Length = numberOfRemainingBytesToReceive;
 8001414:	4b10      	ldr	r3, [pc, #64]	; (8001458 <CanTp_decodeFirstFrame+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a10      	ldr	r2, [pc, #64]	; (800145c <CanTp_decodeFirstFrame+0x68>)
 800141a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800141e:	6013      	str	r3, [r2, #0]
	DecodedPduInfo.Length=6;
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <CanTp_decodeFirstFrame+0x6c>)
 8001422:	2206      	movs	r2, #6
 8001424:	609a      	str	r2, [r3, #8]
	uint8_t Counter=0;
 8001426:	2300      	movs	r3, #0
 8001428:	73fb      	strb	r3, [r7, #15]

	for(Counter=0;Counter<8;Counter++)
 800142a:	2300      	movs	r3, #0
 800142c:	73fb      	strb	r3, [r7, #15]
 800142e:	e009      	b.n	8001444 <CanTp_decodeFirstFrame+0x50>
	{
		DecodedPduInfo.Data[Counter]=PduInfoPtr->Data[Counter+2];
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	1c9a      	adds	r2, r3, #2
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	6839      	ldr	r1, [r7, #0]
 8001438:	5c89      	ldrb	r1, [r1, r2]
 800143a:	4a09      	ldr	r2, [pc, #36]	; (8001460 <CanTp_decodeFirstFrame+0x6c>)
 800143c:	54d1      	strb	r1, [r2, r3]
	for(Counter=0;Counter<8;Counter++)
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	3301      	adds	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	2b07      	cmp	r3, #7
 8001448:	d9f2      	bls.n	8001430 <CanTp_decodeFirstFrame+0x3c>
	}
	CanTp_ConnectData(&DecodedPduInfo);
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <CanTp_decodeFirstFrame+0x6c>)
 800144c:	f000 f88c 	bl	8001568 <CanTp_ConnectData>
}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20006134 	.word	0x20006134
 800145c:	20006158 	.word	0x20006158
 8001460:	2000614c 	.word	0x2000614c

08001464 <CanTp_decodeConsecutiveFrame>:
void CanTp_decodeConsecutiveFrame(uint32_t RxPduId, PduInfoTRx* PduInfoPtr){
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	73fb      	strb	r3, [r7, #15]
	DecodedPduInfo.Length = numberOfRemainingBytesToReceive > 7 ? 7 : numberOfRemainingBytesToReceive;
 8001472:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <CanTp_decodeConsecutiveFrame+0x84>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b07      	cmp	r3, #7
 8001478:	d802      	bhi.n	8001480 <CanTp_decodeConsecutiveFrame+0x1c>
 800147a:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <CanTp_decodeConsecutiveFrame+0x84>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	e000      	b.n	8001482 <CanTp_decodeConsecutiveFrame+0x1e>
 8001480:	2307      	movs	r3, #7
 8001482:	4a1a      	ldr	r2, [pc, #104]	; (80014ec <CanTp_decodeConsecutiveFrame+0x88>)
 8001484:	6093      	str	r3, [r2, #8]
	if(ConsecSN == (PduInfoPtr->Data[0] & 0x0F)){
 8001486:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <CanTp_decodeConsecutiveFrame+0x8c>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	461a      	mov	r2, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	429a      	cmp	r2, r3
 8001498:	d122      	bne.n	80014e0 <CanTp_decodeConsecutiveFrame+0x7c>
		for(i=0 ; i < DecodedPduInfo.Length ; i++)
 800149a:	2300      	movs	r3, #0
 800149c:	73fb      	strb	r3, [r7, #15]
 800149e:	e009      	b.n	80014b4 <CanTp_decodeConsecutiveFrame+0x50>
		{
			DecodedPduInfo.Data[i] = PduInfoPtr->Data[i+1];
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	1c5a      	adds	r2, r3, #1
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	6839      	ldr	r1, [r7, #0]
 80014a8:	5c89      	ldrb	r1, [r1, r2]
 80014aa:	4a10      	ldr	r2, [pc, #64]	; (80014ec <CanTp_decodeConsecutiveFrame+0x88>)
 80014ac:	54d1      	strb	r1, [r2, r3]
		for(i=0 ; i < DecodedPduInfo.Length ; i++)
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	3301      	adds	r3, #1
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <CanTp_decodeConsecutiveFrame+0x88>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d3f0      	bcc.n	80014a0 <CanTp_decodeConsecutiveFrame+0x3c>
		}
		ConsecSN = ConsecSN + 1 > 0xF ? 0 : ConsecSN + 1;
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <CanTp_decodeConsecutiveFrame+0x8c>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b0e      	cmp	r3, #14
 80014c6:	d805      	bhi.n	80014d4 <CanTp_decodeConsecutiveFrame+0x70>
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <CanTp_decodeConsecutiveFrame+0x8c>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	3301      	adds	r3, #1
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	e000      	b.n	80014d6 <CanTp_decodeConsecutiveFrame+0x72>
 80014d4:	2300      	movs	r3, #0
 80014d6:	4a06      	ldr	r2, [pc, #24]	; (80014f0 <CanTp_decodeConsecutiveFrame+0x8c>)
 80014d8:	7013      	strb	r3, [r2, #0]
		CanTp_ConnectData(&DecodedPduInfo);
 80014da:	4804      	ldr	r0, [pc, #16]	; (80014ec <CanTp_decodeConsecutiveFrame+0x88>)
 80014dc:	f000 f844 	bl	8001568 <CanTp_ConnectData>
	}
}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20006134 	.word	0x20006134
 80014ec:	2000614c 	.word	0x2000614c
 80014f0:	20007164 	.word	0x20007164

080014f4 <CanTp_decodeFlowControlFrame>:
void CanTp_decodeFlowControlFrame(uint32_t RxPduId, PduInfoTRx* PduInfoPtr){
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
	// Extract the Flow Status, Block Size, and Separation Time from the PDU
	uint8_t flowStatus = PduInfoPtr->Data[0];
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	73fb      	strb	r3, [r7, #15]
	uint8_t blockSize = PduInfoPtr->Data[1];
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	785b      	ldrb	r3, [r3, #1]
 8001508:	73bb      	strb	r3, [r7, #14]
	//	uint8_t separationTime = PduInfoPtr->Data[2];

	// Update the number of consecutive frames to send based on the Block Size
	//	if (blockSize == 0) {
	// Continuous sending without waiting for further flow control
	numberOfConsecutiveFramesToSend = blockSize;
 800150a:	7bbb      	ldrb	r3, [r7, #14]
 800150c:	4a11      	ldr	r2, [pc, #68]	; (8001554 <CanTp_decodeFlowControlFrame+0x60>)
 800150e:	6013      	str	r3, [r2, #0]
	//	} else {
	//		numberOfConsecutiveFramesToSend = blockSize;
	//	}

	// Handle different flow statuses
	switch (flowStatus) {
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	2b32      	cmp	r3, #50	; 0x32
 8001514:	d015      	beq.n	8001542 <CanTp_decodeFlowControlFrame+0x4e>
 8001516:	2b32      	cmp	r3, #50	; 0x32
 8001518:	dc15      	bgt.n	8001546 <CanTp_decodeFlowControlFrame+0x52>
 800151a:	2b30      	cmp	r3, #48	; 0x30
 800151c:	d002      	beq.n	8001524 <CanTp_decodeFlowControlFrame+0x30>
 800151e:	2b31      	cmp	r3, #49	; 0x31
 8001520:	d00b      	beq.n	800153a <CanTp_decodeFlowControlFrame+0x46>
		break;

	default:
		// Invalid flow status, handle as needed (e.g., set an error state)
		//		expectedFrameState = Any_State;
		break;
 8001522:	e010      	b.n	8001546 <CanTp_decodeFlowControlFrame+0x52>
		expectedFrameState = Consecutive_Frame_State;
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <CanTp_decodeFlowControlFrame+0x64>)
 8001526:	2201      	movs	r2, #1
 8001528:	701a      	strb	r2, [r3, #0]
		startOffset = currentOffset;
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <CanTp_decodeFlowControlFrame+0x68>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a0c      	ldr	r2, [pc, #48]	; (8001560 <CanTp_decodeFlowControlFrame+0x6c>)
 8001530:	6013      	str	r3, [r2, #0]
		ConsecSN = 1;
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <CanTp_decodeFlowControlFrame+0x70>)
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
		break;
 8001538:	e006      	b.n	8001548 <CanTp_decodeFlowControlFrame+0x54>
		expectedFrameState = FlowControl_Frame_State;
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <CanTp_decodeFlowControlFrame+0x64>)
 800153c:	2202      	movs	r2, #2
 800153e:	701a      	strb	r2, [r3, #0]
		break;
 8001540:	e002      	b.n	8001548 <CanTp_decodeFlowControlFrame+0x54>
		break;
 8001542:	bf00      	nop
 8001544:	e000      	b.n	8001548 <CanTp_decodeFlowControlFrame+0x54>
		break;
 8001546:	bf00      	nop
	}

}
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	20006128 	.word	0x20006128
 8001558:	2000613c 	.word	0x2000613c
 800155c:	20000004 	.word	0x20000004
 8001560:	20007168 	.word	0x20007168
 8001564:	20007164 	.word	0x20007164

08001568 <CanTp_ConnectData>:

void CanTp_ConnectData(PduInfoTRx* PduInfoPtr){
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	//use CompletePduInfo struct to connect the data received from PduInfoTRx
	uint16_t tempCurrentIndex = currentIndex;
 8001570:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <CanTp_ConnectData+0x68>)
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	81fb      	strh	r3, [r7, #14]
	while(currentIndex < PduInfoPtr->Length + tempCurrentIndex){
 8001576:	e014      	b.n	80015a2 <CanTp_ConnectData+0x3a>
		CompletePduInfo.Data[currentIndex] = PduInfoPtr->Data[currentIndex - tempCurrentIndex];
 8001578:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <CanTp_ConnectData+0x68>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	b29b      	uxth	r3, r3
 800157e:	461a      	mov	r2, r3
 8001580:	89fb      	ldrh	r3, [r7, #14]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <CanTp_ConnectData+0x68>)
 8001586:	8812      	ldrh	r2, [r2, #0]
 8001588:	b292      	uxth	r2, r2
 800158a:	4611      	mov	r1, r2
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	5cd2      	ldrb	r2, [r2, r3]
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <CanTp_ConnectData+0x6c>)
 8001592:	545a      	strb	r2, [r3, r1]
		currentIndex++;
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <CanTp_ConnectData+0x68>)
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	b29b      	uxth	r3, r3
 800159a:	3301      	adds	r3, #1
 800159c:	b29a      	uxth	r2, r3
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <CanTp_ConnectData+0x68>)
 80015a0:	801a      	strh	r2, [r3, #0]
	while(currentIndex < PduInfoPtr->Length + tempCurrentIndex){
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <CanTp_ConnectData+0x68>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	4619      	mov	r1, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	89fb      	ldrh	r3, [r7, #14]
 80015b0:	4413      	add	r3, r2
 80015b2:	4299      	cmp	r1, r3
 80015b4:	d3e0      	bcc.n	8001578 <CanTp_ConnectData+0x10>
	}
	numberOfRemainingBytesToReceive -= PduInfoPtr->Length;
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <CanTp_ConnectData+0x70>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <CanTp_ConnectData+0x70>)
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	20007166 	.word	0x20007166
 80015d4:	20006158 	.word	0x20006158
 80015d8:	20006134 	.word	0x20006134

080015dc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80015e2:	4b26      	ldr	r3, [pc, #152]	; (800167c <MX_CAN1_Init+0xa0>)
 80015e4:	4a26      	ldr	r2, [pc, #152]	; (8001680 <MX_CAN1_Init+0xa4>)
 80015e6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80015e8:	4b24      	ldr	r3, [pc, #144]	; (800167c <MX_CAN1_Init+0xa0>)
 80015ea:	2210      	movs	r2, #16
 80015ec:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80015ee:	4b23      	ldr	r3, [pc, #140]	; (800167c <MX_CAN1_Init+0xa0>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80015f4:	4b21      	ldr	r3, [pc, #132]	; (800167c <MX_CAN1_Init+0xa0>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <MX_CAN1_Init+0xa0>)
 80015fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001600:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001602:	4b1e      	ldr	r3, [pc, #120]	; (800167c <MX_CAN1_Init+0xa0>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001608:	4b1c      	ldr	r3, [pc, #112]	; (800167c <MX_CAN1_Init+0xa0>)
 800160a:	2200      	movs	r2, #0
 800160c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800160e:	4b1b      	ldr	r3, [pc, #108]	; (800167c <MX_CAN1_Init+0xa0>)
 8001610:	2200      	movs	r2, #0
 8001612:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <MX_CAN1_Init+0xa0>)
 8001616:	2200      	movs	r2, #0
 8001618:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <MX_CAN1_Init+0xa0>)
 800161c:	2200      	movs	r2, #0
 800161e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001620:	4b16      	ldr	r3, [pc, #88]	; (800167c <MX_CAN1_Init+0xa0>)
 8001622:	2200      	movs	r2, #0
 8001624:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <MX_CAN1_Init+0xa0>)
 8001628:	2200      	movs	r2, #0
 800162a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800162c:	4813      	ldr	r0, [pc, #76]	; (800167c <MX_CAN1_Init+0xa0>)
 800162e:	f000 ff6b 	bl	8002508 <HAL_CAN_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001638:	f000 fcee 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  // Configure CAN filter to accept all messages
  	CAN_FilterTypeDef sFilterConfig;
  	sFilterConfig.FilterBank = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001640:	2300      	movs	r3, #0
 8001642:	61bb      	str	r3, [r7, #24]
  	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001644:	2301      	movs	r3, #1
 8001646:	61fb      	str	r3, [r7, #28]
  	sFilterConfig.FilterIdHigh = 0x0000;
 8001648:	2300      	movs	r3, #0
 800164a:	603b      	str	r3, [r7, #0]
  	sFilterConfig.FilterIdLow = 0x0000;
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
  	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
  	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001658:	2300      	movs	r3, #0
 800165a:	613b      	str	r3, [r7, #16]
  	sFilterConfig.FilterActivation = ENABLE;
 800165c:	2301      	movs	r3, #1
 800165e:	623b      	str	r3, [r7, #32]
  	sFilterConfig.SlaveStartFilterBank = 14; // Filter bank 14 for F303RE
 8001660:	230e      	movs	r3, #14
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
  	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001664:	463b      	mov	r3, r7
 8001666:	4619      	mov	r1, r3
 8001668:	4804      	ldr	r0, [pc, #16]	; (800167c <MX_CAN1_Init+0xa0>)
 800166a:	f001 f849 	bl	8002700 <HAL_CAN_ConfigFilter>
  		// Filter configuration error handling
  	}

  	// Start the CAN peripheral
  	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800166e:	4803      	ldr	r0, [pc, #12]	; (800167c <MX_CAN1_Init+0xa0>)
 8001670:	f001 f926 	bl	80028c0 <HAL_CAN_Start>
  		// Start error handling
  	}

  /* USER CODE END CAN1_Init 2 */

}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	; 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20007178 	.word	0x20007178
 8001680:	40006400 	.word	0x40006400

08001684 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a21      	ldr	r2, [pc, #132]	; (8001728 <HAL_CAN_MspInit+0xa4>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d13c      	bne.n	8001720 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	4b20      	ldr	r3, [pc, #128]	; (800172c <HAL_CAN_MspInit+0xa8>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a1f      	ldr	r2, [pc, #124]	; (800172c <HAL_CAN_MspInit+0xa8>)
 80016b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
 80016b6:	4b1d      	ldr	r3, [pc, #116]	; (800172c <HAL_CAN_MspInit+0xa8>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <HAL_CAN_MspInit+0xa8>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a18      	ldr	r2, [pc, #96]	; (800172c <HAL_CAN_MspInit+0xa8>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b16      	ldr	r3, [pc, #88]	; (800172c <HAL_CAN_MspInit+0xa8>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ec:	2303      	movs	r3, #3
 80016ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016f0:	2309      	movs	r3, #9
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4619      	mov	r1, r3
 80016fa:	480d      	ldr	r0, [pc, #52]	; (8001730 <HAL_CAN_MspInit+0xac>)
 80016fc:	f001 ff10 	bl	8003520 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	2105      	movs	r1, #5
 8001704:	2014      	movs	r0, #20
 8001706:	f001 fe4f 	bl	80033a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800170a:	2014      	movs	r0, #20
 800170c:	f001 fe68 	bl	80033e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2105      	movs	r1, #5
 8001714:	2015      	movs	r0, #21
 8001716:	f001 fe47 	bl	80033a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800171a:	2015      	movs	r0, #21
 800171c:	f001 fe60 	bl	80033e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001720:	bf00      	nop
 8001722:	3728      	adds	r7, #40	; 0x28
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40006400 	.word	0x40006400
 800172c:	40023800 	.word	0x40023800
 8001730:	40020000 	.word	0x40020000

08001734 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4a07      	ldr	r2, [pc, #28]	; (8001760 <vApplicationGetIdleTaskMemory+0x2c>)
 8001744:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	4a06      	ldr	r2, [pc, #24]	; (8001764 <vApplicationGetIdleTaskMemory+0x30>)
 800174a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2280      	movs	r2, #128	; 0x80
 8001750:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	200071a4 	.word	0x200071a4
 8001764:	20007244 	.word	0x20007244

08001768 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001768:	b5b0      	push	{r4, r5, r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <MX_FREERTOS_Init+0x30>)
 8001770:	1d3c      	adds	r4, r7, #4
 8001772:	461d      	mov	r5, r3
 8001774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001778:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800177c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f004 faec 	bl	8005d62 <osThreadCreate>
 800178a:	4603      	mov	r3, r0
 800178c:	4a03      	ldr	r2, [pc, #12]	; (800179c <MX_FREERTOS_Init+0x34>)
 800178e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001790:	bf00      	nop
 8001792:	3720      	adds	r7, #32
 8001794:	46bd      	mov	sp, r7
 8001796:	bdb0      	pop	{r4, r5, r7, pc}
 8001798:	08007dd8 	.word	0x08007dd8
 800179c:	200071a0 	.word	0x200071a0

080017a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80017a8:	2001      	movs	r0, #1
 80017aa:	f004 fb26 	bl	8005dfa <osDelay>
 80017ae:	e7fb      	b.n	80017a8 <StartDefaultTask+0x8>

080017b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
 80017c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <MX_GPIO_Init+0xd0>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a2c      	ldr	r2, [pc, #176]	; (8001880 <MX_GPIO_Init+0xd0>)
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <MX_GPIO_Init+0xd0>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b26      	ldr	r3, [pc, #152]	; (8001880 <MX_GPIO_Init+0xd0>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a25      	ldr	r2, [pc, #148]	; (8001880 <MX_GPIO_Init+0xd0>)
 80017ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b23      	ldr	r3, [pc, #140]	; (8001880 <MX_GPIO_Init+0xd0>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <MX_GPIO_Init+0xd0>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a1e      	ldr	r2, [pc, #120]	; (8001880 <MX_GPIO_Init+0xd0>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <MX_GPIO_Init+0xd0>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <MX_GPIO_Init+0xd0>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a17      	ldr	r2, [pc, #92]	; (8001880 <MX_GPIO_Init+0xd0>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <MX_GPIO_Init+0xd0>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	2120      	movs	r1, #32
 800183a:	4812      	ldr	r0, [pc, #72]	; (8001884 <MX_GPIO_Init+0xd4>)
 800183c:	f002 f804 	bl	8003848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001846:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800184a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	4619      	mov	r1, r3
 8001856:	480c      	ldr	r0, [pc, #48]	; (8001888 <MX_GPIO_Init+0xd8>)
 8001858:	f001 fe62 	bl	8003520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800185c:	2320      	movs	r3, #32
 800185e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001860:	2301      	movs	r3, #1
 8001862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4619      	mov	r1, r3
 8001872:	4804      	ldr	r0, [pc, #16]	; (8001884 <MX_GPIO_Init+0xd4>)
 8001874:	f001 fe54 	bl	8003520 <HAL_GPIO_Init>

}
 8001878:	bf00      	nop
 800187a:	3728      	adds	r7, #40	; 0x28
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40023800 	.word	0x40023800
 8001884:	40020000 	.word	0x40020000
 8001888:	40020800 	.word	0x40020800

0800188c <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

#if CAN_MODE == CAN_TX
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	; 0x28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

	//O --> Write Oil Temperature.
	//P --> Write Oil Pressure.

	//Display Choosen Letter
	HAL_UART_Transmit(&huart2 ,&Menu_Letter , 1, HAL_MAX_DELAY);
 8001894:	f04f 33ff 	mov.w	r3, #4294967295
 8001898:	2201      	movs	r2, #1
 800189a:	4949      	ldr	r1, [pc, #292]	; (80019c0 <HAL_UART_RxCpltCallback+0x134>)
 800189c:	4849      	ldr	r0, [pc, #292]	; (80019c4 <HAL_UART_RxCpltCallback+0x138>)
 800189e:	f003 f974 	bl	8004b8a <HAL_UART_Transmit>

	//Switch on User Menus
	switch(Menu_Letter)
 80018a2:	4b47      	ldr	r3, [pc, #284]	; (80019c0 <HAL_UART_RxCpltCallback+0x134>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	3b41      	subs	r3, #65	; 0x41
 80018a8:	2b0f      	cmp	r3, #15
 80018aa:	d87b      	bhi.n	80019a4 <HAL_UART_RxCpltCallback+0x118>
 80018ac:	a201      	add	r2, pc, #4	; (adr r2, 80018b4 <HAL_UART_RxCpltCallback+0x28>)
 80018ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b2:	bf00      	nop
 80018b4:	080018f5 	.word	0x080018f5
 80018b8:	080018fd 	.word	0x080018fd
 80018bc:	08001905 	.word	0x08001905
 80018c0:	0800190d 	.word	0x0800190d
 80018c4:	08001915 	.word	0x08001915
 80018c8:	0800191b 	.word	0x0800191b
 80018cc:	08001921 	.word	0x08001921
 80018d0:	08001927 	.word	0x08001927
 80018d4:	08001937 	.word	0x08001937
 80018d8:	08001975 	.word	0x08001975
 80018dc:	08001983 	.word	0x08001983
 80018e0:	080019a5 	.word	0x080019a5
 80018e4:	0800199d 	.word	0x0800199d
 80018e8:	080019a5 	.word	0x080019a5
 80018ec:	08001947 	.word	0x08001947
 80018f0:	0800195f 	.word	0x0800195f
	{
	case 'A':
		Menu = Control_Session_Menu;
 80018f4:	4b34      	ldr	r3, [pc, #208]	; (80019c8 <HAL_UART_RxCpltCallback+0x13c>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
		break;
 80018fa:	e056      	b.n	80019aa <HAL_UART_RxCpltCallback+0x11e>

	case 'B':
		Menu = Read_Data_Menu;
 80018fc:	4b32      	ldr	r3, [pc, #200]	; (80019c8 <HAL_UART_RxCpltCallback+0x13c>)
 80018fe:	2202      	movs	r2, #2
 8001900:	701a      	strb	r2, [r3, #0]
		break;
 8001902:	e052      	b.n	80019aa <HAL_UART_RxCpltCallback+0x11e>

	case 'C':
		Menu = Write_Data_Menu;
 8001904:	4b30      	ldr	r3, [pc, #192]	; (80019c8 <HAL_UART_RxCpltCallback+0x13c>)
 8001906:	2203      	movs	r2, #3
 8001908:	701a      	strb	r2, [r3, #0]
		break;
 800190a:	e04e      	b.n	80019aa <HAL_UART_RxCpltCallback+0x11e>

	case 'D':
		Menu = Security_Access_Menu;
 800190c:	4b2e      	ldr	r3, [pc, #184]	; (80019c8 <HAL_UART_RxCpltCallback+0x13c>)
 800190e:	2204      	movs	r2, #4
 8001910:	701a      	strb	r2, [r3, #0]
		break;
 8001912:	e04a      	b.n	80019aa <HAL_UART_RxCpltCallback+0x11e>

	case 'E':
		//Tester Presenter Function
		UDS_Tester_Presenter_Client();
 8001914:	f7fe fe52 	bl	80005bc <UDS_Tester_Presenter_Client>
		break;
 8001918:	e047      	b.n	80019aa <HAL_UART_RxCpltCallback+0x11e>
		//Glgl.Data[0] = 0x7F;
		//Glgl.Data[1] = 0xF1;
		//Glgl.Data[2] = 0x3D;
		//Glgl.Length = 3;
		//UDS_Client_Callback(&Glgl);
		UDS_Control_Session_Default();
 800191a:	f7fe fee7 	bl	80006ec <UDS_Control_Session_Default>
		break;
 800191e:	e044      	b.n	80019aa <HAL_UART_RxCpltCallback+0x11e>

	case 'G':
		UDS_Control_Session_Extended();
 8001920:	f7fe fefa 	bl	8000718 <UDS_Control_Session_Extended>
		break;
 8001924:	e041      	b.n	80019aa <HAL_UART_RxCpltCallback+0x11e>


	case 'H':
		DID Read_Oil_Temp = Oil_Temp;
 8001926:	f24f 133d 	movw	r3, #61757	; 0xf13d
 800192a:	827b      	strh	r3, [r7, #18]
		UDS_Read_Data_Client(Read_Oil_Temp);
 800192c:	8a7b      	ldrh	r3, [r7, #18]
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fe5a 	bl	80005e8 <UDS_Read_Data_Client>
		break;
 8001934:	e039      	b.n	80019aa <HAL_UART_RxCpltCallback+0x11e>


	case 'I':
		DID Read_Oil_Pressure = Oil_Pressure;
 8001936:	f24f 533d 	movw	r3, #62781	; 0xf53d
 800193a:	82bb      	strh	r3, [r7, #20]
		UDS_Read_Data_Client(Read_Oil_Pressure);
 800193c:	8abb      	ldrh	r3, [r7, #20]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fe52 	bl	80005e8 <UDS_Read_Data_Client>

		break;
 8001944:	e031      	b.n	80019aa <HAL_UART_RxCpltCallback+0x11e>


	case 'O':
		DID Write_Oil_Temp = Oil_Temp;
 8001946:	f24f 133d 	movw	r3, #61757	; 0xf13d
 800194a:	83fb      	strh	r3, [r7, #30]
		uint32_t Write_Oil_Temp_data = 0x5432;
 800194c:	f245 4332 	movw	r3, #21554	; 0x5432
 8001950:	61bb      	str	r3, [r7, #24]
		UDS_Write_Data_Client(Write_Oil_Temp, Write_Oil_Temp_data);
 8001952:	8bfb      	ldrh	r3, [r7, #30]
 8001954:	69b9      	ldr	r1, [r7, #24]
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fe76 	bl	8000648 <UDS_Write_Data_Client>
		break;
 800195c:	e025      	b.n	80019aa <HAL_UART_RxCpltCallback+0x11e>


	case 'P':
		DID Write_Oil_Pressure = Oil_Pressure;
 800195e:	f24f 533d 	movw	r3, #62781	; 0xf53d
 8001962:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint32_t Write_Oil_Pressure_data = 0x54321044;
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <HAL_UART_RxCpltCallback+0x140>)
 8001966:	623b      	str	r3, [r7, #32]
		UDS_Write_Data_Client(Write_Oil_Pressure, Write_Oil_Pressure_data);
 8001968:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800196a:	6a39      	ldr	r1, [r7, #32]
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fe6b 	bl	8000648 <UDS_Write_Data_Client>
		break;
 8001972:	e01a      	b.n	80019aa <HAL_UART_RxCpltCallback+0x11e>


	case 'J':
		Sub_Fun sub_fun_seed = Seed;
 8001974:	2301      	movs	r3, #1
 8001976:	75bb      	strb	r3, [r7, #22]
		UDS_Send_Security_Client(sub_fun_seed);
 8001978:	7dbb      	ldrb	r3, [r7, #22]
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fee2 	bl	8000744 <UDS_Send_Security_Client>
		break;
 8001980:	e013      	b.n	80019aa <HAL_UART_RxCpltCallback+0x11e>


	case 'K':
		Sub_Fun sub_fun_key = Key;
 8001982:	2302      	movs	r3, #2
 8001984:	75fb      	strb	r3, [r7, #23]
		// A Temporary example for a seed (Accessed in CallBack)
		uint8_t data[Seed_Key_Lenght] = {0x42, 0x31, 0x00, 0xD0};
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_UART_RxCpltCallback+0x144>)
 8001988:	60fb      	str	r3, [r7, #12]
		seed = data;
 800198a:	4a12      	ldr	r2, [pc, #72]	; (80019d4 <HAL_UART_RxCpltCallback+0x148>)
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	6013      	str	r3, [r2, #0]
		UDS_Send_Security_Client(sub_fun_key);
 8001992:	7dfb      	ldrb	r3, [r7, #23]
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fed5 	bl	8000744 <UDS_Send_Security_Client>
		break;
 800199a:	e006      	b.n	80019aa <HAL_UART_RxCpltCallback+0x11e>


	case 'M':
		Menu = Main_Menu;
 800199c:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_UART_RxCpltCallback+0x13c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
		break;
 80019a2:	e002      	b.n	80019aa <HAL_UART_RxCpltCallback+0x11e>


	default:
		Menu = Main_Menu;
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <HAL_UART_RxCpltCallback+0x13c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
	}

	Display_Menu();
 80019aa:	f000 f8df 	bl	8001b6c <Display_Menu>

	//Recieve Another Letter
	HAL_UART_Receive_IT(&huart2, &Menu_Letter, 1);
 80019ae:	2201      	movs	r2, #1
 80019b0:	4903      	ldr	r1, [pc, #12]	; (80019c0 <HAL_UART_RxCpltCallback+0x134>)
 80019b2:	4804      	ldr	r0, [pc, #16]	; (80019c4 <HAL_UART_RxCpltCallback+0x138>)
 80019b4:	f003 fa1d 	bl	8004df2 <HAL_UART_Receive_IT>
}
 80019b8:	bf00      	nop
 80019ba:	3728      	adds	r7, #40	; 0x28
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20007445 	.word	0x20007445
 80019c4:	200074e8 	.word	0x200074e8
 80019c8:	20007444 	.word	0x20007444
 80019cc:	54321044 	.word	0x54321044
 80019d0:	d0003142 	.word	0xd0003142
 80019d4:	200060f4 	.word	0x200060f4

080019d8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80019de:	f000 fd51 	bl	8002484 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80019e2:	f000 f855 	bl	8001a90 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80019e6:	f7ff fee3 	bl	80017b0 <MX_GPIO_Init>
	MX_CAN1_Init();
 80019ea:	f7ff fdf7 	bl	80015dc <MX_CAN1_Init>
	MX_USART2_UART_Init();
 80019ee:	f000 fca5 	bl	800233c <MX_USART2_UART_Init>
	MX_TIM6_Init();
 80019f2:	f000 fc45 	bl	8002280 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80019f6:	2102      	movs	r1, #2
 80019f8:	4818      	ldr	r0, [pc, #96]	; (8001a5c <main+0x84>)
 80019fa:	f001 f9c7 	bl	8002d8c <HAL_CAN_ActivateNotification>
#if CAN_MODE == CAN_TX
	Display_Menu();
 80019fe:	f000 f8b5 	bl	8001b6c <Display_Menu>
	HAL_UART_Receive_IT(&huart2, &Menu_Letter, 1);
 8001a02:	2201      	movs	r2, #1
 8001a04:	4916      	ldr	r1, [pc, #88]	; (8001a60 <main+0x88>)
 8001a06:	4817      	ldr	r0, [pc, #92]	; (8001a64 <main+0x8c>)
 8001a08:	f003 f9f3 	bl	8004df2 <HAL_UART_Receive_IT>
	CanTp_setCallback(UDS_Client_Callback);
 8001a0c:	4816      	ldr	r0, [pc, #88]	; (8001a68 <main+0x90>)
 8001a0e:	f7ff fb8b 	bl	8001128 <CanTp_setCallback>
	xTaskCreate(UDS_MainFunction, "UDS_RX", configMINIMAL_STACK_SIZE,NULL, 2, &xTaskHandle3) ;
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <main+0x94>)
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	2302      	movs	r3, #2
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	2280      	movs	r2, #128	; 0x80
 8001a1e:	4914      	ldr	r1, [pc, #80]	; (8001a70 <main+0x98>)
 8001a20:	4814      	ldr	r0, [pc, #80]	; (8001a74 <main+0x9c>)
 8001a22:	f004 fb0f 	bl	8006044 <xTaskCreate>
	//	stop_timer();
#endif
	//HAL_UART_Receive_IT(&huart2,(uint8_t*)&rxData, 1);


	xTaskCreate(CanIf_Receive, "CANIf_RX", configMINIMAL_STACK_SIZE,NULL, 2, &xTaskHandle1) ;
 8001a26:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <main+0xa0>)
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	2280      	movs	r2, #128	; 0x80
 8001a32:	4912      	ldr	r1, [pc, #72]	; (8001a7c <main+0xa4>)
 8001a34:	4812      	ldr	r0, [pc, #72]	; (8001a80 <main+0xa8>)
 8001a36:	f004 fb05 	bl	8006044 <xTaskCreate>
	xTaskCreate(CanTp_MainFunction, "CANTp_RX", configMINIMAL_STACK_SIZE,NULL, 3, &xTaskHandle2) ;
 8001a3a:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <main+0xac>)
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	2303      	movs	r3, #3
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	2300      	movs	r3, #0
 8001a44:	2280      	movs	r2, #128	; 0x80
 8001a46:	4910      	ldr	r1, [pc, #64]	; (8001a88 <main+0xb0>)
 8001a48:	4810      	ldr	r0, [pc, #64]	; (8001a8c <main+0xb4>)
 8001a4a:	f004 fafb 	bl	8006044 <xTaskCreate>
	CanTp_Init();
 8001a4e:	f7ff f9db 	bl	8000e08 <CanTp_Init>

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8001a52:	f7ff fe89 	bl	8001768 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8001a56:	f004 f97d 	bl	8005d54 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001a5a:	e7fe      	b.n	8001a5a <main+0x82>
 8001a5c:	20007178 	.word	0x20007178
 8001a60:	20007445 	.word	0x20007445
 8001a64:	200074e8 	.word	0x200074e8
 8001a68:	08000c51 	.word	0x08000c51
 8001a6c:	20007450 	.word	0x20007450
 8001a70:	0800802c 	.word	0x0800802c
 8001a74:	08000a79 	.word	0x08000a79
 8001a78:	20007448 	.word	0x20007448
 8001a7c:	08008034 	.word	0x08008034
 8001a80:	08000d11 	.word	0x08000d11
 8001a84:	2000744c 	.word	0x2000744c
 8001a88:	08008040 	.word	0x08008040
 8001a8c:	08000e1d 	.word	0x08000e1d

08001a90 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b094      	sub	sp, #80	; 0x50
 8001a94:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a96:	f107 031c 	add.w	r3, r7, #28
 8001a9a:	2234      	movs	r2, #52	; 0x34
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f005 fbdc 	bl	800725c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa4:	f107 0308 	add.w	r3, r7, #8
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <SystemClock_Config+0xd4>)
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	4a29      	ldr	r2, [pc, #164]	; (8001b64 <SystemClock_Config+0xd4>)
 8001abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac4:	4b27      	ldr	r3, [pc, #156]	; (8001b64 <SystemClock_Config+0xd4>)
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <SystemClock_Config+0xd8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001adc:	4a22      	ldr	r2, [pc, #136]	; (8001b68 <SystemClock_Config+0xd8>)
 8001ade:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <SystemClock_Config+0xd8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001aec:	603b      	str	r3, [r7, #0]
 8001aee:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001af0:	2302      	movs	r3, #2
 8001af2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001af4:	2301      	movs	r3, #1
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001af8:	2310      	movs	r3, #16
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001afc:	2302      	movs	r3, #2
 8001afe:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b00:	2300      	movs	r3, #0
 8001b02:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001b04:	2310      	movs	r3, #16
 8001b06:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001b08:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001b0c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b0e:	2304      	movs	r3, #4
 8001b10:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b12:	2302      	movs	r3, #2
 8001b14:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001b16:	2302      	movs	r3, #2
 8001b18:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b1a:	f107 031c 	add.w	r3, r7, #28
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f002 fa28 	bl	8003f74 <HAL_RCC_OscConfig>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8001b2a:	f000 fa75 	bl	8002018 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b2e:	230f      	movs	r3, #15
 8001b30:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b32:	2302      	movs	r3, #2
 8001b34:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b3e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b44:	f107 0308 	add.w	r3, r7, #8
 8001b48:	2102      	movs	r1, #2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f001 fe96 	bl	800387c <HAL_RCC_ClockConfig>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <SystemClock_Config+0xca>
	{
		Error_Handler();
 8001b56:	f000 fa5f 	bl	8002018 <Error_Handler>
	}
}
 8001b5a:	bf00      	nop
 8001b5c:	3750      	adds	r7, #80	; 0x50
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40007000 	.word	0x40007000

08001b6c <Display_Menu>:


#if CAN_MODE == CAN_TX

void Display_Menu(void)
{
 8001b6c:	b598      	push	{r3, r4, r7, lr}
 8001b6e:	af00      	add	r7, sp, #0

	switch(Menu)
 8001b70:	4b91      	ldr	r3, [pc, #580]	; (8001db8 <Display_Menu+0x24c>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	f200 81bd 	bhi.w	8001ef4 <Display_Menu+0x388>
 8001b7a:	a201      	add	r2, pc, #4	; (adr r2, 8001b80 <Display_Menu+0x14>)
 8001b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b80:	08001b95 	.word	0x08001b95
 8001b84:	08001c87 	.word	0x08001c87
 8001b88:	08001d1f 	.word	0x08001d1f
 8001b8c:	08001e5d 	.word	0x08001e5d
 8001b90:	08001dc5 	.word	0x08001dc5
	{
	case Main_Menu:

		//Default Session Menu
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[0], strlen((char*)Menu_Msg_Arr[0]), HAL_MAX_DELAY);    //{"\r\nHello, Main Menu.\r\n"
 8001b94:	4b89      	ldr	r3, [pc, #548]	; (8001dbc <Display_Menu+0x250>)
 8001b96:	681c      	ldr	r4, [r3, #0]
 8001b98:	4b88      	ldr	r3, [pc, #544]	; (8001dbc <Display_Menu+0x250>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fb37 	bl	8000210 <strlen>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8001baa:	4621      	mov	r1, r4
 8001bac:	4884      	ldr	r0, [pc, #528]	; (8001dc0 <Display_Menu+0x254>)
 8001bae:	f002 ffec 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[1], strlen((char*)Menu_Msg_Arr[1]), HAL_MAX_DELAY);    //"\r\n please Choose Your Service.\r\n",
 8001bb2:	4b82      	ldr	r3, [pc, #520]	; (8001dbc <Display_Menu+0x250>)
 8001bb4:	685c      	ldr	r4, [r3, #4]
 8001bb6:	4b81      	ldr	r3, [pc, #516]	; (8001dbc <Display_Menu+0x250>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fb28 	bl	8000210 <strlen>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc8:	4621      	mov	r1, r4
 8001bca:	487d      	ldr	r0, [pc, #500]	; (8001dc0 <Display_Menu+0x254>)
 8001bcc:	f002 ffdd 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[2], strlen((char*)Menu_Msg_Arr[2]), HAL_MAX_DELAY);    //"\r\nA --> Control Session.\r\n",
 8001bd0:	4b7a      	ldr	r3, [pc, #488]	; (8001dbc <Display_Menu+0x250>)
 8001bd2:	689c      	ldr	r4, [r3, #8]
 8001bd4:	4b79      	ldr	r3, [pc, #484]	; (8001dbc <Display_Menu+0x250>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fb19 	bl	8000210 <strlen>
 8001bde:	4603      	mov	r3, r0
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
 8001be6:	4621      	mov	r1, r4
 8001be8:	4875      	ldr	r0, [pc, #468]	; (8001dc0 <Display_Menu+0x254>)
 8001bea:	f002 ffce 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[3], strlen((char*)Menu_Msg_Arr[3]), HAL_MAX_DELAY);    //"\r\nB --> Read Data.\r\n",
 8001bee:	4b73      	ldr	r3, [pc, #460]	; (8001dbc <Display_Menu+0x250>)
 8001bf0:	68dc      	ldr	r4, [r3, #12]
 8001bf2:	4b72      	ldr	r3, [pc, #456]	; (8001dbc <Display_Menu+0x250>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fb0a 	bl	8000210 <strlen>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	f04f 33ff 	mov.w	r3, #4294967295
 8001c04:	4621      	mov	r1, r4
 8001c06:	486e      	ldr	r0, [pc, #440]	; (8001dc0 <Display_Menu+0x254>)
 8001c08:	f002 ffbf 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[4], strlen((char*)Menu_Msg_Arr[4]), HAL_MAX_DELAY);    //"\r\nC --> Write Data.\r\n",
 8001c0c:	4b6b      	ldr	r3, [pc, #428]	; (8001dbc <Display_Menu+0x250>)
 8001c0e:	691c      	ldr	r4, [r3, #16]
 8001c10:	4b6a      	ldr	r3, [pc, #424]	; (8001dbc <Display_Menu+0x250>)
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fafb 	bl	8000210 <strlen>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c22:	4621      	mov	r1, r4
 8001c24:	4866      	ldr	r0, [pc, #408]	; (8001dc0 <Display_Menu+0x254>)
 8001c26:	f002 ffb0 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[5], strlen((char*)Menu_Msg_Arr[5]), HAL_MAX_DELAY);    //"\r\nD --> Security Access.\r\n",
 8001c2a:	4b64      	ldr	r3, [pc, #400]	; (8001dbc <Display_Menu+0x250>)
 8001c2c:	695c      	ldr	r4, [r3, #20]
 8001c2e:	4b63      	ldr	r3, [pc, #396]	; (8001dbc <Display_Menu+0x250>)
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe faec 	bl	8000210 <strlen>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c40:	4621      	mov	r1, r4
 8001c42:	485f      	ldr	r0, [pc, #380]	; (8001dc0 <Display_Menu+0x254>)
 8001c44:	f002 ffa1 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[6], strlen((char*)Menu_Msg_Arr[6]), HAL_MAX_DELAY);    //"\r\nE --> Tester Representer.\r\n"};
 8001c48:	4b5c      	ldr	r3, [pc, #368]	; (8001dbc <Display_Menu+0x250>)
 8001c4a:	699c      	ldr	r4, [r3, #24]
 8001c4c:	4b5b      	ldr	r3, [pc, #364]	; (8001dbc <Display_Menu+0x250>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fadd 	bl	8000210 <strlen>
 8001c56:	4603      	mov	r3, r0
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5e:	4621      	mov	r1, r4
 8001c60:	4857      	ldr	r0, [pc, #348]	; (8001dc0 <Display_Menu+0x254>)
 8001c62:	f002 ff92 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[17], strlen((char*)Menu_Msg_Arr[17]), HAL_MAX_DELAY);    //"\r\n=========================================.\r\n"};
 8001c66:	4b55      	ldr	r3, [pc, #340]	; (8001dbc <Display_Menu+0x250>)
 8001c68:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8001c6a:	4b54      	ldr	r3, [pc, #336]	; (8001dbc <Display_Menu+0x250>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe face 	bl	8000210 <strlen>
 8001c74:	4603      	mov	r3, r0
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7c:	4621      	mov	r1, r4
 8001c7e:	4850      	ldr	r0, [pc, #320]	; (8001dc0 <Display_Menu+0x254>)
 8001c80:	f002 ff83 	bl	8004b8a <HAL_UART_Transmit>
		break;
 8001c84:	e1af      	b.n	8001fe6 <Display_Menu+0x47a>

	case Control_Session_Menu:
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[7], strlen((char*)Menu_Msg_Arr[7]), HAL_MAX_DELAY);    //"\r\nChoose Your Session.\r\n"
 8001c86:	4b4d      	ldr	r3, [pc, #308]	; (8001dbc <Display_Menu+0x250>)
 8001c88:	69dc      	ldr	r4, [r3, #28]
 8001c8a:	4b4c      	ldr	r3, [pc, #304]	; (8001dbc <Display_Menu+0x250>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fabe 	bl	8000210 <strlen>
 8001c94:	4603      	mov	r3, r0
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9c:	4621      	mov	r1, r4
 8001c9e:	4848      	ldr	r0, [pc, #288]	; (8001dc0 <Display_Menu+0x254>)
 8001ca0:	f002 ff73 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[8], strlen((char*)Menu_Msg_Arr[8]), HAL_MAX_DELAY);    //"\r\nF --> Default Session.\r\n"
 8001ca4:	4b45      	ldr	r3, [pc, #276]	; (8001dbc <Display_Menu+0x250>)
 8001ca6:	6a1c      	ldr	r4, [r3, #32]
 8001ca8:	4b44      	ldr	r3, [pc, #272]	; (8001dbc <Display_Menu+0x250>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe faaf 	bl	8000210 <strlen>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cba:	4621      	mov	r1, r4
 8001cbc:	4840      	ldr	r0, [pc, #256]	; (8001dc0 <Display_Menu+0x254>)
 8001cbe:	f002 ff64 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[9], strlen((char*)Menu_Msg_Arr[9]), HAL_MAX_DELAY);    //"\r\nG --> Extended Session.\r\n"
 8001cc2:	4b3e      	ldr	r3, [pc, #248]	; (8001dbc <Display_Menu+0x250>)
 8001cc4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001cc6:	4b3d      	ldr	r3, [pc, #244]	; (8001dbc <Display_Menu+0x250>)
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe faa0 	bl	8000210 <strlen>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd8:	4621      	mov	r1, r4
 8001cda:	4839      	ldr	r0, [pc, #228]	; (8001dc0 <Display_Menu+0x254>)
 8001cdc:	f002 ff55 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[16], strlen((char*)Menu_Msg_Arr[16]), HAL_MAX_DELAY);    //"\r\nM --> Return to Main Menue.\r\n"
 8001ce0:	4b36      	ldr	r3, [pc, #216]	; (8001dbc <Display_Menu+0x250>)
 8001ce2:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001ce4:	4b35      	ldr	r3, [pc, #212]	; (8001dbc <Display_Menu+0x250>)
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe fa91 	bl	8000210 <strlen>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf6:	4621      	mov	r1, r4
 8001cf8:	4831      	ldr	r0, [pc, #196]	; (8001dc0 <Display_Menu+0x254>)
 8001cfa:	f002 ff46 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[17], strlen((char*)Menu_Msg_Arr[17]), HAL_MAX_DELAY);    //"\r\n=========================================.\r\n"};
 8001cfe:	4b2f      	ldr	r3, [pc, #188]	; (8001dbc <Display_Menu+0x250>)
 8001d00:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8001d02:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <Display_Menu+0x250>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fa82 	bl	8000210 <strlen>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295
 8001d14:	4621      	mov	r1, r4
 8001d16:	482a      	ldr	r0, [pc, #168]	; (8001dc0 <Display_Menu+0x254>)
 8001d18:	f002 ff37 	bl	8004b8a <HAL_UART_Transmit>
		break;
 8001d1c:	e163      	b.n	8001fe6 <Display_Menu+0x47a>


	case Read_Data_Menu:
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[10], strlen((char*)Menu_Msg_Arr[10]), HAL_MAX_DELAY);    //"\r\nChoose Your Data.\r\n"
 8001d1e:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <Display_Menu+0x250>)
 8001d20:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001d22:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <Display_Menu+0x250>)
 8001d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fa72 	bl	8000210 <strlen>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295
 8001d34:	4621      	mov	r1, r4
 8001d36:	4822      	ldr	r0, [pc, #136]	; (8001dc0 <Display_Menu+0x254>)
 8001d38:	f002 ff27 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[11], strlen((char*)Menu_Msg_Arr[11]), HAL_MAX_DELAY);    //"\r\nH --> Read Oil Temperature.\r\n"
 8001d3c:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <Display_Menu+0x250>)
 8001d3e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001d40:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <Display_Menu+0x250>)
 8001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fa63 	bl	8000210 <strlen>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d52:	4621      	mov	r1, r4
 8001d54:	481a      	ldr	r0, [pc, #104]	; (8001dc0 <Display_Menu+0x254>)
 8001d56:	f002 ff18 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[12], strlen((char*)Menu_Msg_Arr[12]), HAL_MAX_DELAY);    //"\r\nI --> Read Oil Pressure.\r\n"
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <Display_Menu+0x250>)
 8001d5c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001d5e:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <Display_Menu+0x250>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fa54 	bl	8000210 <strlen>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d70:	4621      	mov	r1, r4
 8001d72:	4813      	ldr	r0, [pc, #76]	; (8001dc0 <Display_Menu+0x254>)
 8001d74:	f002 ff09 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[16], strlen((char*)Menu_Msg_Arr[16]), HAL_MAX_DELAY);    //"\r\nM --> Return to Main Menue.\r\n"
 8001d78:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <Display_Menu+0x250>)
 8001d7a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <Display_Menu+0x250>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fa45 	bl	8000210 <strlen>
 8001d86:	4603      	mov	r3, r0
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8e:	4621      	mov	r1, r4
 8001d90:	480b      	ldr	r0, [pc, #44]	; (8001dc0 <Display_Menu+0x254>)
 8001d92:	f002 fefa 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[17], strlen((char*)Menu_Msg_Arr[17]), HAL_MAX_DELAY);    //"\r\n=========================================.\r\n"};
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <Display_Menu+0x250>)
 8001d98:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8001d9a:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <Display_Menu+0x250>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fa36 	bl	8000210 <strlen>
 8001da4:	4603      	mov	r3, r0
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dac:	4621      	mov	r1, r4
 8001dae:	4804      	ldr	r0, [pc, #16]	; (8001dc0 <Display_Menu+0x254>)
 8001db0:	f002 feeb 	bl	8004b8a <HAL_UART_Transmit>
		break;
 8001db4:	e117      	b.n	8001fe6 <Display_Menu+0x47a>
 8001db6:	bf00      	nop
 8001db8:	20007444 	.word	0x20007444
 8001dbc:	20000008 	.word	0x20000008
 8001dc0:	200074e8 	.word	0x200074e8


	case Security_Access_Menu:
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[13], strlen((char*)Menu_Msg_Arr[13]), HAL_MAX_DELAY);    //"\r\nChoose Your Option.\r\n"
 8001dc4:	4b89      	ldr	r3, [pc, #548]	; (8001fec <Display_Menu+0x480>)
 8001dc6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8001dc8:	4b88      	ldr	r3, [pc, #544]	; (8001fec <Display_Menu+0x480>)
 8001dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fa1f 	bl	8000210 <strlen>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dda:	4621      	mov	r1, r4
 8001ddc:	4884      	ldr	r0, [pc, #528]	; (8001ff0 <Display_Menu+0x484>)
 8001dde:	f002 fed4 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[14], strlen((char*)Menu_Msg_Arr[14]), HAL_MAX_DELAY);    //"\r\nJ --> Seed.\r\n"
 8001de2:	4b82      	ldr	r3, [pc, #520]	; (8001fec <Display_Menu+0x480>)
 8001de4:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001de6:	4b81      	ldr	r3, [pc, #516]	; (8001fec <Display_Menu+0x480>)
 8001de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fa10 	bl	8000210 <strlen>
 8001df0:	4603      	mov	r3, r0
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	f04f 33ff 	mov.w	r3, #4294967295
 8001df8:	4621      	mov	r1, r4
 8001dfa:	487d      	ldr	r0, [pc, #500]	; (8001ff0 <Display_Menu+0x484>)
 8001dfc:	f002 fec5 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[15], strlen((char*)Menu_Msg_Arr[15]), HAL_MAX_DELAY);    //"\r\nK --> Key.\r\n"
 8001e00:	4b7a      	ldr	r3, [pc, #488]	; (8001fec <Display_Menu+0x480>)
 8001e02:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8001e04:	4b79      	ldr	r3, [pc, #484]	; (8001fec <Display_Menu+0x480>)
 8001e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fa01 	bl	8000210 <strlen>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295
 8001e16:	4621      	mov	r1, r4
 8001e18:	4875      	ldr	r0, [pc, #468]	; (8001ff0 <Display_Menu+0x484>)
 8001e1a:	f002 feb6 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[16], strlen((char*)Menu_Msg_Arr[16]), HAL_MAX_DELAY);    //"\r\nM --> Return to Main Menue.\r\n"
 8001e1e:	4b73      	ldr	r3, [pc, #460]	; (8001fec <Display_Menu+0x480>)
 8001e20:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001e22:	4b72      	ldr	r3, [pc, #456]	; (8001fec <Display_Menu+0x480>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe f9f2 	bl	8000210 <strlen>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	f04f 33ff 	mov.w	r3, #4294967295
 8001e34:	4621      	mov	r1, r4
 8001e36:	486e      	ldr	r0, [pc, #440]	; (8001ff0 <Display_Menu+0x484>)
 8001e38:	f002 fea7 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[17], strlen((char*)Menu_Msg_Arr[17]), HAL_MAX_DELAY);    //"\r\n=========================================.\r\n"};
 8001e3c:	4b6b      	ldr	r3, [pc, #428]	; (8001fec <Display_Menu+0x480>)
 8001e3e:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8001e40:	4b6a      	ldr	r3, [pc, #424]	; (8001fec <Display_Menu+0x480>)
 8001e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe f9e3 	bl	8000210 <strlen>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e52:	4621      	mov	r1, r4
 8001e54:	4866      	ldr	r0, [pc, #408]	; (8001ff0 <Display_Menu+0x484>)
 8001e56:	f002 fe98 	bl	8004b8a <HAL_UART_Transmit>
		break;
 8001e5a:	e0c4      	b.n	8001fe6 <Display_Menu+0x47a>

	case Write_Data_Menu:
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[10], strlen((char*)Menu_Msg_Arr[10]), HAL_MAX_DELAY);    //"\r\nChoose Your Data.\r\n"
 8001e5c:	4b63      	ldr	r3, [pc, #396]	; (8001fec <Display_Menu+0x480>)
 8001e5e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001e60:	4b62      	ldr	r3, [pc, #392]	; (8001fec <Display_Menu+0x480>)
 8001e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe f9d3 	bl	8000210 <strlen>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e72:	4621      	mov	r1, r4
 8001e74:	485e      	ldr	r0, [pc, #376]	; (8001ff0 <Display_Menu+0x484>)
 8001e76:	f002 fe88 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[18], strlen((char*)Menu_Msg_Arr[18]), HAL_MAX_DELAY);    //"\r\nO --> Write Oil Temperature.\r\n"
 8001e7a:	4b5c      	ldr	r3, [pc, #368]	; (8001fec <Display_Menu+0x480>)
 8001e7c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8001e7e:	4b5b      	ldr	r3, [pc, #364]	; (8001fec <Display_Menu+0x480>)
 8001e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe f9c4 	bl	8000210 <strlen>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e90:	4621      	mov	r1, r4
 8001e92:	4857      	ldr	r0, [pc, #348]	; (8001ff0 <Display_Menu+0x484>)
 8001e94:	f002 fe79 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[19], strlen((char*)Menu_Msg_Arr[19]), HAL_MAX_DELAY);    //"\r\nP --> Write Oil Pressure.\r\n"
 8001e98:	4b54      	ldr	r3, [pc, #336]	; (8001fec <Display_Menu+0x480>)
 8001e9a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8001e9c:	4b53      	ldr	r3, [pc, #332]	; (8001fec <Display_Menu+0x480>)
 8001e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe f9b5 	bl	8000210 <strlen>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001eae:	4621      	mov	r1, r4
 8001eb0:	484f      	ldr	r0, [pc, #316]	; (8001ff0 <Display_Menu+0x484>)
 8001eb2:	f002 fe6a 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[16], strlen((char*)Menu_Msg_Arr[16]), HAL_MAX_DELAY);    //"\r\nM --> Return to Main Menue.\r\n"
 8001eb6:	4b4d      	ldr	r3, [pc, #308]	; (8001fec <Display_Menu+0x480>)
 8001eb8:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001eba:	4b4c      	ldr	r3, [pc, #304]	; (8001fec <Display_Menu+0x480>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe f9a6 	bl	8000210 <strlen>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ecc:	4621      	mov	r1, r4
 8001ece:	4848      	ldr	r0, [pc, #288]	; (8001ff0 <Display_Menu+0x484>)
 8001ed0:	f002 fe5b 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[17], strlen((char*)Menu_Msg_Arr[17]), HAL_MAX_DELAY);    //"\r\n=========================================.\r\n"};
 8001ed4:	4b45      	ldr	r3, [pc, #276]	; (8001fec <Display_Menu+0x480>)
 8001ed6:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8001ed8:	4b44      	ldr	r3, [pc, #272]	; (8001fec <Display_Menu+0x480>)
 8001eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe f997 	bl	8000210 <strlen>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eea:	4621      	mov	r1, r4
 8001eec:	4840      	ldr	r0, [pc, #256]	; (8001ff0 <Display_Menu+0x484>)
 8001eee:	f002 fe4c 	bl	8004b8a <HAL_UART_Transmit>
		break;
 8001ef2:	e078      	b.n	8001fe6 <Display_Menu+0x47a>

	default:
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[0], strlen((char*)Menu_Msg_Arr[0]), HAL_MAX_DELAY);    //{"\r\nHello, Main Menu.\r\n"
 8001ef4:	4b3d      	ldr	r3, [pc, #244]	; (8001fec <Display_Menu+0x480>)
 8001ef6:	681c      	ldr	r4, [r3, #0]
 8001ef8:	4b3c      	ldr	r3, [pc, #240]	; (8001fec <Display_Menu+0x480>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe f987 	bl	8000210 <strlen>
 8001f02:	4603      	mov	r3, r0
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0a:	4621      	mov	r1, r4
 8001f0c:	4838      	ldr	r0, [pc, #224]	; (8001ff0 <Display_Menu+0x484>)
 8001f0e:	f002 fe3c 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[1], strlen((char*)Menu_Msg_Arr[1]), HAL_MAX_DELAY);    //"\r\n please Choose Your Service.\r\n",
 8001f12:	4b36      	ldr	r3, [pc, #216]	; (8001fec <Display_Menu+0x480>)
 8001f14:	685c      	ldr	r4, [r3, #4]
 8001f16:	4b35      	ldr	r3, [pc, #212]	; (8001fec <Display_Menu+0x480>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe f978 	bl	8000210 <strlen>
 8001f20:	4603      	mov	r3, r0
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	f04f 33ff 	mov.w	r3, #4294967295
 8001f28:	4621      	mov	r1, r4
 8001f2a:	4831      	ldr	r0, [pc, #196]	; (8001ff0 <Display_Menu+0x484>)
 8001f2c:	f002 fe2d 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[2], strlen((char*)Menu_Msg_Arr[2]), HAL_MAX_DELAY);    //"\r\nA --> Control Session.\r\n",
 8001f30:	4b2e      	ldr	r3, [pc, #184]	; (8001fec <Display_Menu+0x480>)
 8001f32:	689c      	ldr	r4, [r3, #8]
 8001f34:	4b2d      	ldr	r3, [pc, #180]	; (8001fec <Display_Menu+0x480>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe f969 	bl	8000210 <strlen>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295
 8001f46:	4621      	mov	r1, r4
 8001f48:	4829      	ldr	r0, [pc, #164]	; (8001ff0 <Display_Menu+0x484>)
 8001f4a:	f002 fe1e 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[3], strlen((char*)Menu_Msg_Arr[3]), HAL_MAX_DELAY);    //"\r\nB --> Read Data.\r\n",
 8001f4e:	4b27      	ldr	r3, [pc, #156]	; (8001fec <Display_Menu+0x480>)
 8001f50:	68dc      	ldr	r4, [r3, #12]
 8001f52:	4b26      	ldr	r3, [pc, #152]	; (8001fec <Display_Menu+0x480>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe f95a 	bl	8000210 <strlen>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	f04f 33ff 	mov.w	r3, #4294967295
 8001f64:	4621      	mov	r1, r4
 8001f66:	4822      	ldr	r0, [pc, #136]	; (8001ff0 <Display_Menu+0x484>)
 8001f68:	f002 fe0f 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[4], strlen((char*)Menu_Msg_Arr[4]), HAL_MAX_DELAY);    //"\r\nC --> Write Data.\r\n",
 8001f6c:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <Display_Menu+0x480>)
 8001f6e:	691c      	ldr	r4, [r3, #16]
 8001f70:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <Display_Menu+0x480>)
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe f94b 	bl	8000210 <strlen>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f82:	4621      	mov	r1, r4
 8001f84:	481a      	ldr	r0, [pc, #104]	; (8001ff0 <Display_Menu+0x484>)
 8001f86:	f002 fe00 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[5], strlen((char*)Menu_Msg_Arr[5]), HAL_MAX_DELAY);    //"\r\nD --> Security Access.\r\n",
 8001f8a:	4b18      	ldr	r3, [pc, #96]	; (8001fec <Display_Menu+0x480>)
 8001f8c:	695c      	ldr	r4, [r3, #20]
 8001f8e:	4b17      	ldr	r3, [pc, #92]	; (8001fec <Display_Menu+0x480>)
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe f93c 	bl	8000210 <strlen>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa0:	4621      	mov	r1, r4
 8001fa2:	4813      	ldr	r0, [pc, #76]	; (8001ff0 <Display_Menu+0x484>)
 8001fa4:	f002 fdf1 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[6], strlen((char*)Menu_Msg_Arr[6]), HAL_MAX_DELAY);    //"\r\nE --> Tester Representer.\r\n"};
 8001fa8:	4b10      	ldr	r3, [pc, #64]	; (8001fec <Display_Menu+0x480>)
 8001faa:	699c      	ldr	r4, [r3, #24]
 8001fac:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <Display_Menu+0x480>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe f92d 	bl	8000210 <strlen>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbe:	4621      	mov	r1, r4
 8001fc0:	480b      	ldr	r0, [pc, #44]	; (8001ff0 <Display_Menu+0x484>)
 8001fc2:	f002 fde2 	bl	8004b8a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, Menu_Msg_Arr[17], strlen((char*)Menu_Msg_Arr[17]), HAL_MAX_DELAY);    //"\r\n=========================================.\r\n"};
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <Display_Menu+0x480>)
 8001fc8:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <Display_Menu+0x480>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe f91e 	bl	8000210 <strlen>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fdc:	4621      	mov	r1, r4
 8001fde:	4804      	ldr	r0, [pc, #16]	; (8001ff0 <Display_Menu+0x484>)
 8001fe0:	f002 fdd3 	bl	8004b8a <HAL_UART_Transmit>
		break;
 8001fe4:	bf00      	nop

		break;
		//Nothing
	}

}
 8001fe6:	bf00      	nop
 8001fe8:	bd98      	pop	{r3, r4, r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000008 	.word	0x20000008
 8001ff0:	200074e8 	.word	0x200074e8

08001ff4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a04      	ldr	r2, [pc, #16]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d101      	bne.n	800200a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002006:	f000 fa5f 	bl	80024c8 <HAL_IncTick>
		reset_timer();
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	}
#endif
	/* USER CODE END Callback 1 */
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40010000 	.word	0x40010000

08002018 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800201c:	b672      	cpsid	i
}
 800201e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002020:	e7fe      	b.n	8002020 <Error_Handler+0x8>
	...

08002024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_MspInit+0x54>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4a11      	ldr	r2, [pc, #68]	; (8002078 <HAL_MspInit+0x54>)
 8002034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002038:	6453      	str	r3, [r2, #68]	; 0x44
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_MspInit+0x54>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	603b      	str	r3, [r7, #0]
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_MspInit+0x54>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <HAL_MspInit+0x54>)
 8002050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_MspInit+0x54>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002062:	2200      	movs	r2, #0
 8002064:	210f      	movs	r1, #15
 8002066:	f06f 0001 	mvn.w	r0, #1
 800206a:	f001 f99d 	bl	80033a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800

0800207c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08c      	sub	sp, #48	; 0x30
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800208c:	2300      	movs	r3, #0
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	4b2e      	ldr	r3, [pc, #184]	; (800214c <HAL_InitTick+0xd0>)
 8002092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002094:	4a2d      	ldr	r2, [pc, #180]	; (800214c <HAL_InitTick+0xd0>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6453      	str	r3, [r2, #68]	; 0x44
 800209c:	4b2b      	ldr	r3, [pc, #172]	; (800214c <HAL_InitTick+0xd0>)
 800209e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020a8:	f107 020c 	add.w	r2, r7, #12
 80020ac:	f107 0310 	add.w	r3, r7, #16
 80020b0:	4611      	mov	r1, r2
 80020b2:	4618      	mov	r0, r3
 80020b4:	f001 fcfc 	bl	8003ab0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80020b8:	f001 fce6 	bl	8003a88 <HAL_RCC_GetPCLK2Freq>
 80020bc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c0:	4a23      	ldr	r2, [pc, #140]	; (8002150 <HAL_InitTick+0xd4>)
 80020c2:	fba2 2303 	umull	r2, r3, r2, r3
 80020c6:	0c9b      	lsrs	r3, r3, #18
 80020c8:	3b01      	subs	r3, #1
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80020cc:	4b21      	ldr	r3, [pc, #132]	; (8002154 <HAL_InitTick+0xd8>)
 80020ce:	4a22      	ldr	r2, [pc, #136]	; (8002158 <HAL_InitTick+0xdc>)
 80020d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80020d2:	4b20      	ldr	r3, [pc, #128]	; (8002154 <HAL_InitTick+0xd8>)
 80020d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020d8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80020da:	4a1e      	ldr	r2, [pc, #120]	; (8002154 <HAL_InitTick+0xd8>)
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80020e0:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <HAL_InitTick+0xd8>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e6:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <HAL_InitTick+0xd8>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_InitTick+0xd8>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80020f2:	4818      	ldr	r0, [pc, #96]	; (8002154 <HAL_InitTick+0xd8>)
 80020f4:	f002 f9dc 	bl	80044b0 <HAL_TIM_Base_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80020fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002102:	2b00      	cmp	r3, #0
 8002104:	d11b      	bne.n	800213e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002106:	4813      	ldr	r0, [pc, #76]	; (8002154 <HAL_InitTick+0xd8>)
 8002108:	f002 fa22 	bl	8004550 <HAL_TIM_Base_Start_IT>
 800210c:	4603      	mov	r3, r0
 800210e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002112:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002116:	2b00      	cmp	r3, #0
 8002118:	d111      	bne.n	800213e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800211a:	2019      	movs	r0, #25
 800211c:	f001 f960 	bl	80033e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b0f      	cmp	r3, #15
 8002124:	d808      	bhi.n	8002138 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002126:	2200      	movs	r2, #0
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	2019      	movs	r0, #25
 800212c:	f001 f93c 	bl	80033a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002130:	4a0a      	ldr	r2, [pc, #40]	; (800215c <HAL_InitTick+0xe0>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e002      	b.n	800213e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800213e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002142:	4618      	mov	r0, r3
 8002144:	3730      	adds	r7, #48	; 0x30
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40023800 	.word	0x40023800
 8002150:	431bde83 	.word	0x431bde83
 8002154:	20007454 	.word	0x20007454
 8002158:	40010000 	.word	0x40010000
 800215c:	2000005c 	.word	0x2000005c

08002160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002164:	e7fe      	b.n	8002164 <NMI_Handler+0x4>

08002166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800216a:	e7fe      	b.n	800216a <HardFault_Handler+0x4>

0800216c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002170:	e7fe      	b.n	8002170 <MemManage_Handler+0x4>

08002172 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002176:	e7fe      	b.n	8002176 <BusFault_Handler+0x4>

08002178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800217c:	e7fe      	b.n	800217c <UsageFault_Handler+0x4>

0800217e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <CAN1_RX0_IRQHandler+0x10>)
 8002192:	f000 fe21 	bl	8002dd8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20007178 	.word	0x20007178

080021a0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <CAN1_RX1_IRQHandler+0x10>)
 80021a6:	f000 fe17 	bl	8002dd8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20007178 	.word	0x20007178

080021b4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021b8:	4802      	ldr	r0, [pc, #8]	; (80021c4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80021ba:	f002 fa39 	bl	8004630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20007454 	.word	0x20007454

080021c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021cc:	4802      	ldr	r0, [pc, #8]	; (80021d8 <USART2_IRQHandler+0x10>)
 80021ce:	f002 fe41 	bl	8004e54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	200074e8 	.word	0x200074e8

080021dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021e0:	4802      	ldr	r0, [pc, #8]	; (80021ec <TIM6_DAC_IRQHandler+0x10>)
 80021e2:	f002 fa25 	bl	8004630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	200074a0 	.word	0x200074a0

080021f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f8:	4a14      	ldr	r2, [pc, #80]	; (800224c <_sbrk+0x5c>)
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <_sbrk+0x60>)
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002204:	4b13      	ldr	r3, [pc, #76]	; (8002254 <_sbrk+0x64>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d102      	bne.n	8002212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800220c:	4b11      	ldr	r3, [pc, #68]	; (8002254 <_sbrk+0x64>)
 800220e:	4a12      	ldr	r2, [pc, #72]	; (8002258 <_sbrk+0x68>)
 8002210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <_sbrk+0x64>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	429a      	cmp	r2, r3
 800221e:	d207      	bcs.n	8002230 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002220:	f005 f87a 	bl	8007318 <__errno>
 8002224:	4603      	mov	r3, r0
 8002226:	220c      	movs	r2, #12
 8002228:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800222a:	f04f 33ff 	mov.w	r3, #4294967295
 800222e:	e009      	b.n	8002244 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002230:	4b08      	ldr	r3, [pc, #32]	; (8002254 <_sbrk+0x64>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002236:	4b07      	ldr	r3, [pc, #28]	; (8002254 <_sbrk+0x64>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	4a05      	ldr	r2, [pc, #20]	; (8002254 <_sbrk+0x64>)
 8002240:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002242:	68fb      	ldr	r3, [r7, #12]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20020000 	.word	0x20020000
 8002250:	00000400 	.word	0x00000400
 8002254:	2000749c 	.word	0x2000749c
 8002258:	2000b3d0 	.word	0x2000b3d0

0800225c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <SystemInit+0x20>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002266:	4a05      	ldr	r2, [pc, #20]	; (800227c <SystemInit+0x20>)
 8002268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800226c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002286:	463b      	mov	r3, r7
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800228e:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <MX_TIM6_Init+0x64>)
 8002290:	4a15      	ldr	r2, [pc, #84]	; (80022e8 <MX_TIM6_Init+0x68>)
 8002292:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 41999;
 8002294:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <MX_TIM6_Init+0x64>)
 8002296:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800229a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <MX_TIM6_Init+0x64>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <MX_TIM6_Init+0x64>)
 80022a4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80022a8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022aa:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <MX_TIM6_Init+0x64>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80022b0:	480c      	ldr	r0, [pc, #48]	; (80022e4 <MX_TIM6_Init+0x64>)
 80022b2:	f002 f8fd 	bl	80044b0 <HAL_TIM_Base_Init>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80022bc:	f7ff feac 	bl	8002018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022c0:	2300      	movs	r3, #0
 80022c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c4:	2300      	movs	r3, #0
 80022c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80022c8:	463b      	mov	r3, r7
 80022ca:	4619      	mov	r1, r3
 80022cc:	4805      	ldr	r0, [pc, #20]	; (80022e4 <MX_TIM6_Init+0x64>)
 80022ce:	f002 fb7f 	bl	80049d0 <HAL_TIMEx_MasterConfigSynchronization>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80022d8:	f7ff fe9e 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	200074a0 	.word	0x200074a0
 80022e8:	40001000 	.word	0x40001000

080022ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0e      	ldr	r2, [pc, #56]	; (8002334 <HAL_TIM_Base_MspInit+0x48>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d115      	bne.n	800232a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <HAL_TIM_Base_MspInit+0x4c>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	4a0c      	ldr	r2, [pc, #48]	; (8002338 <HAL_TIM_Base_MspInit+0x4c>)
 8002308:	f043 0310 	orr.w	r3, r3, #16
 800230c:	6413      	str	r3, [r2, #64]	; 0x40
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HAL_TIM_Base_MspInit+0x4c>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f003 0310 	and.w	r3, r3, #16
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800231a:	2200      	movs	r2, #0
 800231c:	2105      	movs	r1, #5
 800231e:	2036      	movs	r0, #54	; 0x36
 8002320:	f001 f842 	bl	80033a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002324:	2036      	movs	r0, #54	; 0x36
 8002326:	f001 f85b 	bl	80033e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40001000 	.word	0x40001000
 8002338:	40023800 	.word	0x40023800

0800233c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002340:	4b11      	ldr	r3, [pc, #68]	; (8002388 <MX_USART2_UART_Init+0x4c>)
 8002342:	4a12      	ldr	r2, [pc, #72]	; (800238c <MX_USART2_UART_Init+0x50>)
 8002344:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002346:	4b10      	ldr	r3, [pc, #64]	; (8002388 <MX_USART2_UART_Init+0x4c>)
 8002348:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800234c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800234e:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <MX_USART2_UART_Init+0x4c>)
 8002350:	2200      	movs	r2, #0
 8002352:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002354:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <MX_USART2_UART_Init+0x4c>)
 8002356:	2200      	movs	r2, #0
 8002358:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800235a:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <MX_USART2_UART_Init+0x4c>)
 800235c:	2200      	movs	r2, #0
 800235e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002360:	4b09      	ldr	r3, [pc, #36]	; (8002388 <MX_USART2_UART_Init+0x4c>)
 8002362:	220c      	movs	r2, #12
 8002364:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <MX_USART2_UART_Init+0x4c>)
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <MX_USART2_UART_Init+0x4c>)
 800236e:	2200      	movs	r2, #0
 8002370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002372:	4805      	ldr	r0, [pc, #20]	; (8002388 <MX_USART2_UART_Init+0x4c>)
 8002374:	f002 fbbc 	bl	8004af0 <HAL_UART_Init>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800237e:	f7ff fe4b 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	200074e8 	.word	0x200074e8
 800238c:	40004400 	.word	0x40004400

08002390 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08a      	sub	sp, #40	; 0x28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 0314 	add.w	r3, r7, #20
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a1d      	ldr	r2, [pc, #116]	; (8002424 <HAL_UART_MspInit+0x94>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d133      	bne.n	800241a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	4b1c      	ldr	r3, [pc, #112]	; (8002428 <HAL_UART_MspInit+0x98>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	4a1b      	ldr	r2, [pc, #108]	; (8002428 <HAL_UART_MspInit+0x98>)
 80023bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c0:	6413      	str	r3, [r2, #64]	; 0x40
 80023c2:	4b19      	ldr	r3, [pc, #100]	; (8002428 <HAL_UART_MspInit+0x98>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	4b15      	ldr	r3, [pc, #84]	; (8002428 <HAL_UART_MspInit+0x98>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a14      	ldr	r2, [pc, #80]	; (8002428 <HAL_UART_MspInit+0x98>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b12      	ldr	r3, [pc, #72]	; (8002428 <HAL_UART_MspInit+0x98>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023ea:	230c      	movs	r3, #12
 80023ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ee:	2302      	movs	r3, #2
 80023f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f6:	2303      	movs	r3, #3
 80023f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023fa:	2307      	movs	r3, #7
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fe:	f107 0314 	add.w	r3, r7, #20
 8002402:	4619      	mov	r1, r3
 8002404:	4809      	ldr	r0, [pc, #36]	; (800242c <HAL_UART_MspInit+0x9c>)
 8002406:	f001 f88b 	bl	8003520 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800240a:	2200      	movs	r2, #0
 800240c:	2105      	movs	r1, #5
 800240e:	2026      	movs	r0, #38	; 0x26
 8002410:	f000 ffca 	bl	80033a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002414:	2026      	movs	r0, #38	; 0x26
 8002416:	f000 ffe3 	bl	80033e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800241a:	bf00      	nop
 800241c:	3728      	adds	r7, #40	; 0x28
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40004400 	.word	0x40004400
 8002428:	40023800 	.word	0x40023800
 800242c:	40020000 	.word	0x40020000

08002430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002468 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002434:	480d      	ldr	r0, [pc, #52]	; (800246c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002436:	490e      	ldr	r1, [pc, #56]	; (8002470 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002438:	4a0e      	ldr	r2, [pc, #56]	; (8002474 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800243c:	e002      	b.n	8002444 <LoopCopyDataInit>

0800243e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800243e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002442:	3304      	adds	r3, #4

08002444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002448:	d3f9      	bcc.n	800243e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800244a:	4a0b      	ldr	r2, [pc, #44]	; (8002478 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800244c:	4c0b      	ldr	r4, [pc, #44]	; (800247c <LoopFillZerobss+0x26>)
  movs r3, #0
 800244e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002450:	e001      	b.n	8002456 <LoopFillZerobss>

08002452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002454:	3204      	adds	r2, #4

08002456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002458:	d3fb      	bcc.n	8002452 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800245a:	f7ff feff 	bl	800225c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800245e:	f004 ff61 	bl	8007324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002462:	f7ff fab9 	bl	80019d8 <main>
  bx  lr    
 8002466:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002468:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800246c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002470:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8002474:	080080b0 	.word	0x080080b0
  ldr r2, =_sbss
 8002478:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 800247c:	2000b3cc 	.word	0x2000b3cc

08002480 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002480:	e7fe      	b.n	8002480 <ADC_IRQHandler>
	...

08002484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002488:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <HAL_Init+0x40>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a0d      	ldr	r2, [pc, #52]	; (80024c4 <HAL_Init+0x40>)
 800248e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002492:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002494:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_Init+0x40>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <HAL_Init+0x40>)
 800249a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800249e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a0:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <HAL_Init+0x40>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a07      	ldr	r2, [pc, #28]	; (80024c4 <HAL_Init+0x40>)
 80024a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ac:	2003      	movs	r0, #3
 80024ae:	f000 ff70 	bl	8003392 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024b2:	200f      	movs	r0, #15
 80024b4:	f7ff fde2 	bl	800207c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024b8:	f7ff fdb4 	bl	8002024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023c00 	.word	0x40023c00

080024c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024cc:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_IncTick+0x20>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_IncTick+0x24>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4413      	add	r3, r2
 80024d8:	4a04      	ldr	r2, [pc, #16]	; (80024ec <HAL_IncTick+0x24>)
 80024da:	6013      	str	r3, [r2, #0]
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	20000060 	.word	0x20000060
 80024ec:	2000752c 	.word	0x2000752c

080024f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return uwTick;
 80024f4:	4b03      	ldr	r3, [pc, #12]	; (8002504 <HAL_GetTick+0x14>)
 80024f6:	681b      	ldr	r3, [r3, #0]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	2000752c 	.word	0x2000752c

08002508 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e0ed      	b.n	80026f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d102      	bne.n	800252c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff f8ac 	bl	8001684 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0201 	orr.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800253c:	f7ff ffd8 	bl	80024f0 <HAL_GetTick>
 8002540:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002542:	e012      	b.n	800256a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002544:	f7ff ffd4 	bl	80024f0 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b0a      	cmp	r3, #10
 8002550:	d90b      	bls.n	800256a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2205      	movs	r2, #5
 8002562:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e0c5      	b.n	80026f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0e5      	beq.n	8002544 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0202 	bic.w	r2, r2, #2
 8002586:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002588:	f7ff ffb2 	bl	80024f0 <HAL_GetTick>
 800258c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800258e:	e012      	b.n	80025b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002590:	f7ff ffae 	bl	80024f0 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b0a      	cmp	r3, #10
 800259c:	d90b      	bls.n	80025b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2205      	movs	r2, #5
 80025ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e09f      	b.n	80026f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1e5      	bne.n	8002590 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	7e1b      	ldrb	r3, [r3, #24]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d108      	bne.n	80025de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	e007      	b.n	80025ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	7e5b      	ldrb	r3, [r3, #25]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d108      	bne.n	8002608 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e007      	b.n	8002618 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002616:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	7e9b      	ldrb	r3, [r3, #26]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d108      	bne.n	8002632 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0220 	orr.w	r2, r2, #32
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	e007      	b.n	8002642 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0220 	bic.w	r2, r2, #32
 8002640:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	7edb      	ldrb	r3, [r3, #27]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d108      	bne.n	800265c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0210 	bic.w	r2, r2, #16
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	e007      	b.n	800266c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0210 	orr.w	r2, r2, #16
 800266a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	7f1b      	ldrb	r3, [r3, #28]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d108      	bne.n	8002686 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0208 	orr.w	r2, r2, #8
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	e007      	b.n	8002696 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0208 	bic.w	r2, r2, #8
 8002694:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	7f5b      	ldrb	r3, [r3, #29]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d108      	bne.n	80026b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 0204 	orr.w	r2, r2, #4
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	e007      	b.n	80026c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0204 	bic.w	r2, r2, #4
 80026be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	ea42 0103 	orr.w	r1, r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	1e5a      	subs	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002700:	b480      	push	{r7}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002716:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002718:	7cfb      	ldrb	r3, [r7, #19]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d003      	beq.n	8002726 <HAL_CAN_ConfigFilter+0x26>
 800271e:	7cfb      	ldrb	r3, [r7, #19]
 8002720:	2b02      	cmp	r3, #2
 8002722:	f040 80be 	bne.w	80028a2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002726:	4b65      	ldr	r3, [pc, #404]	; (80028bc <HAL_CAN_ConfigFilter+0x1bc>)
 8002728:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002730:	f043 0201 	orr.w	r2, r3, #1
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002740:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	021b      	lsls	r3, r3, #8
 8002756:	431a      	orrs	r2, r3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	f003 031f 	and.w	r3, r3, #31
 8002766:	2201      	movs	r2, #1
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	43db      	mvns	r3, r3
 8002778:	401a      	ands	r2, r3
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d123      	bne.n	80027d0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	43db      	mvns	r3, r3
 8002792:	401a      	ands	r2, r3
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027aa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	3248      	adds	r2, #72	; 0x48
 80027b0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027c4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027c6:	6979      	ldr	r1, [r7, #20]
 80027c8:	3348      	adds	r3, #72	; 0x48
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	440b      	add	r3, r1
 80027ce:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d122      	bne.n	800281e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	431a      	orrs	r2, r3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027f8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	3248      	adds	r2, #72	; 0x48
 80027fe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002812:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002814:	6979      	ldr	r1, [r7, #20]
 8002816:	3348      	adds	r3, #72	; 0x48
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	440b      	add	r3, r1
 800281c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d109      	bne.n	800283a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	43db      	mvns	r3, r3
 8002830:	401a      	ands	r2, r3
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002838:	e007      	b.n	800284a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	431a      	orrs	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	43db      	mvns	r3, r3
 800285c:	401a      	ands	r2, r3
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002864:	e007      	b.n	8002876 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	431a      	orrs	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d107      	bne.n	800288e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	431a      	orrs	r2, r3
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002894:	f023 0201 	bic.w	r2, r3, #1
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	e006      	b.n	80028b0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
  }
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	371c      	adds	r7, #28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	40006400 	.word	0x40006400

080028c0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d12e      	bne.n	8002932 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028ec:	f7ff fe00 	bl	80024f0 <HAL_GetTick>
 80028f0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028f2:	e012      	b.n	800291a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028f4:	f7ff fdfc 	bl	80024f0 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b0a      	cmp	r3, #10
 8002900:	d90b      	bls.n	800291a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2205      	movs	r2, #5
 8002912:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e012      	b.n	8002940 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1e5      	bne.n	80028f4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800292e:	2300      	movs	r3, #0
 8002930:	e006      	b.n	8002940 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
  }
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002948:	b480      	push	{r7}
 800294a:	b089      	sub	sp, #36	; 0x24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
 8002954:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 3020 	ldrb.w	r3, [r3, #32]
 800295c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002966:	7ffb      	ldrb	r3, [r7, #31]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d003      	beq.n	8002974 <HAL_CAN_AddTxMessage+0x2c>
 800296c:	7ffb      	ldrb	r3, [r7, #31]
 800296e:	2b02      	cmp	r3, #2
 8002970:	f040 80b8 	bne.w	8002ae4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10a      	bne.n	8002994 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002984:	2b00      	cmp	r3, #0
 8002986:	d105      	bne.n	8002994 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 80a0 	beq.w	8002ad4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	0e1b      	lsrs	r3, r3, #24
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d907      	bls.n	80029b4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e09e      	b.n	8002af2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80029b4:	2201      	movs	r2, #1
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	409a      	lsls	r2, r3
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10d      	bne.n	80029e2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029d0:	68f9      	ldr	r1, [r7, #12]
 80029d2:	6809      	ldr	r1, [r1, #0]
 80029d4:	431a      	orrs	r2, r3
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	3318      	adds	r3, #24
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	440b      	add	r3, r1
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	e00f      	b.n	8002a02 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029ec:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029f2:	68f9      	ldr	r1, [r7, #12]
 80029f4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80029f6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	3318      	adds	r3, #24
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	440b      	add	r3, r1
 8002a00:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6819      	ldr	r1, [r3, #0]
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	3318      	adds	r3, #24
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	440b      	add	r3, r1
 8002a12:	3304      	adds	r3, #4
 8002a14:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	7d1b      	ldrb	r3, [r3, #20]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d111      	bne.n	8002a42 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	3318      	adds	r3, #24
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	4413      	add	r3, r2
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	6811      	ldr	r1, [r2, #0]
 8002a32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3318      	adds	r3, #24
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	440b      	add	r3, r1
 8002a3e:	3304      	adds	r3, #4
 8002a40:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3307      	adds	r3, #7
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	061a      	lsls	r2, r3, #24
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3306      	adds	r3, #6
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	041b      	lsls	r3, r3, #16
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3305      	adds	r3, #5
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	021b      	lsls	r3, r3, #8
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	3204      	adds	r2, #4
 8002a62:	7812      	ldrb	r2, [r2, #0]
 8002a64:	4610      	mov	r0, r2
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	6811      	ldr	r1, [r2, #0]
 8002a6a:	ea43 0200 	orr.w	r2, r3, r0
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	440b      	add	r3, r1
 8002a74:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002a78:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3303      	adds	r3, #3
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	061a      	lsls	r2, r3, #24
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3302      	adds	r3, #2
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	041b      	lsls	r3, r3, #16
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	021b      	lsls	r3, r3, #8
 8002a94:	4313      	orrs	r3, r2
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	7812      	ldrb	r2, [r2, #0]
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	6811      	ldr	r1, [r2, #0]
 8002aa0:	ea43 0200 	orr.w	r2, r3, r0
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	440b      	add	r3, r1
 8002aaa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002aae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	3318      	adds	r3, #24
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	4413      	add	r3, r2
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	6811      	ldr	r1, [r2, #0]
 8002ac2:	f043 0201 	orr.w	r2, r3, #1
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	3318      	adds	r3, #24
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	440b      	add	r3, r1
 8002ace:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	e00e      	b.n	8002af2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e006      	b.n	8002af2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
  }
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3724      	adds	r7, #36	; 0x24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b085      	sub	sp, #20
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b10:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002b12:	7afb      	ldrb	r3, [r7, #11]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d002      	beq.n	8002b1e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002b18:	7afb      	ldrb	r3, [r7, #11]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d11d      	bne.n	8002b5a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	3301      	adds	r3, #1
 8002b44:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	3301      	adds	r3, #1
 8002b58:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b7c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d003      	beq.n	8002b8c <HAL_CAN_GetRxMessage+0x24>
 8002b84:	7dfb      	ldrb	r3, [r7, #23]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	f040 80f3 	bne.w	8002d72 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10e      	bne.n	8002bb0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d116      	bne.n	8002bce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0e7      	b.n	8002d80 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d107      	bne.n	8002bce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e0d8      	b.n	8002d80 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	331b      	adds	r3, #27
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	4413      	add	r3, r2
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0204 	and.w	r2, r3, #4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10c      	bne.n	8002c06 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	331b      	adds	r3, #27
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	4413      	add	r3, r2
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	0d5b      	lsrs	r3, r3, #21
 8002bfc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	e00b      	b.n	8002c1e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	331b      	adds	r3, #27
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	4413      	add	r3, r2
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	08db      	lsrs	r3, r3, #3
 8002c16:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	331b      	adds	r3, #27
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	4413      	add	r3, r2
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0202 	and.w	r2, r3, #2
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	331b      	adds	r3, #27
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	4413      	add	r3, r2
 8002c40:	3304      	adds	r3, #4
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 020f 	and.w	r2, r3, #15
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	331b      	adds	r3, #27
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	4413      	add	r3, r2
 8002c58:	3304      	adds	r3, #4
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	0a1b      	lsrs	r3, r3, #8
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	331b      	adds	r3, #27
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	4413      	add	r3, r2
 8002c70:	3304      	adds	r3, #4
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	0c1b      	lsrs	r3, r3, #16
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	4413      	add	r3, r2
 8002c86:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	0a1a      	lsrs	r2, r3, #8
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	0c1a      	lsrs	r2, r3, #16
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	0e1a      	lsrs	r2, r3, #24
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	3303      	adds	r3, #3
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	0a1a      	lsrs	r2, r3, #8
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	3305      	adds	r3, #5
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	0c1a      	lsrs	r2, r3, #16
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	3306      	adds	r3, #6
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	0e1a      	lsrs	r2, r3, #24
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	3307      	adds	r3, #7
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d108      	bne.n	8002d5e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0220 	orr.w	r2, r2, #32
 8002d5a:	60da      	str	r2, [r3, #12]
 8002d5c:	e007      	b.n	8002d6e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 0220 	orr.w	r2, r2, #32
 8002d6c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e006      	b.n	8002d80 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
  }
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	371c      	adds	r7, #28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d9c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d002      	beq.n	8002daa <HAL_CAN_ActivateNotification+0x1e>
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d109      	bne.n	8002dbe <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6959      	ldr	r1, [r3, #20]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	e006      	b.n	8002dcc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
  }
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08a      	sub	sp, #40	; 0x28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002de0:	2300      	movs	r3, #0
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d07c      	beq.n	8002f18 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d023      	beq.n	8002e70 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f983 	bl	8003146 <HAL_CAN_TxMailbox0CompleteCallback>
 8002e40:	e016      	b.n	8002e70 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d004      	beq.n	8002e56 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
 8002e54:	e00c      	b.n	8002e70 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d004      	beq.n	8002e6a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
 8002e68:	e002      	b.n	8002e70 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f989 	bl	8003182 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d024      	beq.n	8002ec4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e82:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f963 	bl	800315a <HAL_CAN_TxMailbox1CompleteCallback>
 8002e94:	e016      	b.n	8002ec4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d004      	beq.n	8002eaa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea8:	e00c      	b.n	8002ec4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d004      	beq.n	8002ebe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
 8002ebc:	e002      	b.n	8002ec4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f969 	bl	8003196 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d024      	beq.n	8002f18 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ed6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f943 	bl	800316e <HAL_CAN_TxMailbox2CompleteCallback>
 8002ee8:	e016      	b.n	8002f18 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d004      	beq.n	8002efe <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
 8002efc:	e00c      	b.n	8002f18 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d004      	beq.n	8002f12 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f10:	e002      	b.n	8002f18 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f949 	bl	80031aa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00c      	beq.n	8002f3c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d007      	beq.n	8002f3c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2210      	movs	r2, #16
 8002f3a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00b      	beq.n	8002f5e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f003 0308 	and.w	r3, r3, #8
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d006      	beq.n	8002f5e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2208      	movs	r2, #8
 8002f56:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f930 	bl	80031be <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d009      	beq.n	8002f7c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7fd fe80 	bl	8000c7c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00c      	beq.n	8002fa0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d007      	beq.n	8002fa0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2210      	movs	r2, #16
 8002f9e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00b      	beq.n	8002fc2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d006      	beq.n	8002fc2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2208      	movs	r2, #8
 8002fba:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f912 	bl	80031e6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d009      	beq.n	8002fe0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f8f9 	bl	80031d2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00b      	beq.n	8003002 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	f003 0310 	and.w	r3, r3, #16
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d006      	beq.n	8003002 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2210      	movs	r2, #16
 8002ffa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f8fc 	bl	80031fa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00b      	beq.n	8003024 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d006      	beq.n	8003024 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2208      	movs	r2, #8
 800301c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f8f5 	bl	800320e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d07b      	beq.n	8003126 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d072      	beq.n	800311e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303e:	2b00      	cmp	r3, #0
 8003040:	d008      	beq.n	8003054 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800305a:	2b00      	cmp	r3, #0
 800305c:	d008      	beq.n	8003070 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	f043 0302 	orr.w	r3, r3, #2
 800306e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003076:	2b00      	cmp	r3, #0
 8003078:	d008      	beq.n	800308c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	f043 0304 	orr.w	r3, r3, #4
 800308a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003092:	2b00      	cmp	r3, #0
 8003094:	d043      	beq.n	800311e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800309c:	2b00      	cmp	r3, #0
 800309e:	d03e      	beq.n	800311e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030a6:	2b60      	cmp	r3, #96	; 0x60
 80030a8:	d02b      	beq.n	8003102 <HAL_CAN_IRQHandler+0x32a>
 80030aa:	2b60      	cmp	r3, #96	; 0x60
 80030ac:	d82e      	bhi.n	800310c <HAL_CAN_IRQHandler+0x334>
 80030ae:	2b50      	cmp	r3, #80	; 0x50
 80030b0:	d022      	beq.n	80030f8 <HAL_CAN_IRQHandler+0x320>
 80030b2:	2b50      	cmp	r3, #80	; 0x50
 80030b4:	d82a      	bhi.n	800310c <HAL_CAN_IRQHandler+0x334>
 80030b6:	2b40      	cmp	r3, #64	; 0x40
 80030b8:	d019      	beq.n	80030ee <HAL_CAN_IRQHandler+0x316>
 80030ba:	2b40      	cmp	r3, #64	; 0x40
 80030bc:	d826      	bhi.n	800310c <HAL_CAN_IRQHandler+0x334>
 80030be:	2b30      	cmp	r3, #48	; 0x30
 80030c0:	d010      	beq.n	80030e4 <HAL_CAN_IRQHandler+0x30c>
 80030c2:	2b30      	cmp	r3, #48	; 0x30
 80030c4:	d822      	bhi.n	800310c <HAL_CAN_IRQHandler+0x334>
 80030c6:	2b10      	cmp	r3, #16
 80030c8:	d002      	beq.n	80030d0 <HAL_CAN_IRQHandler+0x2f8>
 80030ca:	2b20      	cmp	r3, #32
 80030cc:	d005      	beq.n	80030da <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80030ce:	e01d      	b.n	800310c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	f043 0308 	orr.w	r3, r3, #8
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030d8:	e019      	b.n	800310e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	f043 0310 	orr.w	r3, r3, #16
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030e2:	e014      	b.n	800310e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	f043 0320 	orr.w	r3, r3, #32
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030ec:	e00f      	b.n	800310e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030f6:	e00a      	b.n	800310e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003100:	e005      	b.n	800310e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800310a:	e000      	b.n	800310e <HAL_CAN_IRQHandler+0x336>
            break;
 800310c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	699a      	ldr	r2, [r3, #24]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800311c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2204      	movs	r2, #4
 8003124:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	2b00      	cmp	r3, #0
 800312a:	d008      	beq.n	800313e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f872 	bl	8003222 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800313e:	bf00      	nop
 8003140:	3728      	adds	r7, #40	; 0x28
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
	...

08003238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003248:	4b0c      	ldr	r3, [pc, #48]	; (800327c <__NVIC_SetPriorityGrouping+0x44>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003254:	4013      	ands	r3, r2
 8003256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800326a:	4a04      	ldr	r2, [pc, #16]	; (800327c <__NVIC_SetPriorityGrouping+0x44>)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	60d3      	str	r3, [r2, #12]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003284:	4b04      	ldr	r3, [pc, #16]	; (8003298 <__NVIC_GetPriorityGrouping+0x18>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	0a1b      	lsrs	r3, r3, #8
 800328a:	f003 0307 	and.w	r3, r3, #7
}
 800328e:	4618      	mov	r0, r3
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	e000ed00 	.word	0xe000ed00

0800329c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	db0b      	blt.n	80032c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	f003 021f 	and.w	r2, r3, #31
 80032b4:	4907      	ldr	r1, [pc, #28]	; (80032d4 <__NVIC_EnableIRQ+0x38>)
 80032b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	2001      	movs	r0, #1
 80032be:	fa00 f202 	lsl.w	r2, r0, r2
 80032c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	e000e100 	.word	0xe000e100

080032d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	6039      	str	r1, [r7, #0]
 80032e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	db0a      	blt.n	8003302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	490c      	ldr	r1, [pc, #48]	; (8003324 <__NVIC_SetPriority+0x4c>)
 80032f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f6:	0112      	lsls	r2, r2, #4
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	440b      	add	r3, r1
 80032fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003300:	e00a      	b.n	8003318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	b2da      	uxtb	r2, r3
 8003306:	4908      	ldr	r1, [pc, #32]	; (8003328 <__NVIC_SetPriority+0x50>)
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	3b04      	subs	r3, #4
 8003310:	0112      	lsls	r2, r2, #4
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	440b      	add	r3, r1
 8003316:	761a      	strb	r2, [r3, #24]
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	e000e100 	.word	0xe000e100
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800332c:	b480      	push	{r7}
 800332e:	b089      	sub	sp, #36	; 0x24
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f1c3 0307 	rsb	r3, r3, #7
 8003346:	2b04      	cmp	r3, #4
 8003348:	bf28      	it	cs
 800334a:	2304      	movcs	r3, #4
 800334c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	3304      	adds	r3, #4
 8003352:	2b06      	cmp	r3, #6
 8003354:	d902      	bls.n	800335c <NVIC_EncodePriority+0x30>
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	3b03      	subs	r3, #3
 800335a:	e000      	b.n	800335e <NVIC_EncodePriority+0x32>
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003360:	f04f 32ff 	mov.w	r2, #4294967295
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43da      	mvns	r2, r3
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	401a      	ands	r2, r3
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003374:	f04f 31ff 	mov.w	r1, #4294967295
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	fa01 f303 	lsl.w	r3, r1, r3
 800337e:	43d9      	mvns	r1, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003384:	4313      	orrs	r3, r2
         );
}
 8003386:	4618      	mov	r0, r3
 8003388:	3724      	adds	r7, #36	; 0x24
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff ff4c 	bl	8003238 <__NVIC_SetPriorityGrouping>
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033ba:	f7ff ff61 	bl	8003280 <__NVIC_GetPriorityGrouping>
 80033be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	68b9      	ldr	r1, [r7, #8]
 80033c4:	6978      	ldr	r0, [r7, #20]
 80033c6:	f7ff ffb1 	bl	800332c <NVIC_EncodePriority>
 80033ca:	4602      	mov	r2, r0
 80033cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033d0:	4611      	mov	r1, r2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff ff80 	bl	80032d8 <__NVIC_SetPriority>
}
 80033d8:	bf00      	nop
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff ff54 	bl	800329c <__NVIC_EnableIRQ>
}
 80033f4:	bf00      	nop
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003408:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800340a:	f7ff f871 	bl	80024f0 <HAL_GetTick>
 800340e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d008      	beq.n	800342e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2280      	movs	r2, #128	; 0x80
 8003420:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e052      	b.n	80034d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0216 	bic.w	r2, r2, #22
 800343c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695a      	ldr	r2, [r3, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800344c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	d103      	bne.n	800345e <HAL_DMA_Abort+0x62>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800345a:	2b00      	cmp	r3, #0
 800345c:	d007      	beq.n	800346e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0208 	bic.w	r2, r2, #8
 800346c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0201 	bic.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800347e:	e013      	b.n	80034a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003480:	f7ff f836 	bl	80024f0 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b05      	cmp	r3, #5
 800348c:	d90c      	bls.n	80034a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2220      	movs	r2, #32
 8003492:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2203      	movs	r2, #3
 8003498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e015      	b.n	80034d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1e4      	bne.n	8003480 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ba:	223f      	movs	r2, #63	; 0x3f
 80034bc:	409a      	lsls	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d004      	beq.n	80034fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2280      	movs	r2, #128	; 0x80
 80034f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e00c      	b.n	8003514 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2205      	movs	r2, #5
 80034fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0201 	bic.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003520:	b480      	push	{r7}
 8003522:	b089      	sub	sp, #36	; 0x24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800352a:	2300      	movs	r3, #0
 800352c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800352e:	2300      	movs	r3, #0
 8003530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003532:	2300      	movs	r3, #0
 8003534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003536:	2300      	movs	r3, #0
 8003538:	61fb      	str	r3, [r7, #28]
 800353a:	e165      	b.n	8003808 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800353c:	2201      	movs	r2, #1
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4013      	ands	r3, r2
 800354e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	429a      	cmp	r2, r3
 8003556:	f040 8154 	bne.w	8003802 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	2b01      	cmp	r3, #1
 8003564:	d005      	beq.n	8003572 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800356e:	2b02      	cmp	r3, #2
 8003570:	d130      	bne.n	80035d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	2203      	movs	r2, #3
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43db      	mvns	r3, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4013      	ands	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4313      	orrs	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035a8:	2201      	movs	r2, #1
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	f003 0201 	and.w	r2, r3, #1
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 0303 	and.w	r3, r3, #3
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d017      	beq.n	8003610 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	2203      	movs	r2, #3
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4013      	ands	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4313      	orrs	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d123      	bne.n	8003664 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	08da      	lsrs	r2, r3, #3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3208      	adds	r2, #8
 8003624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003628:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	220f      	movs	r2, #15
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4313      	orrs	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	08da      	lsrs	r2, r3, #3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3208      	adds	r2, #8
 800365e:	69b9      	ldr	r1, [r7, #24]
 8003660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	2203      	movs	r2, #3
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	43db      	mvns	r3, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4013      	ands	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 0203 	and.w	r2, r3, #3
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80ae 	beq.w	8003802 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	4b5d      	ldr	r3, [pc, #372]	; (8003820 <HAL_GPIO_Init+0x300>)
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	4a5c      	ldr	r2, [pc, #368]	; (8003820 <HAL_GPIO_Init+0x300>)
 80036b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036b4:	6453      	str	r3, [r2, #68]	; 0x44
 80036b6:	4b5a      	ldr	r3, [pc, #360]	; (8003820 <HAL_GPIO_Init+0x300>)
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036c2:	4a58      	ldr	r2, [pc, #352]	; (8003824 <HAL_GPIO_Init+0x304>)
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	089b      	lsrs	r3, r3, #2
 80036c8:	3302      	adds	r3, #2
 80036ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	220f      	movs	r2, #15
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43db      	mvns	r3, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4013      	ands	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a4f      	ldr	r2, [pc, #316]	; (8003828 <HAL_GPIO_Init+0x308>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d025      	beq.n	800373a <HAL_GPIO_Init+0x21a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a4e      	ldr	r2, [pc, #312]	; (800382c <HAL_GPIO_Init+0x30c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d01f      	beq.n	8003736 <HAL_GPIO_Init+0x216>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a4d      	ldr	r2, [pc, #308]	; (8003830 <HAL_GPIO_Init+0x310>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d019      	beq.n	8003732 <HAL_GPIO_Init+0x212>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a4c      	ldr	r2, [pc, #304]	; (8003834 <HAL_GPIO_Init+0x314>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d013      	beq.n	800372e <HAL_GPIO_Init+0x20e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a4b      	ldr	r2, [pc, #300]	; (8003838 <HAL_GPIO_Init+0x318>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00d      	beq.n	800372a <HAL_GPIO_Init+0x20a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a4a      	ldr	r2, [pc, #296]	; (800383c <HAL_GPIO_Init+0x31c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d007      	beq.n	8003726 <HAL_GPIO_Init+0x206>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a49      	ldr	r2, [pc, #292]	; (8003840 <HAL_GPIO_Init+0x320>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d101      	bne.n	8003722 <HAL_GPIO_Init+0x202>
 800371e:	2306      	movs	r3, #6
 8003720:	e00c      	b.n	800373c <HAL_GPIO_Init+0x21c>
 8003722:	2307      	movs	r3, #7
 8003724:	e00a      	b.n	800373c <HAL_GPIO_Init+0x21c>
 8003726:	2305      	movs	r3, #5
 8003728:	e008      	b.n	800373c <HAL_GPIO_Init+0x21c>
 800372a:	2304      	movs	r3, #4
 800372c:	e006      	b.n	800373c <HAL_GPIO_Init+0x21c>
 800372e:	2303      	movs	r3, #3
 8003730:	e004      	b.n	800373c <HAL_GPIO_Init+0x21c>
 8003732:	2302      	movs	r3, #2
 8003734:	e002      	b.n	800373c <HAL_GPIO_Init+0x21c>
 8003736:	2301      	movs	r3, #1
 8003738:	e000      	b.n	800373c <HAL_GPIO_Init+0x21c>
 800373a:	2300      	movs	r3, #0
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	f002 0203 	and.w	r2, r2, #3
 8003742:	0092      	lsls	r2, r2, #2
 8003744:	4093      	lsls	r3, r2
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4313      	orrs	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800374c:	4935      	ldr	r1, [pc, #212]	; (8003824 <HAL_GPIO_Init+0x304>)
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	089b      	lsrs	r3, r3, #2
 8003752:	3302      	adds	r3, #2
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800375a:	4b3a      	ldr	r3, [pc, #232]	; (8003844 <HAL_GPIO_Init+0x324>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	43db      	mvns	r3, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4013      	ands	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	4313      	orrs	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800377e:	4a31      	ldr	r2, [pc, #196]	; (8003844 <HAL_GPIO_Init+0x324>)
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003784:	4b2f      	ldr	r3, [pc, #188]	; (8003844 <HAL_GPIO_Init+0x324>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	43db      	mvns	r3, r3
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	4013      	ands	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037a8:	4a26      	ldr	r2, [pc, #152]	; (8003844 <HAL_GPIO_Init+0x324>)
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037ae:	4b25      	ldr	r3, [pc, #148]	; (8003844 <HAL_GPIO_Init+0x324>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	43db      	mvns	r3, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4013      	ands	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037d2:	4a1c      	ldr	r2, [pc, #112]	; (8003844 <HAL_GPIO_Init+0x324>)
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037d8:	4b1a      	ldr	r3, [pc, #104]	; (8003844 <HAL_GPIO_Init+0x324>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	43db      	mvns	r3, r3
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4013      	ands	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037fc:	4a11      	ldr	r2, [pc, #68]	; (8003844 <HAL_GPIO_Init+0x324>)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	3301      	adds	r3, #1
 8003806:	61fb      	str	r3, [r7, #28]
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	2b0f      	cmp	r3, #15
 800380c:	f67f ae96 	bls.w	800353c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003810:	bf00      	nop
 8003812:	bf00      	nop
 8003814:	3724      	adds	r7, #36	; 0x24
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40023800 	.word	0x40023800
 8003824:	40013800 	.word	0x40013800
 8003828:	40020000 	.word	0x40020000
 800382c:	40020400 	.word	0x40020400
 8003830:	40020800 	.word	0x40020800
 8003834:	40020c00 	.word	0x40020c00
 8003838:	40021000 	.word	0x40021000
 800383c:	40021400 	.word	0x40021400
 8003840:	40021800 	.word	0x40021800
 8003844:	40013c00 	.word	0x40013c00

08003848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	460b      	mov	r3, r1
 8003852:	807b      	strh	r3, [r7, #2]
 8003854:	4613      	mov	r3, r2
 8003856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003858:	787b      	ldrb	r3, [r7, #1]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800385e:	887a      	ldrh	r2, [r7, #2]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003864:	e003      	b.n	800386e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003866:	887b      	ldrh	r3, [r7, #2]
 8003868:	041a      	lsls	r2, r3, #16
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	619a      	str	r2, [r3, #24]
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
	...

0800387c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0cc      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003890:	4b68      	ldr	r3, [pc, #416]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 030f 	and.w	r3, r3, #15
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d90c      	bls.n	80038b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389e:	4b65      	ldr	r3, [pc, #404]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a6:	4b63      	ldr	r3, [pc, #396]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0b8      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d020      	beq.n	8003906 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d0:	4b59      	ldr	r3, [pc, #356]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	4a58      	ldr	r2, [pc, #352]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038e8:	4b53      	ldr	r3, [pc, #332]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4a52      	ldr	r2, [pc, #328]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f4:	4b50      	ldr	r3, [pc, #320]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	494d      	ldr	r1, [pc, #308]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	4313      	orrs	r3, r2
 8003904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d044      	beq.n	800399c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d107      	bne.n	800392a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	4b47      	ldr	r3, [pc, #284]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d119      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e07f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d003      	beq.n	800393a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003936:	2b03      	cmp	r3, #3
 8003938:	d107      	bne.n	800394a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393a:	4b3f      	ldr	r3, [pc, #252]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d109      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e06f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394a:	4b3b      	ldr	r3, [pc, #236]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e067      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800395a:	4b37      	ldr	r3, [pc, #220]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f023 0203 	bic.w	r2, r3, #3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4934      	ldr	r1, [pc, #208]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	4313      	orrs	r3, r2
 800396a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800396c:	f7fe fdc0 	bl	80024f0 <HAL_GetTick>
 8003970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003972:	e00a      	b.n	800398a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003974:	f7fe fdbc 	bl	80024f0 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e04f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398a:	4b2b      	ldr	r3, [pc, #172]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 020c 	and.w	r2, r3, #12
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	429a      	cmp	r2, r3
 800399a:	d1eb      	bne.n	8003974 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800399c:	4b25      	ldr	r3, [pc, #148]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d20c      	bcs.n	80039c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039aa:	4b22      	ldr	r3, [pc, #136]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b20      	ldr	r3, [pc, #128]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e032      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d0:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	4916      	ldr	r1, [pc, #88]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ee:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	490e      	ldr	r1, [pc, #56]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a02:	f000 f887 	bl	8003b14 <HAL_RCC_GetSysClockFreq>
 8003a06:	4602      	mov	r2, r0
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	091b      	lsrs	r3, r3, #4
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	490a      	ldr	r1, [pc, #40]	; (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 8003a14:	5ccb      	ldrb	r3, [r1, r3]
 8003a16:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1a:	4a09      	ldr	r2, [pc, #36]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a1e:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe fb2a 	bl	800207c <HAL_InitTick>

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40023c00 	.word	0x40023c00
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	08008054 	.word	0x08008054
 8003a40:	20000058 	.word	0x20000058
 8003a44:	2000005c 	.word	0x2000005c

08003a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a4c:	4b03      	ldr	r3, [pc, #12]	; (8003a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	20000058 	.word	0x20000058

08003a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a64:	f7ff fff0 	bl	8003a48 <HAL_RCC_GetHCLKFreq>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	0a9b      	lsrs	r3, r3, #10
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	4903      	ldr	r1, [pc, #12]	; (8003a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a76:	5ccb      	ldrb	r3, [r1, r3]
 8003a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40023800 	.word	0x40023800
 8003a84:	08008064 	.word	0x08008064

08003a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a8c:	f7ff ffdc 	bl	8003a48 <HAL_RCC_GetHCLKFreq>
 8003a90:	4602      	mov	r2, r0
 8003a92:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	0b5b      	lsrs	r3, r3, #13
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	4903      	ldr	r1, [pc, #12]	; (8003aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a9e:	5ccb      	ldrb	r3, [r1, r3]
 8003aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	08008064 	.word	0x08008064

08003ab0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	220f      	movs	r2, #15
 8003abe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ac0:	4b12      	ldr	r3, [pc, #72]	; (8003b0c <HAL_RCC_GetClockConfig+0x5c>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 0203 	and.w	r2, r3, #3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003acc:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <HAL_RCC_GetClockConfig+0x5c>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <HAL_RCC_GetClockConfig+0x5c>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ae4:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <HAL_RCC_GetClockConfig+0x5c>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	08db      	lsrs	r3, r3, #3
 8003aea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003af2:	4b07      	ldr	r3, [pc, #28]	; (8003b10 <HAL_RCC_GetClockConfig+0x60>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 020f 	and.w	r2, r3, #15
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	601a      	str	r2, [r3, #0]
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	40023c00 	.word	0x40023c00

08003b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b18:	b0ae      	sub	sp, #184	; 0xb8
 8003b1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b3a:	4bcb      	ldr	r3, [pc, #812]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
 8003b42:	2b0c      	cmp	r3, #12
 8003b44:	f200 8206 	bhi.w	8003f54 <HAL_RCC_GetSysClockFreq+0x440>
 8003b48:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4e:	bf00      	nop
 8003b50:	08003b85 	.word	0x08003b85
 8003b54:	08003f55 	.word	0x08003f55
 8003b58:	08003f55 	.word	0x08003f55
 8003b5c:	08003f55 	.word	0x08003f55
 8003b60:	08003b8d 	.word	0x08003b8d
 8003b64:	08003f55 	.word	0x08003f55
 8003b68:	08003f55 	.word	0x08003f55
 8003b6c:	08003f55 	.word	0x08003f55
 8003b70:	08003b95 	.word	0x08003b95
 8003b74:	08003f55 	.word	0x08003f55
 8003b78:	08003f55 	.word	0x08003f55
 8003b7c:	08003f55 	.word	0x08003f55
 8003b80:	08003d85 	.word	0x08003d85
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b84:	4bb9      	ldr	r3, [pc, #740]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x358>)
 8003b86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003b8a:	e1e7      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b8c:	4bb8      	ldr	r3, [pc, #736]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b92:	e1e3      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b94:	4bb4      	ldr	r3, [pc, #720]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ba0:	4bb1      	ldr	r3, [pc, #708]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d071      	beq.n	8003c90 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bac:	4bae      	ldr	r3, [pc, #696]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	099b      	lsrs	r3, r3, #6
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bb8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003bbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003bce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003bd2:	4622      	mov	r2, r4
 8003bd4:	462b      	mov	r3, r5
 8003bd6:	f04f 0000 	mov.w	r0, #0
 8003bda:	f04f 0100 	mov.w	r1, #0
 8003bde:	0159      	lsls	r1, r3, #5
 8003be0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003be4:	0150      	lsls	r0, r2, #5
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	4621      	mov	r1, r4
 8003bec:	1a51      	subs	r1, r2, r1
 8003bee:	6439      	str	r1, [r7, #64]	; 0x40
 8003bf0:	4629      	mov	r1, r5
 8003bf2:	eb63 0301 	sbc.w	r3, r3, r1
 8003bf6:	647b      	str	r3, [r7, #68]	; 0x44
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003c04:	4649      	mov	r1, r9
 8003c06:	018b      	lsls	r3, r1, #6
 8003c08:	4641      	mov	r1, r8
 8003c0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c0e:	4641      	mov	r1, r8
 8003c10:	018a      	lsls	r2, r1, #6
 8003c12:	4641      	mov	r1, r8
 8003c14:	1a51      	subs	r1, r2, r1
 8003c16:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c18:	4649      	mov	r1, r9
 8003c1a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003c2c:	4649      	mov	r1, r9
 8003c2e:	00cb      	lsls	r3, r1, #3
 8003c30:	4641      	mov	r1, r8
 8003c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c36:	4641      	mov	r1, r8
 8003c38:	00ca      	lsls	r2, r1, #3
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4603      	mov	r3, r0
 8003c40:	4622      	mov	r2, r4
 8003c42:	189b      	adds	r3, r3, r2
 8003c44:	633b      	str	r3, [r7, #48]	; 0x30
 8003c46:	462b      	mov	r3, r5
 8003c48:	460a      	mov	r2, r1
 8003c4a:	eb42 0303 	adc.w	r3, r2, r3
 8003c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c5c:	4629      	mov	r1, r5
 8003c5e:	024b      	lsls	r3, r1, #9
 8003c60:	4621      	mov	r1, r4
 8003c62:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c66:	4621      	mov	r1, r4
 8003c68:	024a      	lsls	r2, r1, #9
 8003c6a:	4610      	mov	r0, r2
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c7c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003c80:	f7fc fb1e 	bl	80002c0 <__aeabi_uldivmod>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4613      	mov	r3, r2
 8003c8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c8e:	e067      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c90:	4b75      	ldr	r3, [pc, #468]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	099b      	lsrs	r3, r3, #6
 8003c96:	2200      	movs	r2, #0
 8003c98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c9c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003ca0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003caa:	2300      	movs	r3, #0
 8003cac:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003cae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003cb2:	4622      	mov	r2, r4
 8003cb4:	462b      	mov	r3, r5
 8003cb6:	f04f 0000 	mov.w	r0, #0
 8003cba:	f04f 0100 	mov.w	r1, #0
 8003cbe:	0159      	lsls	r1, r3, #5
 8003cc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cc4:	0150      	lsls	r0, r2, #5
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4621      	mov	r1, r4
 8003ccc:	1a51      	subs	r1, r2, r1
 8003cce:	62b9      	str	r1, [r7, #40]	; 0x28
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	eb63 0301 	sbc.w	r3, r3, r1
 8003cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003ce4:	4649      	mov	r1, r9
 8003ce6:	018b      	lsls	r3, r1, #6
 8003ce8:	4641      	mov	r1, r8
 8003cea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cee:	4641      	mov	r1, r8
 8003cf0:	018a      	lsls	r2, r1, #6
 8003cf2:	4641      	mov	r1, r8
 8003cf4:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cf8:	4649      	mov	r1, r9
 8003cfa:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d0a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d12:	4692      	mov	sl, r2
 8003d14:	469b      	mov	fp, r3
 8003d16:	4623      	mov	r3, r4
 8003d18:	eb1a 0303 	adds.w	r3, sl, r3
 8003d1c:	623b      	str	r3, [r7, #32]
 8003d1e:	462b      	mov	r3, r5
 8003d20:	eb4b 0303 	adc.w	r3, fp, r3
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003d32:	4629      	mov	r1, r5
 8003d34:	028b      	lsls	r3, r1, #10
 8003d36:	4621      	mov	r1, r4
 8003d38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	028a      	lsls	r2, r1, #10
 8003d40:	4610      	mov	r0, r2
 8003d42:	4619      	mov	r1, r3
 8003d44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d48:	2200      	movs	r2, #0
 8003d4a:	673b      	str	r3, [r7, #112]	; 0x70
 8003d4c:	677a      	str	r2, [r7, #116]	; 0x74
 8003d4e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003d52:	f7fc fab5 	bl	80002c0 <__aeabi_uldivmod>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d60:	4b41      	ldr	r3, [pc, #260]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	0c1b      	lsrs	r3, r3, #16
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003d72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d82:	e0eb      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d84:	4b38      	ldr	r3, [pc, #224]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d90:	4b35      	ldr	r3, [pc, #212]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d06b      	beq.n	8003e74 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d9c:	4b32      	ldr	r3, [pc, #200]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	099b      	lsrs	r3, r3, #6
 8003da2:	2200      	movs	r2, #0
 8003da4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003da6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003da8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dae:	663b      	str	r3, [r7, #96]	; 0x60
 8003db0:	2300      	movs	r3, #0
 8003db2:	667b      	str	r3, [r7, #100]	; 0x64
 8003db4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003db8:	4622      	mov	r2, r4
 8003dba:	462b      	mov	r3, r5
 8003dbc:	f04f 0000 	mov.w	r0, #0
 8003dc0:	f04f 0100 	mov.w	r1, #0
 8003dc4:	0159      	lsls	r1, r3, #5
 8003dc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dca:	0150      	lsls	r0, r2, #5
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4621      	mov	r1, r4
 8003dd2:	1a51      	subs	r1, r2, r1
 8003dd4:	61b9      	str	r1, [r7, #24]
 8003dd6:	4629      	mov	r1, r5
 8003dd8:	eb63 0301 	sbc.w	r3, r3, r1
 8003ddc:	61fb      	str	r3, [r7, #28]
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003dea:	4659      	mov	r1, fp
 8003dec:	018b      	lsls	r3, r1, #6
 8003dee:	4651      	mov	r1, sl
 8003df0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003df4:	4651      	mov	r1, sl
 8003df6:	018a      	lsls	r2, r1, #6
 8003df8:	4651      	mov	r1, sl
 8003dfa:	ebb2 0801 	subs.w	r8, r2, r1
 8003dfe:	4659      	mov	r1, fp
 8003e00:	eb63 0901 	sbc.w	r9, r3, r1
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e10:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e14:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e18:	4690      	mov	r8, r2
 8003e1a:	4699      	mov	r9, r3
 8003e1c:	4623      	mov	r3, r4
 8003e1e:	eb18 0303 	adds.w	r3, r8, r3
 8003e22:	613b      	str	r3, [r7, #16]
 8003e24:	462b      	mov	r3, r5
 8003e26:	eb49 0303 	adc.w	r3, r9, r3
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003e38:	4629      	mov	r1, r5
 8003e3a:	024b      	lsls	r3, r1, #9
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e42:	4621      	mov	r1, r4
 8003e44:	024a      	lsls	r2, r1, #9
 8003e46:	4610      	mov	r0, r2
 8003e48:	4619      	mov	r1, r3
 8003e4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e4e:	2200      	movs	r2, #0
 8003e50:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e52:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e58:	f7fc fa32 	bl	80002c0 <__aeabi_uldivmod>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4613      	mov	r3, r2
 8003e62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e66:	e065      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x420>
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	00f42400 	.word	0x00f42400
 8003e70:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e74:	4b3d      	ldr	r3, [pc, #244]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x458>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	099b      	lsrs	r3, r3, #6
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	4611      	mov	r1, r2
 8003e80:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e84:	653b      	str	r3, [r7, #80]	; 0x50
 8003e86:	2300      	movs	r3, #0
 8003e88:	657b      	str	r3, [r7, #84]	; 0x54
 8003e8a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003e8e:	4642      	mov	r2, r8
 8003e90:	464b      	mov	r3, r9
 8003e92:	f04f 0000 	mov.w	r0, #0
 8003e96:	f04f 0100 	mov.w	r1, #0
 8003e9a:	0159      	lsls	r1, r3, #5
 8003e9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ea0:	0150      	lsls	r0, r2, #5
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4641      	mov	r1, r8
 8003ea8:	1a51      	subs	r1, r2, r1
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	4649      	mov	r1, r9
 8003eae:	eb63 0301 	sbc.w	r3, r3, r1
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	f04f 0300 	mov.w	r3, #0
 8003ebc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003ec0:	4659      	mov	r1, fp
 8003ec2:	018b      	lsls	r3, r1, #6
 8003ec4:	4651      	mov	r1, sl
 8003ec6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eca:	4651      	mov	r1, sl
 8003ecc:	018a      	lsls	r2, r1, #6
 8003ece:	4651      	mov	r1, sl
 8003ed0:	1a54      	subs	r4, r2, r1
 8003ed2:	4659      	mov	r1, fp
 8003ed4:	eb63 0501 	sbc.w	r5, r3, r1
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	00eb      	lsls	r3, r5, #3
 8003ee2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ee6:	00e2      	lsls	r2, r4, #3
 8003ee8:	4614      	mov	r4, r2
 8003eea:	461d      	mov	r5, r3
 8003eec:	4643      	mov	r3, r8
 8003eee:	18e3      	adds	r3, r4, r3
 8003ef0:	603b      	str	r3, [r7, #0]
 8003ef2:	464b      	mov	r3, r9
 8003ef4:	eb45 0303 	adc.w	r3, r5, r3
 8003ef8:	607b      	str	r3, [r7, #4]
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f06:	4629      	mov	r1, r5
 8003f08:	028b      	lsls	r3, r1, #10
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f10:	4621      	mov	r1, r4
 8003f12:	028a      	lsls	r2, r1, #10
 8003f14:	4610      	mov	r0, r2
 8003f16:	4619      	mov	r1, r3
 8003f18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f20:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003f22:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f26:	f7fc f9cb 	bl	80002c0 <__aeabi_uldivmod>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	4613      	mov	r3, r2
 8003f30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f34:	4b0d      	ldr	r3, [pc, #52]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x458>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	0f1b      	lsrs	r3, r3, #28
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003f42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f52:	e003      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f54:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003f56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	37b8      	adds	r7, #184	; 0xb8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	00f42400 	.word	0x00f42400

08003f74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e28d      	b.n	80044a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 8083 	beq.w	800409a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f94:	4b94      	ldr	r3, [pc, #592]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 030c 	and.w	r3, r3, #12
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d019      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003fa0:	4b91      	ldr	r3, [pc, #580]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d106      	bne.n	8003fba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003fac:	4b8e      	ldr	r3, [pc, #568]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fb8:	d00c      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fba:	4b8b      	ldr	r3, [pc, #556]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003fc2:	2b0c      	cmp	r3, #12
 8003fc4:	d112      	bne.n	8003fec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fc6:	4b88      	ldr	r3, [pc, #544]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fd2:	d10b      	bne.n	8003fec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd4:	4b84      	ldr	r3, [pc, #528]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d05b      	beq.n	8004098 <HAL_RCC_OscConfig+0x124>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d157      	bne.n	8004098 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e25a      	b.n	80044a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff4:	d106      	bne.n	8004004 <HAL_RCC_OscConfig+0x90>
 8003ff6:	4b7c      	ldr	r3, [pc, #496]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a7b      	ldr	r2, [pc, #492]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 8003ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	e01d      	b.n	8004040 <HAL_RCC_OscConfig+0xcc>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800400c:	d10c      	bne.n	8004028 <HAL_RCC_OscConfig+0xb4>
 800400e:	4b76      	ldr	r3, [pc, #472]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a75      	ldr	r2, [pc, #468]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 8004014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	4b73      	ldr	r3, [pc, #460]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a72      	ldr	r2, [pc, #456]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 8004020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	e00b      	b.n	8004040 <HAL_RCC_OscConfig+0xcc>
 8004028:	4b6f      	ldr	r3, [pc, #444]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a6e      	ldr	r2, [pc, #440]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 800402e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	4b6c      	ldr	r3, [pc, #432]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a6b      	ldr	r2, [pc, #428]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 800403a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800403e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d013      	beq.n	8004070 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004048:	f7fe fa52 	bl	80024f0 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004050:	f7fe fa4e 	bl	80024f0 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b64      	cmp	r3, #100	; 0x64
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e21f      	b.n	80044a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004062:	4b61      	ldr	r3, [pc, #388]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0f0      	beq.n	8004050 <HAL_RCC_OscConfig+0xdc>
 800406e:	e014      	b.n	800409a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004070:	f7fe fa3e 	bl	80024f0 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004078:	f7fe fa3a 	bl	80024f0 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b64      	cmp	r3, #100	; 0x64
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e20b      	b.n	80044a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800408a:	4b57      	ldr	r3, [pc, #348]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f0      	bne.n	8004078 <HAL_RCC_OscConfig+0x104>
 8004096:	e000      	b.n	800409a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d06f      	beq.n	8004186 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040a6:	4b50      	ldr	r3, [pc, #320]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 030c 	and.w	r3, r3, #12
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d017      	beq.n	80040e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040b2:	4b4d      	ldr	r3, [pc, #308]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040ba:	2b08      	cmp	r3, #8
 80040bc:	d105      	bne.n	80040ca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040be:	4b4a      	ldr	r3, [pc, #296]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00b      	beq.n	80040e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ca:	4b47      	ldr	r3, [pc, #284]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040d2:	2b0c      	cmp	r3, #12
 80040d4:	d11c      	bne.n	8004110 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040d6:	4b44      	ldr	r3, [pc, #272]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d116      	bne.n	8004110 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e2:	4b41      	ldr	r3, [pc, #260]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <HAL_RCC_OscConfig+0x186>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d001      	beq.n	80040fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e1d3      	b.n	80044a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fa:	4b3b      	ldr	r3, [pc, #236]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	4937      	ldr	r1, [pc, #220]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 800410a:	4313      	orrs	r3, r2
 800410c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800410e:	e03a      	b.n	8004186 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d020      	beq.n	800415a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004118:	4b34      	ldr	r3, [pc, #208]	; (80041ec <HAL_RCC_OscConfig+0x278>)
 800411a:	2201      	movs	r2, #1
 800411c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411e:	f7fe f9e7 	bl	80024f0 <HAL_GetTick>
 8004122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004124:	e008      	b.n	8004138 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004126:	f7fe f9e3 	bl	80024f0 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e1b4      	b.n	80044a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004138:	4b2b      	ldr	r3, [pc, #172]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0f0      	beq.n	8004126 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004144:	4b28      	ldr	r3, [pc, #160]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	4925      	ldr	r1, [pc, #148]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 8004154:	4313      	orrs	r3, r2
 8004156:	600b      	str	r3, [r1, #0]
 8004158:	e015      	b.n	8004186 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800415a:	4b24      	ldr	r3, [pc, #144]	; (80041ec <HAL_RCC_OscConfig+0x278>)
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004160:	f7fe f9c6 	bl	80024f0 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004168:	f7fe f9c2 	bl	80024f0 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e193      	b.n	80044a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417a:	4b1b      	ldr	r3, [pc, #108]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f0      	bne.n	8004168 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d036      	beq.n	8004200 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d016      	beq.n	80041c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800419a:	4b15      	ldr	r3, [pc, #84]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 800419c:	2201      	movs	r2, #1
 800419e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a0:	f7fe f9a6 	bl	80024f0 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041a8:	f7fe f9a2 	bl	80024f0 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e173      	b.n	80044a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ba:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 80041bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0f0      	beq.n	80041a8 <HAL_RCC_OscConfig+0x234>
 80041c6:	e01b      	b.n	8004200 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041c8:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ce:	f7fe f98f 	bl	80024f0 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d4:	e00e      	b.n	80041f4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041d6:	f7fe f98b 	bl	80024f0 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d907      	bls.n	80041f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e15c      	b.n	80044a2 <HAL_RCC_OscConfig+0x52e>
 80041e8:	40023800 	.word	0x40023800
 80041ec:	42470000 	.word	0x42470000
 80041f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f4:	4b8a      	ldr	r3, [pc, #552]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 80041f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1ea      	bne.n	80041d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8097 	beq.w	800433c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800420e:	2300      	movs	r3, #0
 8004210:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004212:	4b83      	ldr	r3, [pc, #524]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10f      	bne.n	800423e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800421e:	2300      	movs	r3, #0
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	4b7f      	ldr	r3, [pc, #508]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	4a7e      	ldr	r2, [pc, #504]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 8004228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800422c:	6413      	str	r3, [r2, #64]	; 0x40
 800422e:	4b7c      	ldr	r3, [pc, #496]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004236:	60bb      	str	r3, [r7, #8]
 8004238:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800423a:	2301      	movs	r3, #1
 800423c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423e:	4b79      	ldr	r3, [pc, #484]	; (8004424 <HAL_RCC_OscConfig+0x4b0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004246:	2b00      	cmp	r3, #0
 8004248:	d118      	bne.n	800427c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800424a:	4b76      	ldr	r3, [pc, #472]	; (8004424 <HAL_RCC_OscConfig+0x4b0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a75      	ldr	r2, [pc, #468]	; (8004424 <HAL_RCC_OscConfig+0x4b0>)
 8004250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004254:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004256:	f7fe f94b 	bl	80024f0 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800425e:	f7fe f947 	bl	80024f0 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e118      	b.n	80044a2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004270:	4b6c      	ldr	r3, [pc, #432]	; (8004424 <HAL_RCC_OscConfig+0x4b0>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0f0      	beq.n	800425e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d106      	bne.n	8004292 <HAL_RCC_OscConfig+0x31e>
 8004284:	4b66      	ldr	r3, [pc, #408]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 8004286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004288:	4a65      	ldr	r2, [pc, #404]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	6713      	str	r3, [r2, #112]	; 0x70
 8004290:	e01c      	b.n	80042cc <HAL_RCC_OscConfig+0x358>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2b05      	cmp	r3, #5
 8004298:	d10c      	bne.n	80042b4 <HAL_RCC_OscConfig+0x340>
 800429a:	4b61      	ldr	r3, [pc, #388]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 800429c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429e:	4a60      	ldr	r2, [pc, #384]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 80042a0:	f043 0304 	orr.w	r3, r3, #4
 80042a4:	6713      	str	r3, [r2, #112]	; 0x70
 80042a6:	4b5e      	ldr	r3, [pc, #376]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 80042a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042aa:	4a5d      	ldr	r2, [pc, #372]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 80042ac:	f043 0301 	orr.w	r3, r3, #1
 80042b0:	6713      	str	r3, [r2, #112]	; 0x70
 80042b2:	e00b      	b.n	80042cc <HAL_RCC_OscConfig+0x358>
 80042b4:	4b5a      	ldr	r3, [pc, #360]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 80042b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b8:	4a59      	ldr	r2, [pc, #356]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 80042ba:	f023 0301 	bic.w	r3, r3, #1
 80042be:	6713      	str	r3, [r2, #112]	; 0x70
 80042c0:	4b57      	ldr	r3, [pc, #348]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 80042c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c4:	4a56      	ldr	r2, [pc, #344]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 80042c6:	f023 0304 	bic.w	r3, r3, #4
 80042ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d015      	beq.n	8004300 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d4:	f7fe f90c 	bl	80024f0 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042da:	e00a      	b.n	80042f2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042dc:	f7fe f908 	bl	80024f0 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e0d7      	b.n	80044a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f2:	4b4b      	ldr	r3, [pc, #300]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0ee      	beq.n	80042dc <HAL_RCC_OscConfig+0x368>
 80042fe:	e014      	b.n	800432a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004300:	f7fe f8f6 	bl	80024f0 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004306:	e00a      	b.n	800431e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004308:	f7fe f8f2 	bl	80024f0 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	f241 3288 	movw	r2, #5000	; 0x1388
 8004316:	4293      	cmp	r3, r2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e0c1      	b.n	80044a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800431e:	4b40      	ldr	r3, [pc, #256]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 8004320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1ee      	bne.n	8004308 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800432a:	7dfb      	ldrb	r3, [r7, #23]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d105      	bne.n	800433c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004330:	4b3b      	ldr	r3, [pc, #236]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	4a3a      	ldr	r2, [pc, #232]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 8004336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800433a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80ad 	beq.w	80044a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004346:	4b36      	ldr	r3, [pc, #216]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 030c 	and.w	r3, r3, #12
 800434e:	2b08      	cmp	r3, #8
 8004350:	d060      	beq.n	8004414 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	2b02      	cmp	r3, #2
 8004358:	d145      	bne.n	80043e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435a:	4b33      	ldr	r3, [pc, #204]	; (8004428 <HAL_RCC_OscConfig+0x4b4>)
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004360:	f7fe f8c6 	bl	80024f0 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004368:	f7fe f8c2 	bl	80024f0 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e093      	b.n	80044a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437a:	4b29      	ldr	r3, [pc, #164]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69da      	ldr	r2, [r3, #28]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	019b      	lsls	r3, r3, #6
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439c:	085b      	lsrs	r3, r3, #1
 800439e:	3b01      	subs	r3, #1
 80043a0:	041b      	lsls	r3, r3, #16
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	061b      	lsls	r3, r3, #24
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	071b      	lsls	r3, r3, #28
 80043b2:	491b      	ldr	r1, [pc, #108]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043b8:	4b1b      	ldr	r3, [pc, #108]	; (8004428 <HAL_RCC_OscConfig+0x4b4>)
 80043ba:	2201      	movs	r2, #1
 80043bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043be:	f7fe f897 	bl	80024f0 <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c6:	f7fe f893 	bl	80024f0 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e064      	b.n	80044a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d8:	4b11      	ldr	r3, [pc, #68]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0f0      	beq.n	80043c6 <HAL_RCC_OscConfig+0x452>
 80043e4:	e05c      	b.n	80044a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e6:	4b10      	ldr	r3, [pc, #64]	; (8004428 <HAL_RCC_OscConfig+0x4b4>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ec:	f7fe f880 	bl	80024f0 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f4:	f7fe f87c 	bl	80024f0 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e04d      	b.n	80044a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004406:	4b06      	ldr	r3, [pc, #24]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f0      	bne.n	80043f4 <HAL_RCC_OscConfig+0x480>
 8004412:	e045      	b.n	80044a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d107      	bne.n	800442c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e040      	b.n	80044a2 <HAL_RCC_OscConfig+0x52e>
 8004420:	40023800 	.word	0x40023800
 8004424:	40007000 	.word	0x40007000
 8004428:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800442c:	4b1f      	ldr	r3, [pc, #124]	; (80044ac <HAL_RCC_OscConfig+0x538>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d030      	beq.n	800449c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004444:	429a      	cmp	r2, r3
 8004446:	d129      	bne.n	800449c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004452:	429a      	cmp	r2, r3
 8004454:	d122      	bne.n	800449c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800445c:	4013      	ands	r3, r2
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004462:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004464:	4293      	cmp	r3, r2
 8004466:	d119      	bne.n	800449c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004472:	085b      	lsrs	r3, r3, #1
 8004474:	3b01      	subs	r3, #1
 8004476:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004478:	429a      	cmp	r2, r3
 800447a:	d10f      	bne.n	800449c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004486:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004488:	429a      	cmp	r2, r3
 800448a:	d107      	bne.n	800449c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004496:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004498:	429a      	cmp	r2, r3
 800449a:	d001      	beq.n	80044a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e000      	b.n	80044a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40023800 	.word	0x40023800

080044b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e041      	b.n	8004546 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fd ff08 	bl	80022ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3304      	adds	r3, #4
 80044ec:	4619      	mov	r1, r3
 80044ee:	4610      	mov	r0, r2
 80044f0:	f000 f9ce 	bl	8004890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b01      	cmp	r3, #1
 8004562:	d001      	beq.n	8004568 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e04e      	b.n	8004606 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0201 	orr.w	r2, r2, #1
 800457e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a23      	ldr	r2, [pc, #140]	; (8004614 <HAL_TIM_Base_Start_IT+0xc4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d022      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x80>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004592:	d01d      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x80>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a1f      	ldr	r2, [pc, #124]	; (8004618 <HAL_TIM_Base_Start_IT+0xc8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d018      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x80>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a1e      	ldr	r2, [pc, #120]	; (800461c <HAL_TIM_Base_Start_IT+0xcc>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d013      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x80>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a1c      	ldr	r2, [pc, #112]	; (8004620 <HAL_TIM_Base_Start_IT+0xd0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00e      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x80>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a1b      	ldr	r2, [pc, #108]	; (8004624 <HAL_TIM_Base_Start_IT+0xd4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d009      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x80>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a19      	ldr	r2, [pc, #100]	; (8004628 <HAL_TIM_Base_Start_IT+0xd8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d004      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x80>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a18      	ldr	r2, [pc, #96]	; (800462c <HAL_TIM_Base_Start_IT+0xdc>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d111      	bne.n	80045f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b06      	cmp	r3, #6
 80045e0:	d010      	beq.n	8004604 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f042 0201 	orr.w	r2, r2, #1
 80045f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f2:	e007      	b.n	8004604 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40010000 	.word	0x40010000
 8004618:	40000400 	.word	0x40000400
 800461c:	40000800 	.word	0x40000800
 8004620:	40000c00 	.word	0x40000c00
 8004624:	40010400 	.word	0x40010400
 8004628:	40014000 	.word	0x40014000
 800462c:	40001800 	.word	0x40001800

08004630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b02      	cmp	r3, #2
 8004644:	d122      	bne.n	800468c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b02      	cmp	r3, #2
 8004652:	d11b      	bne.n	800468c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0202 	mvn.w	r2, #2
 800465c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f8ee 	bl	8004854 <HAL_TIM_IC_CaptureCallback>
 8004678:	e005      	b.n	8004686 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f8e0 	bl	8004840 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f8f1 	bl	8004868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b04      	cmp	r3, #4
 8004698:	d122      	bne.n	80046e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d11b      	bne.n	80046e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0204 	mvn.w	r2, #4
 80046b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f8c4 	bl	8004854 <HAL_TIM_IC_CaptureCallback>
 80046cc:	e005      	b.n	80046da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f8b6 	bl	8004840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f8c7 	bl	8004868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d122      	bne.n	8004734 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d11b      	bne.n	8004734 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f06f 0208 	mvn.w	r2, #8
 8004704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2204      	movs	r2, #4
 800470a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f89a 	bl	8004854 <HAL_TIM_IC_CaptureCallback>
 8004720:	e005      	b.n	800472e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f88c 	bl	8004840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f89d 	bl	8004868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	f003 0310 	and.w	r3, r3, #16
 800473e:	2b10      	cmp	r3, #16
 8004740:	d122      	bne.n	8004788 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f003 0310 	and.w	r3, r3, #16
 800474c:	2b10      	cmp	r3, #16
 800474e:	d11b      	bne.n	8004788 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f06f 0210 	mvn.w	r2, #16
 8004758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2208      	movs	r2, #8
 800475e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f870 	bl	8004854 <HAL_TIM_IC_CaptureCallback>
 8004774:	e005      	b.n	8004782 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f862 	bl	8004840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f873 	bl	8004868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b01      	cmp	r3, #1
 8004794:	d10e      	bne.n	80047b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d107      	bne.n	80047b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f06f 0201 	mvn.w	r2, #1
 80047ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fd fc20 	bl	8001ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047be:	2b80      	cmp	r3, #128	; 0x80
 80047c0:	d10e      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047cc:	2b80      	cmp	r3, #128	; 0x80
 80047ce:	d107      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f97e 	bl	8004adc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ea:	2b40      	cmp	r3, #64	; 0x40
 80047ec:	d10e      	bne.n	800480c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f8:	2b40      	cmp	r3, #64	; 0x40
 80047fa:	d107      	bne.n	800480c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f838 	bl	800487c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b20      	cmp	r3, #32
 8004818:	d10e      	bne.n	8004838 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b20      	cmp	r3, #32
 8004826:	d107      	bne.n	8004838 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f06f 0220 	mvn.w	r2, #32
 8004830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f948 	bl	8004ac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004838:	bf00      	nop
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a40      	ldr	r2, [pc, #256]	; (80049a4 <TIM_Base_SetConfig+0x114>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d013      	beq.n	80048d0 <TIM_Base_SetConfig+0x40>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ae:	d00f      	beq.n	80048d0 <TIM_Base_SetConfig+0x40>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a3d      	ldr	r2, [pc, #244]	; (80049a8 <TIM_Base_SetConfig+0x118>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00b      	beq.n	80048d0 <TIM_Base_SetConfig+0x40>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a3c      	ldr	r2, [pc, #240]	; (80049ac <TIM_Base_SetConfig+0x11c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d007      	beq.n	80048d0 <TIM_Base_SetConfig+0x40>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a3b      	ldr	r2, [pc, #236]	; (80049b0 <TIM_Base_SetConfig+0x120>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d003      	beq.n	80048d0 <TIM_Base_SetConfig+0x40>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a3a      	ldr	r2, [pc, #232]	; (80049b4 <TIM_Base_SetConfig+0x124>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d108      	bne.n	80048e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a2f      	ldr	r2, [pc, #188]	; (80049a4 <TIM_Base_SetConfig+0x114>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d02b      	beq.n	8004942 <TIM_Base_SetConfig+0xb2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f0:	d027      	beq.n	8004942 <TIM_Base_SetConfig+0xb2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a2c      	ldr	r2, [pc, #176]	; (80049a8 <TIM_Base_SetConfig+0x118>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d023      	beq.n	8004942 <TIM_Base_SetConfig+0xb2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a2b      	ldr	r2, [pc, #172]	; (80049ac <TIM_Base_SetConfig+0x11c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d01f      	beq.n	8004942 <TIM_Base_SetConfig+0xb2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a2a      	ldr	r2, [pc, #168]	; (80049b0 <TIM_Base_SetConfig+0x120>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d01b      	beq.n	8004942 <TIM_Base_SetConfig+0xb2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a29      	ldr	r2, [pc, #164]	; (80049b4 <TIM_Base_SetConfig+0x124>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d017      	beq.n	8004942 <TIM_Base_SetConfig+0xb2>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a28      	ldr	r2, [pc, #160]	; (80049b8 <TIM_Base_SetConfig+0x128>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d013      	beq.n	8004942 <TIM_Base_SetConfig+0xb2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a27      	ldr	r2, [pc, #156]	; (80049bc <TIM_Base_SetConfig+0x12c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00f      	beq.n	8004942 <TIM_Base_SetConfig+0xb2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a26      	ldr	r2, [pc, #152]	; (80049c0 <TIM_Base_SetConfig+0x130>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00b      	beq.n	8004942 <TIM_Base_SetConfig+0xb2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a25      	ldr	r2, [pc, #148]	; (80049c4 <TIM_Base_SetConfig+0x134>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d007      	beq.n	8004942 <TIM_Base_SetConfig+0xb2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a24      	ldr	r2, [pc, #144]	; (80049c8 <TIM_Base_SetConfig+0x138>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d003      	beq.n	8004942 <TIM_Base_SetConfig+0xb2>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a23      	ldr	r2, [pc, #140]	; (80049cc <TIM_Base_SetConfig+0x13c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d108      	bne.n	8004954 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	4313      	orrs	r3, r2
 8004952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a0a      	ldr	r2, [pc, #40]	; (80049a4 <TIM_Base_SetConfig+0x114>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d003      	beq.n	8004988 <TIM_Base_SetConfig+0xf8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a0c      	ldr	r2, [pc, #48]	; (80049b4 <TIM_Base_SetConfig+0x124>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d103      	bne.n	8004990 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	691a      	ldr	r2, [r3, #16]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	615a      	str	r2, [r3, #20]
}
 8004996:	bf00      	nop
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40010000 	.word	0x40010000
 80049a8:	40000400 	.word	0x40000400
 80049ac:	40000800 	.word	0x40000800
 80049b0:	40000c00 	.word	0x40000c00
 80049b4:	40010400 	.word	0x40010400
 80049b8:	40014000 	.word	0x40014000
 80049bc:	40014400 	.word	0x40014400
 80049c0:	40014800 	.word	0x40014800
 80049c4:	40001800 	.word	0x40001800
 80049c8:	40001c00 	.word	0x40001c00
 80049cc:	40002000 	.word	0x40002000

080049d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049e4:	2302      	movs	r3, #2
 80049e6:	e05a      	b.n	8004a9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a21      	ldr	r2, [pc, #132]	; (8004aac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d022      	beq.n	8004a72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a34:	d01d      	beq.n	8004a72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a1d      	ldr	r2, [pc, #116]	; (8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d018      	beq.n	8004a72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a1b      	ldr	r2, [pc, #108]	; (8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d013      	beq.n	8004a72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a1a      	ldr	r2, [pc, #104]	; (8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d00e      	beq.n	8004a72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a18      	ldr	r2, [pc, #96]	; (8004abc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d009      	beq.n	8004a72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a17      	ldr	r2, [pc, #92]	; (8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d004      	beq.n	8004a72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a15      	ldr	r2, [pc, #84]	; (8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d10c      	bne.n	8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40010000 	.word	0x40010000
 8004ab0:	40000400 	.word	0x40000400
 8004ab4:	40000800 	.word	0x40000800
 8004ab8:	40000c00 	.word	0x40000c00
 8004abc:	40010400 	.word	0x40010400
 8004ac0:	40014000 	.word	0x40014000
 8004ac4:	40001800 	.word	0x40001800

08004ac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e03f      	b.n	8004b82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fd fc3a 	bl	8002390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2224      	movs	r2, #36	; 0x24
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 fe81 	bl	800583c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695a      	ldr	r2, [r3, #20]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b08a      	sub	sp, #40	; 0x28
 8004b8e:	af02      	add	r7, sp, #8
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	603b      	str	r3, [r7, #0]
 8004b96:	4613      	mov	r3, r2
 8004b98:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b20      	cmp	r3, #32
 8004ba8:	d17c      	bne.n	8004ca4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <HAL_UART_Transmit+0x2c>
 8004bb0:	88fb      	ldrh	r3, [r7, #6]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e075      	b.n	8004ca6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d101      	bne.n	8004bc8 <HAL_UART_Transmit+0x3e>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	e06e      	b.n	8004ca6 <HAL_UART_Transmit+0x11c>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2221      	movs	r2, #33	; 0x21
 8004bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bde:	f7fd fc87 	bl	80024f0 <HAL_GetTick>
 8004be2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	88fa      	ldrh	r2, [r7, #6]
 8004be8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	88fa      	ldrh	r2, [r7, #6]
 8004bee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf8:	d108      	bne.n	8004c0c <HAL_UART_Transmit+0x82>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d104      	bne.n	8004c0c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	61bb      	str	r3, [r7, #24]
 8004c0a:	e003      	b.n	8004c14 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c10:	2300      	movs	r3, #0
 8004c12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c1c:	e02a      	b.n	8004c74 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2200      	movs	r2, #0
 8004c26:	2180      	movs	r1, #128	; 0x80
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 fbc1 	bl	80053b0 <UART_WaitOnFlagUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e036      	b.n	8004ca6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10b      	bne.n	8004c56 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	881b      	ldrh	r3, [r3, #0]
 8004c42:	461a      	mov	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	3302      	adds	r3, #2
 8004c52:	61bb      	str	r3, [r7, #24]
 8004c54:	e007      	b.n	8004c66 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	781a      	ldrb	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	3301      	adds	r3, #1
 8004c64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1cf      	bne.n	8004c1e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2200      	movs	r2, #0
 8004c86:	2140      	movs	r1, #64	; 0x40
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 fb91 	bl	80053b0 <UART_WaitOnFlagUntilTimeout>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e006      	b.n	8004ca6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	e000      	b.n	8004ca6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004ca4:	2302      	movs	r3, #2
  }
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3720      	adds	r7, #32
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b08a      	sub	sp, #40	; 0x28
 8004cb2:	af02      	add	r7, sp, #8
 8004cb4:	60f8      	str	r0, [r7, #12]
 8004cb6:	60b9      	str	r1, [r7, #8]
 8004cb8:	603b      	str	r3, [r7, #0]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b20      	cmp	r3, #32
 8004ccc:	f040 808c 	bne.w	8004de8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <HAL_UART_Receive+0x2e>
 8004cd6:	88fb      	ldrh	r3, [r7, #6]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e084      	b.n	8004dea <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d101      	bne.n	8004cee <HAL_UART_Receive+0x40>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e07d      	b.n	8004dea <HAL_UART_Receive+0x13c>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2222      	movs	r2, #34	; 0x22
 8004d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d0a:	f7fd fbf1 	bl	80024f0 <HAL_GetTick>
 8004d0e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	88fa      	ldrh	r2, [r7, #6]
 8004d14:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	88fa      	ldrh	r2, [r7, #6]
 8004d1a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d24:	d108      	bne.n	8004d38 <HAL_UART_Receive+0x8a>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d104      	bne.n	8004d38 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	61bb      	str	r3, [r7, #24]
 8004d36:	e003      	b.n	8004d40 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004d48:	e043      	b.n	8004dd2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2200      	movs	r2, #0
 8004d52:	2120      	movs	r1, #32
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 fb2b 	bl	80053b0 <UART_WaitOnFlagUntilTimeout>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e042      	b.n	8004dea <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10c      	bne.n	8004d84 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	3302      	adds	r3, #2
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	e01f      	b.n	8004dc4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d8c:	d007      	beq.n	8004d9e <HAL_UART_Receive+0xf0>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10a      	bne.n	8004dac <HAL_UART_Receive+0xfe>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d106      	bne.n	8004dac <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	e008      	b.n	8004dbe <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1b6      	bne.n	8004d4a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	e000      	b.n	8004dea <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004de8:	2302      	movs	r3, #2
  }
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3720      	adds	r7, #32
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b084      	sub	sp, #16
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	60f8      	str	r0, [r7, #12]
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b20      	cmp	r3, #32
 8004e0a:	d11d      	bne.n	8004e48 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <HAL_UART_Receive_IT+0x26>
 8004e12:	88fb      	ldrh	r3, [r7, #6]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e016      	b.n	8004e4a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <HAL_UART_Receive_IT+0x38>
 8004e26:	2302      	movs	r3, #2
 8004e28:	e00f      	b.n	8004e4a <HAL_UART_Receive_IT+0x58>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e38:	88fb      	ldrh	r3, [r7, #6]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	68b9      	ldr	r1, [r7, #8]
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 fb24 	bl	800548c <UART_Start_Receive_IT>
 8004e44:	4603      	mov	r3, r0
 8004e46:	e000      	b.n	8004e4a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004e48:	2302      	movs	r3, #2
  }
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
	...

08004e54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b0ba      	sub	sp, #232	; 0xe8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e8a:	f003 030f 	and.w	r3, r3, #15
 8004e8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004e92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10f      	bne.n	8004eba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e9e:	f003 0320 	and.w	r3, r3, #32
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d009      	beq.n	8004eba <HAL_UART_IRQHandler+0x66>
 8004ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eaa:	f003 0320 	and.w	r3, r3, #32
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 fc07 	bl	80056c6 <UART_Receive_IT>
      return;
 8004eb8:	e256      	b.n	8005368 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004eba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 80de 	beq.w	8005080 <HAL_UART_IRQHandler+0x22c>
 8004ec4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d106      	bne.n	8004ede <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ed4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 80d1 	beq.w	8005080 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00b      	beq.n	8004f02 <HAL_UART_IRQHandler+0xae>
 8004eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d005      	beq.n	8004f02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	f043 0201 	orr.w	r2, r3, #1
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f06:	f003 0304 	and.w	r3, r3, #4
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00b      	beq.n	8004f26 <HAL_UART_IRQHandler+0xd2>
 8004f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d005      	beq.n	8004f26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	f043 0202 	orr.w	r2, r3, #2
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00b      	beq.n	8004f4a <HAL_UART_IRQHandler+0xf6>
 8004f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d005      	beq.n	8004f4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f043 0204 	orr.w	r2, r3, #4
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f4e:	f003 0308 	and.w	r3, r3, #8
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d011      	beq.n	8004f7a <HAL_UART_IRQHandler+0x126>
 8004f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d105      	bne.n	8004f6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d005      	beq.n	8004f7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	f043 0208 	orr.w	r2, r3, #8
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 81ed 	beq.w	800535e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f88:	f003 0320 	and.w	r3, r3, #32
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d008      	beq.n	8004fa2 <HAL_UART_IRQHandler+0x14e>
 8004f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f94:	f003 0320 	and.w	r3, r3, #32
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 fb92 	bl	80056c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fac:	2b40      	cmp	r3, #64	; 0x40
 8004fae:	bf0c      	ite	eq
 8004fb0:	2301      	moveq	r3, #1
 8004fb2:	2300      	movne	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	f003 0308 	and.w	r3, r3, #8
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d103      	bne.n	8004fce <HAL_UART_IRQHandler+0x17a>
 8004fc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d04f      	beq.n	800506e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 fa9a 	bl	8005508 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fde:	2b40      	cmp	r3, #64	; 0x40
 8004fe0:	d141      	bne.n	8005066 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3314      	adds	r3, #20
 8004fe8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ff0:	e853 3f00 	ldrex	r3, [r3]
 8004ff4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	3314      	adds	r3, #20
 800500a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800500e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005012:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005016:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800501a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800501e:	e841 2300 	strex	r3, r2, [r1]
 8005022:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005026:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1d9      	bne.n	8004fe2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005032:	2b00      	cmp	r3, #0
 8005034:	d013      	beq.n	800505e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503a:	4a7d      	ldr	r2, [pc, #500]	; (8005230 <HAL_UART_IRQHandler+0x3dc>)
 800503c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	4618      	mov	r0, r3
 8005044:	f7fe fa4a 	bl	80034dc <HAL_DMA_Abort_IT>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d016      	beq.n	800507c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005058:	4610      	mov	r0, r2
 800505a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800505c:	e00e      	b.n	800507c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f990 	bl	8005384 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005064:	e00a      	b.n	800507c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f98c 	bl	8005384 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800506c:	e006      	b.n	800507c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f988 	bl	8005384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800507a:	e170      	b.n	800535e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800507c:	bf00      	nop
    return;
 800507e:	e16e      	b.n	800535e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005084:	2b01      	cmp	r3, #1
 8005086:	f040 814a 	bne.w	800531e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800508a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800508e:	f003 0310 	and.w	r3, r3, #16
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 8143 	beq.w	800531e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800509c:	f003 0310 	and.w	r3, r3, #16
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 813c 	beq.w	800531e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050a6:	2300      	movs	r3, #0
 80050a8:	60bb      	str	r3, [r7, #8]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	60bb      	str	r3, [r7, #8]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	60bb      	str	r3, [r7, #8]
 80050ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c6:	2b40      	cmp	r3, #64	; 0x40
 80050c8:	f040 80b4 	bne.w	8005234 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 8140 	beq.w	8005362 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050ea:	429a      	cmp	r2, r3
 80050ec:	f080 8139 	bcs.w	8005362 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005102:	f000 8088 	beq.w	8005216 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	330c      	adds	r3, #12
 800510c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005110:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800511c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005124:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	330c      	adds	r3, #12
 800512e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005132:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005136:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800513e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005142:	e841 2300 	strex	r3, r2, [r1]
 8005146:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800514a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1d9      	bne.n	8005106 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3314      	adds	r3, #20
 8005158:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800515c:	e853 3f00 	ldrex	r3, [r3]
 8005160:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005162:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005164:	f023 0301 	bic.w	r3, r3, #1
 8005168:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3314      	adds	r3, #20
 8005172:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005176:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800517a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800517e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005182:	e841 2300 	strex	r3, r2, [r1]
 8005186:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005188:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1e1      	bne.n	8005152 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3314      	adds	r3, #20
 8005194:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005196:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005198:	e853 3f00 	ldrex	r3, [r3]
 800519c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800519e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3314      	adds	r3, #20
 80051ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80051b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051ba:	e841 2300 	strex	r3, r2, [r1]
 80051be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1e3      	bne.n	800518e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2220      	movs	r2, #32
 80051ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	330c      	adds	r3, #12
 80051da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051de:	e853 3f00 	ldrex	r3, [r3]
 80051e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051e6:	f023 0310 	bic.w	r3, r3, #16
 80051ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	330c      	adds	r3, #12
 80051f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80051f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80051fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005200:	e841 2300 	strex	r3, r2, [r1]
 8005204:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1e3      	bne.n	80051d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	4618      	mov	r0, r3
 8005212:	f7fe f8f3 	bl	80033fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800521e:	b29b      	uxth	r3, r3
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	b29b      	uxth	r3, r3
 8005224:	4619      	mov	r1, r3
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f8b6 	bl	8005398 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800522c:	e099      	b.n	8005362 <HAL_UART_IRQHandler+0x50e>
 800522e:	bf00      	nop
 8005230:	080055cf 	.word	0x080055cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800523c:	b29b      	uxth	r3, r3
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 808b 	beq.w	8005366 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005250:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 8086 	beq.w	8005366 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	330c      	adds	r3, #12
 8005260:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005264:	e853 3f00 	ldrex	r3, [r3]
 8005268:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800526a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005270:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	330c      	adds	r3, #12
 800527a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800527e:	647a      	str	r2, [r7, #68]	; 0x44
 8005280:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005282:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005284:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800528c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1e3      	bne.n	800525a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3314      	adds	r3, #20
 8005298:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	623b      	str	r3, [r7, #32]
   return(result);
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	f023 0301 	bic.w	r3, r3, #1
 80052a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3314      	adds	r3, #20
 80052b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80052b6:	633a      	str	r2, [r7, #48]	; 0x30
 80052b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1e3      	bne.n	8005292 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	330c      	adds	r3, #12
 80052de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	e853 3f00 	ldrex	r3, [r3]
 80052e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 0310 	bic.w	r3, r3, #16
 80052ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	330c      	adds	r3, #12
 80052f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80052fc:	61fa      	str	r2, [r7, #28]
 80052fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	69b9      	ldr	r1, [r7, #24]
 8005302:	69fa      	ldr	r2, [r7, #28]
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	617b      	str	r3, [r7, #20]
   return(result);
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e3      	bne.n	80052d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005310:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005314:	4619      	mov	r1, r3
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f83e 	bl	8005398 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800531c:	e023      	b.n	8005366 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800531e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005326:	2b00      	cmp	r3, #0
 8005328:	d009      	beq.n	800533e <HAL_UART_IRQHandler+0x4ea>
 800532a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800532e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f95d 	bl	80055f6 <UART_Transmit_IT>
    return;
 800533c:	e014      	b.n	8005368 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800533e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00e      	beq.n	8005368 <HAL_UART_IRQHandler+0x514>
 800534a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800534e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005352:	2b00      	cmp	r3, #0
 8005354:	d008      	beq.n	8005368 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f99d 	bl	8005696 <UART_EndTransmit_IT>
    return;
 800535c:	e004      	b.n	8005368 <HAL_UART_IRQHandler+0x514>
    return;
 800535e:	bf00      	nop
 8005360:	e002      	b.n	8005368 <HAL_UART_IRQHandler+0x514>
      return;
 8005362:	bf00      	nop
 8005364:	e000      	b.n	8005368 <HAL_UART_IRQHandler+0x514>
      return;
 8005366:	bf00      	nop
  }
}
 8005368:	37e8      	adds	r7, #232	; 0xe8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop

08005370 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	460b      	mov	r3, r1
 80053a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b090      	sub	sp, #64	; 0x40
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	4613      	mov	r3, r2
 80053be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053c0:	e050      	b.n	8005464 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c8:	d04c      	beq.n	8005464 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80053ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d007      	beq.n	80053e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80053d0:	f7fd f88e 	bl	80024f0 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053dc:	429a      	cmp	r2, r3
 80053de:	d241      	bcs.n	8005464 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	330c      	adds	r3, #12
 80053e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ea:	e853 3f00 	ldrex	r3, [r3]
 80053ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	330c      	adds	r3, #12
 80053fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005400:	637a      	str	r2, [r7, #52]	; 0x34
 8005402:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800540e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e5      	bne.n	80053e0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3314      	adds	r3, #20
 800541a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	e853 3f00 	ldrex	r3, [r3]
 8005422:	613b      	str	r3, [r7, #16]
   return(result);
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	f023 0301 	bic.w	r3, r3, #1
 800542a:	63bb      	str	r3, [r7, #56]	; 0x38
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3314      	adds	r3, #20
 8005432:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005434:	623a      	str	r2, [r7, #32]
 8005436:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005438:	69f9      	ldr	r1, [r7, #28]
 800543a:	6a3a      	ldr	r2, [r7, #32]
 800543c:	e841 2300 	strex	r3, r2, [r1]
 8005440:	61bb      	str	r3, [r7, #24]
   return(result);
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1e5      	bne.n	8005414 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e00f      	b.n	8005484 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	4013      	ands	r3, r2
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	429a      	cmp	r2, r3
 8005472:	bf0c      	ite	eq
 8005474:	2301      	moveq	r3, #1
 8005476:	2300      	movne	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	461a      	mov	r2, r3
 800547c:	79fb      	ldrb	r3, [r7, #7]
 800547e:	429a      	cmp	r2, r3
 8005480:	d09f      	beq.n	80053c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3740      	adds	r7, #64	; 0x40
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	4613      	mov	r3, r2
 8005498:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	88fa      	ldrh	r2, [r7, #6]
 80054a4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	88fa      	ldrh	r2, [r7, #6]
 80054aa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2222      	movs	r2, #34	; 0x22
 80054b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d007      	beq.n	80054da <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054d8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695a      	ldr	r2, [r3, #20]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f042 0201 	orr.w	r2, r2, #1
 80054e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68da      	ldr	r2, [r3, #12]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f042 0220 	orr.w	r2, r2, #32
 80054f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005508:	b480      	push	{r7}
 800550a:	b095      	sub	sp, #84	; 0x54
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	330c      	adds	r3, #12
 8005516:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551a:	e853 3f00 	ldrex	r3, [r3]
 800551e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005522:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	330c      	adds	r3, #12
 800552e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005530:	643a      	str	r2, [r7, #64]	; 0x40
 8005532:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005534:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005536:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005538:	e841 2300 	strex	r3, r2, [r1]
 800553c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800553e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1e5      	bne.n	8005510 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3314      	adds	r3, #20
 800554a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	e853 3f00 	ldrex	r3, [r3]
 8005552:	61fb      	str	r3, [r7, #28]
   return(result);
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	f023 0301 	bic.w	r3, r3, #1
 800555a:	64bb      	str	r3, [r7, #72]	; 0x48
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	3314      	adds	r3, #20
 8005562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005564:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005566:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005568:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800556a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800556c:	e841 2300 	strex	r3, r2, [r1]
 8005570:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1e5      	bne.n	8005544 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557c:	2b01      	cmp	r3, #1
 800557e:	d119      	bne.n	80055b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	330c      	adds	r3, #12
 8005586:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	e853 3f00 	ldrex	r3, [r3]
 800558e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f023 0310 	bic.w	r3, r3, #16
 8005596:	647b      	str	r3, [r7, #68]	; 0x44
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	330c      	adds	r3, #12
 800559e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055a0:	61ba      	str	r2, [r7, #24]
 80055a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a4:	6979      	ldr	r1, [r7, #20]
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	e841 2300 	strex	r3, r2, [r1]
 80055ac:	613b      	str	r3, [r7, #16]
   return(result);
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1e5      	bne.n	8005580 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80055c2:	bf00      	nop
 80055c4:	3754      	adds	r7, #84	; 0x54
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b084      	sub	sp, #16
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f7ff fecb 	bl	8005384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ee:	bf00      	nop
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b085      	sub	sp, #20
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b21      	cmp	r3, #33	; 0x21
 8005608:	d13e      	bne.n	8005688 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005612:	d114      	bne.n	800563e <UART_Transmit_IT+0x48>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d110      	bne.n	800563e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	881b      	ldrh	r3, [r3, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005630:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	1c9a      	adds	r2, r3, #2
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	621a      	str	r2, [r3, #32]
 800563c:	e008      	b.n	8005650 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	1c59      	adds	r1, r3, #1
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6211      	str	r1, [r2, #32]
 8005648:	781a      	ldrb	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005654:	b29b      	uxth	r3, r3
 8005656:	3b01      	subs	r3, #1
 8005658:	b29b      	uxth	r3, r3
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	4619      	mov	r1, r3
 800565e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10f      	bne.n	8005684 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005672:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005682:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005684:	2300      	movs	r3, #0
 8005686:	e000      	b.n	800568a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005688:	2302      	movs	r3, #2
  }
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b082      	sub	sp, #8
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7ff fe5a 	bl	8005370 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b08c      	sub	sp, #48	; 0x30
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b22      	cmp	r3, #34	; 0x22
 80056d8:	f040 80ab 	bne.w	8005832 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e4:	d117      	bne.n	8005716 <UART_Receive_IT+0x50>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d113      	bne.n	8005716 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	b29b      	uxth	r3, r3
 8005700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005704:	b29a      	uxth	r2, r3
 8005706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005708:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570e:	1c9a      	adds	r2, r3, #2
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	629a      	str	r2, [r3, #40]	; 0x28
 8005714:	e026      	b.n	8005764 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800571c:	2300      	movs	r3, #0
 800571e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005728:	d007      	beq.n	800573a <UART_Receive_IT+0x74>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10a      	bne.n	8005748 <UART_Receive_IT+0x82>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d106      	bne.n	8005748 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	b2da      	uxtb	r2, r3
 8005742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005744:	701a      	strb	r2, [r3, #0]
 8005746:	e008      	b.n	800575a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	b2db      	uxtb	r3, r3
 8005750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005754:	b2da      	uxtb	r2, r3
 8005756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005758:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005768:	b29b      	uxth	r3, r3
 800576a:	3b01      	subs	r3, #1
 800576c:	b29b      	uxth	r3, r3
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	4619      	mov	r1, r3
 8005772:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005774:	2b00      	cmp	r3, #0
 8005776:	d15a      	bne.n	800582e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0220 	bic.w	r2, r2, #32
 8005786:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68da      	ldr	r2, [r3, #12]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005796:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	695a      	ldr	r2, [r3, #20]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 0201 	bic.w	r2, r2, #1
 80057a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d135      	bne.n	8005824 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	330c      	adds	r3, #12
 80057c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	e853 3f00 	ldrex	r3, [r3]
 80057cc:	613b      	str	r3, [r7, #16]
   return(result);
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f023 0310 	bic.w	r3, r3, #16
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	330c      	adds	r3, #12
 80057dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057de:	623a      	str	r2, [r7, #32]
 80057e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e2:	69f9      	ldr	r1, [r7, #28]
 80057e4:	6a3a      	ldr	r2, [r7, #32]
 80057e6:	e841 2300 	strex	r3, r2, [r1]
 80057ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1e5      	bne.n	80057be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0310 	and.w	r3, r3, #16
 80057fc:	2b10      	cmp	r3, #16
 80057fe:	d10a      	bne.n	8005816 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005800:	2300      	movs	r3, #0
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800581a:	4619      	mov	r1, r3
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff fdbb 	bl	8005398 <HAL_UARTEx_RxEventCallback>
 8005822:	e002      	b.n	800582a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f7fc f831 	bl	800188c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	e002      	b.n	8005834 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	e000      	b.n	8005834 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005832:	2302      	movs	r3, #2
  }
}
 8005834:	4618      	mov	r0, r3
 8005836:	3730      	adds	r7, #48	; 0x30
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800583c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005840:	b0c0      	sub	sp, #256	; 0x100
 8005842:	af00      	add	r7, sp, #0
 8005844:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005858:	68d9      	ldr	r1, [r3, #12]
 800585a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	ea40 0301 	orr.w	r3, r0, r1
 8005864:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	431a      	orrs	r2, r3
 8005874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	431a      	orrs	r2, r3
 800587c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	4313      	orrs	r3, r2
 8005884:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005894:	f021 010c 	bic.w	r1, r1, #12
 8005898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80058a2:	430b      	orrs	r3, r1
 80058a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80058b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b6:	6999      	ldr	r1, [r3, #24]
 80058b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	ea40 0301 	orr.w	r3, r0, r1
 80058c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	4b8f      	ldr	r3, [pc, #572]	; (8005b08 <UART_SetConfig+0x2cc>)
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d005      	beq.n	80058dc <UART_SetConfig+0xa0>
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	4b8d      	ldr	r3, [pc, #564]	; (8005b0c <UART_SetConfig+0x2d0>)
 80058d8:	429a      	cmp	r2, r3
 80058da:	d104      	bne.n	80058e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058dc:	f7fe f8d4 	bl	8003a88 <HAL_RCC_GetPCLK2Freq>
 80058e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80058e4:	e003      	b.n	80058ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058e6:	f7fe f8bb 	bl	8003a60 <HAL_RCC_GetPCLK1Freq>
 80058ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f2:	69db      	ldr	r3, [r3, #28]
 80058f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f8:	f040 810c 	bne.w	8005b14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005900:	2200      	movs	r2, #0
 8005902:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005906:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800590a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800590e:	4622      	mov	r2, r4
 8005910:	462b      	mov	r3, r5
 8005912:	1891      	adds	r1, r2, r2
 8005914:	65b9      	str	r1, [r7, #88]	; 0x58
 8005916:	415b      	adcs	r3, r3
 8005918:	65fb      	str	r3, [r7, #92]	; 0x5c
 800591a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800591e:	4621      	mov	r1, r4
 8005920:	eb12 0801 	adds.w	r8, r2, r1
 8005924:	4629      	mov	r1, r5
 8005926:	eb43 0901 	adc.w	r9, r3, r1
 800592a:	f04f 0200 	mov.w	r2, #0
 800592e:	f04f 0300 	mov.w	r3, #0
 8005932:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005936:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800593a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800593e:	4690      	mov	r8, r2
 8005940:	4699      	mov	r9, r3
 8005942:	4623      	mov	r3, r4
 8005944:	eb18 0303 	adds.w	r3, r8, r3
 8005948:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800594c:	462b      	mov	r3, r5
 800594e:	eb49 0303 	adc.w	r3, r9, r3
 8005952:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005962:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005966:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800596a:	460b      	mov	r3, r1
 800596c:	18db      	adds	r3, r3, r3
 800596e:	653b      	str	r3, [r7, #80]	; 0x50
 8005970:	4613      	mov	r3, r2
 8005972:	eb42 0303 	adc.w	r3, r2, r3
 8005976:	657b      	str	r3, [r7, #84]	; 0x54
 8005978:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800597c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005980:	f7fa fc9e 	bl	80002c0 <__aeabi_uldivmod>
 8005984:	4602      	mov	r2, r0
 8005986:	460b      	mov	r3, r1
 8005988:	4b61      	ldr	r3, [pc, #388]	; (8005b10 <UART_SetConfig+0x2d4>)
 800598a:	fba3 2302 	umull	r2, r3, r3, r2
 800598e:	095b      	lsrs	r3, r3, #5
 8005990:	011c      	lsls	r4, r3, #4
 8005992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005996:	2200      	movs	r2, #0
 8005998:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800599c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80059a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80059a4:	4642      	mov	r2, r8
 80059a6:	464b      	mov	r3, r9
 80059a8:	1891      	adds	r1, r2, r2
 80059aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80059ac:	415b      	adcs	r3, r3
 80059ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80059b4:	4641      	mov	r1, r8
 80059b6:	eb12 0a01 	adds.w	sl, r2, r1
 80059ba:	4649      	mov	r1, r9
 80059bc:	eb43 0b01 	adc.w	fp, r3, r1
 80059c0:	f04f 0200 	mov.w	r2, #0
 80059c4:	f04f 0300 	mov.w	r3, #0
 80059c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059d4:	4692      	mov	sl, r2
 80059d6:	469b      	mov	fp, r3
 80059d8:	4643      	mov	r3, r8
 80059da:	eb1a 0303 	adds.w	r3, sl, r3
 80059de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059e2:	464b      	mov	r3, r9
 80059e4:	eb4b 0303 	adc.w	r3, fp, r3
 80059e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80059ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80059fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a00:	460b      	mov	r3, r1
 8005a02:	18db      	adds	r3, r3, r3
 8005a04:	643b      	str	r3, [r7, #64]	; 0x40
 8005a06:	4613      	mov	r3, r2
 8005a08:	eb42 0303 	adc.w	r3, r2, r3
 8005a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a16:	f7fa fc53 	bl	80002c0 <__aeabi_uldivmod>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4611      	mov	r1, r2
 8005a20:	4b3b      	ldr	r3, [pc, #236]	; (8005b10 <UART_SetConfig+0x2d4>)
 8005a22:	fba3 2301 	umull	r2, r3, r3, r1
 8005a26:	095b      	lsrs	r3, r3, #5
 8005a28:	2264      	movs	r2, #100	; 0x64
 8005a2a:	fb02 f303 	mul.w	r3, r2, r3
 8005a2e:	1acb      	subs	r3, r1, r3
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a36:	4b36      	ldr	r3, [pc, #216]	; (8005b10 <UART_SetConfig+0x2d4>)
 8005a38:	fba3 2302 	umull	r2, r3, r3, r2
 8005a3c:	095b      	lsrs	r3, r3, #5
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a44:	441c      	add	r4, r3
 8005a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a58:	4642      	mov	r2, r8
 8005a5a:	464b      	mov	r3, r9
 8005a5c:	1891      	adds	r1, r2, r2
 8005a5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a60:	415b      	adcs	r3, r3
 8005a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a68:	4641      	mov	r1, r8
 8005a6a:	1851      	adds	r1, r2, r1
 8005a6c:	6339      	str	r1, [r7, #48]	; 0x30
 8005a6e:	4649      	mov	r1, r9
 8005a70:	414b      	adcs	r3, r1
 8005a72:	637b      	str	r3, [r7, #52]	; 0x34
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	f04f 0300 	mov.w	r3, #0
 8005a7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a80:	4659      	mov	r1, fp
 8005a82:	00cb      	lsls	r3, r1, #3
 8005a84:	4651      	mov	r1, sl
 8005a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a8a:	4651      	mov	r1, sl
 8005a8c:	00ca      	lsls	r2, r1, #3
 8005a8e:	4610      	mov	r0, r2
 8005a90:	4619      	mov	r1, r3
 8005a92:	4603      	mov	r3, r0
 8005a94:	4642      	mov	r2, r8
 8005a96:	189b      	adds	r3, r3, r2
 8005a98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a9c:	464b      	mov	r3, r9
 8005a9e:	460a      	mov	r2, r1
 8005aa0:	eb42 0303 	adc.w	r3, r2, r3
 8005aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ab4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ab8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005abc:	460b      	mov	r3, r1
 8005abe:	18db      	adds	r3, r3, r3
 8005ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	eb42 0303 	adc.w	r3, r2, r3
 8005ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ace:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ad2:	f7fa fbf5 	bl	80002c0 <__aeabi_uldivmod>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4b0d      	ldr	r3, [pc, #52]	; (8005b10 <UART_SetConfig+0x2d4>)
 8005adc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ae0:	095b      	lsrs	r3, r3, #5
 8005ae2:	2164      	movs	r1, #100	; 0x64
 8005ae4:	fb01 f303 	mul.w	r3, r1, r3
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	3332      	adds	r3, #50	; 0x32
 8005aee:	4a08      	ldr	r2, [pc, #32]	; (8005b10 <UART_SetConfig+0x2d4>)
 8005af0:	fba2 2303 	umull	r2, r3, r2, r3
 8005af4:	095b      	lsrs	r3, r3, #5
 8005af6:	f003 0207 	and.w	r2, r3, #7
 8005afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4422      	add	r2, r4
 8005b02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b04:	e106      	b.n	8005d14 <UART_SetConfig+0x4d8>
 8005b06:	bf00      	nop
 8005b08:	40011000 	.word	0x40011000
 8005b0c:	40011400 	.word	0x40011400
 8005b10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b26:	4642      	mov	r2, r8
 8005b28:	464b      	mov	r3, r9
 8005b2a:	1891      	adds	r1, r2, r2
 8005b2c:	6239      	str	r1, [r7, #32]
 8005b2e:	415b      	adcs	r3, r3
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24
 8005b32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b36:	4641      	mov	r1, r8
 8005b38:	1854      	adds	r4, r2, r1
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	eb43 0501 	adc.w	r5, r3, r1
 8005b40:	f04f 0200 	mov.w	r2, #0
 8005b44:	f04f 0300 	mov.w	r3, #0
 8005b48:	00eb      	lsls	r3, r5, #3
 8005b4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b4e:	00e2      	lsls	r2, r4, #3
 8005b50:	4614      	mov	r4, r2
 8005b52:	461d      	mov	r5, r3
 8005b54:	4643      	mov	r3, r8
 8005b56:	18e3      	adds	r3, r4, r3
 8005b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b5c:	464b      	mov	r3, r9
 8005b5e:	eb45 0303 	adc.w	r3, r5, r3
 8005b62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b76:	f04f 0200 	mov.w	r2, #0
 8005b7a:	f04f 0300 	mov.w	r3, #0
 8005b7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b82:	4629      	mov	r1, r5
 8005b84:	008b      	lsls	r3, r1, #2
 8005b86:	4621      	mov	r1, r4
 8005b88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b8c:	4621      	mov	r1, r4
 8005b8e:	008a      	lsls	r2, r1, #2
 8005b90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b94:	f7fa fb94 	bl	80002c0 <__aeabi_uldivmod>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	4b60      	ldr	r3, [pc, #384]	; (8005d20 <UART_SetConfig+0x4e4>)
 8005b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8005ba2:	095b      	lsrs	r3, r3, #5
 8005ba4:	011c      	lsls	r4, r3, #4
 8005ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005bb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005bb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005bb8:	4642      	mov	r2, r8
 8005bba:	464b      	mov	r3, r9
 8005bbc:	1891      	adds	r1, r2, r2
 8005bbe:	61b9      	str	r1, [r7, #24]
 8005bc0:	415b      	adcs	r3, r3
 8005bc2:	61fb      	str	r3, [r7, #28]
 8005bc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bc8:	4641      	mov	r1, r8
 8005bca:	1851      	adds	r1, r2, r1
 8005bcc:	6139      	str	r1, [r7, #16]
 8005bce:	4649      	mov	r1, r9
 8005bd0:	414b      	adcs	r3, r1
 8005bd2:	617b      	str	r3, [r7, #20]
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	f04f 0300 	mov.w	r3, #0
 8005bdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005be0:	4659      	mov	r1, fp
 8005be2:	00cb      	lsls	r3, r1, #3
 8005be4:	4651      	mov	r1, sl
 8005be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bea:	4651      	mov	r1, sl
 8005bec:	00ca      	lsls	r2, r1, #3
 8005bee:	4610      	mov	r0, r2
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	4642      	mov	r2, r8
 8005bf6:	189b      	adds	r3, r3, r2
 8005bf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005bfc:	464b      	mov	r3, r9
 8005bfe:	460a      	mov	r2, r1
 8005c00:	eb42 0303 	adc.w	r3, r2, r3
 8005c04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	f04f 0300 	mov.w	r3, #0
 8005c1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c20:	4649      	mov	r1, r9
 8005c22:	008b      	lsls	r3, r1, #2
 8005c24:	4641      	mov	r1, r8
 8005c26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c2a:	4641      	mov	r1, r8
 8005c2c:	008a      	lsls	r2, r1, #2
 8005c2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c32:	f7fa fb45 	bl	80002c0 <__aeabi_uldivmod>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4611      	mov	r1, r2
 8005c3c:	4b38      	ldr	r3, [pc, #224]	; (8005d20 <UART_SetConfig+0x4e4>)
 8005c3e:	fba3 2301 	umull	r2, r3, r3, r1
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	2264      	movs	r2, #100	; 0x64
 8005c46:	fb02 f303 	mul.w	r3, r2, r3
 8005c4a:	1acb      	subs	r3, r1, r3
 8005c4c:	011b      	lsls	r3, r3, #4
 8005c4e:	3332      	adds	r3, #50	; 0x32
 8005c50:	4a33      	ldr	r2, [pc, #204]	; (8005d20 <UART_SetConfig+0x4e4>)
 8005c52:	fba2 2303 	umull	r2, r3, r2, r3
 8005c56:	095b      	lsrs	r3, r3, #5
 8005c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c5c:	441c      	add	r4, r3
 8005c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c62:	2200      	movs	r2, #0
 8005c64:	673b      	str	r3, [r7, #112]	; 0x70
 8005c66:	677a      	str	r2, [r7, #116]	; 0x74
 8005c68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c6c:	4642      	mov	r2, r8
 8005c6e:	464b      	mov	r3, r9
 8005c70:	1891      	adds	r1, r2, r2
 8005c72:	60b9      	str	r1, [r7, #8]
 8005c74:	415b      	adcs	r3, r3
 8005c76:	60fb      	str	r3, [r7, #12]
 8005c78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c7c:	4641      	mov	r1, r8
 8005c7e:	1851      	adds	r1, r2, r1
 8005c80:	6039      	str	r1, [r7, #0]
 8005c82:	4649      	mov	r1, r9
 8005c84:	414b      	adcs	r3, r1
 8005c86:	607b      	str	r3, [r7, #4]
 8005c88:	f04f 0200 	mov.w	r2, #0
 8005c8c:	f04f 0300 	mov.w	r3, #0
 8005c90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c94:	4659      	mov	r1, fp
 8005c96:	00cb      	lsls	r3, r1, #3
 8005c98:	4651      	mov	r1, sl
 8005c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c9e:	4651      	mov	r1, sl
 8005ca0:	00ca      	lsls	r2, r1, #3
 8005ca2:	4610      	mov	r0, r2
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	4642      	mov	r2, r8
 8005caa:	189b      	adds	r3, r3, r2
 8005cac:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cae:	464b      	mov	r3, r9
 8005cb0:	460a      	mov	r2, r1
 8005cb2:	eb42 0303 	adc.w	r3, r2, r3
 8005cb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	663b      	str	r3, [r7, #96]	; 0x60
 8005cc2:	667a      	str	r2, [r7, #100]	; 0x64
 8005cc4:	f04f 0200 	mov.w	r2, #0
 8005cc8:	f04f 0300 	mov.w	r3, #0
 8005ccc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005cd0:	4649      	mov	r1, r9
 8005cd2:	008b      	lsls	r3, r1, #2
 8005cd4:	4641      	mov	r1, r8
 8005cd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cda:	4641      	mov	r1, r8
 8005cdc:	008a      	lsls	r2, r1, #2
 8005cde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ce2:	f7fa faed 	bl	80002c0 <__aeabi_uldivmod>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	4b0d      	ldr	r3, [pc, #52]	; (8005d20 <UART_SetConfig+0x4e4>)
 8005cec:	fba3 1302 	umull	r1, r3, r3, r2
 8005cf0:	095b      	lsrs	r3, r3, #5
 8005cf2:	2164      	movs	r1, #100	; 0x64
 8005cf4:	fb01 f303 	mul.w	r3, r1, r3
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	3332      	adds	r3, #50	; 0x32
 8005cfe:	4a08      	ldr	r2, [pc, #32]	; (8005d20 <UART_SetConfig+0x4e4>)
 8005d00:	fba2 2303 	umull	r2, r3, r2, r3
 8005d04:	095b      	lsrs	r3, r3, #5
 8005d06:	f003 020f 	and.w	r2, r3, #15
 8005d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4422      	add	r2, r4
 8005d12:	609a      	str	r2, [r3, #8]
}
 8005d14:	bf00      	nop
 8005d16:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d20:	51eb851f 	.word	0x51eb851f

08005d24 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005d32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d36:	2b84      	cmp	r3, #132	; 0x84
 8005d38:	d005      	beq.n	8005d46 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005d3a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4413      	add	r3, r2
 8005d42:	3303      	adds	r3, #3
 8005d44:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005d46:	68fb      	ldr	r3, [r7, #12]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005d58:	f000 faf6 	bl	8006348 <vTaskStartScheduler>
  
  return osOK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005d62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d64:	b089      	sub	sp, #36	; 0x24
 8005d66:	af04      	add	r7, sp, #16
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d020      	beq.n	8005db6 <osThreadCreate+0x54>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d01c      	beq.n	8005db6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685c      	ldr	r4, [r3, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691e      	ldr	r6, [r3, #16]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff ffc8 	bl	8005d24 <makeFreeRtosPriority>
 8005d94:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d9e:	9202      	str	r2, [sp, #8]
 8005da0:	9301      	str	r3, [sp, #4]
 8005da2:	9100      	str	r1, [sp, #0]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	4632      	mov	r2, r6
 8005da8:	4629      	mov	r1, r5
 8005daa:	4620      	mov	r0, r4
 8005dac:	f000 f8ed 	bl	8005f8a <xTaskCreateStatic>
 8005db0:	4603      	mov	r3, r0
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	e01c      	b.n	8005df0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685c      	ldr	r4, [r3, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dc2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff ffaa 	bl	8005d24 <makeFreeRtosPriority>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	f107 030c 	add.w	r3, r7, #12
 8005dd6:	9301      	str	r3, [sp, #4]
 8005dd8:	9200      	str	r2, [sp, #0]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	4632      	mov	r2, r6
 8005dde:	4629      	mov	r1, r5
 8005de0:	4620      	mov	r0, r4
 8005de2:	f000 f92f 	bl	8006044 <xTaskCreate>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d001      	beq.n	8005df0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005dec:	2300      	movs	r3, #0
 8005dee:	e000      	b.n	8005df2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005df0:	68fb      	ldr	r3, [r7, #12]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005dfa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b084      	sub	sp, #16
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <osDelay+0x16>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	e000      	b.n	8005e12 <osDelay+0x18>
 8005e10:	2301      	movs	r3, #1
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 fa64 	bl	80062e0 <vTaskDelay>
  
  return osOK;
 8005e18:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f103 0208 	add.w	r2, r3, #8
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f04f 32ff 	mov.w	r2, #4294967295
 8005e3a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f103 0208 	add.w	r2, r3, #8
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f103 0208 	add.w	r2, r3, #8
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	689a      	ldr	r2, [r3, #8]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	601a      	str	r2, [r3, #0]
}
 8005eb8:	bf00      	nop
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eda:	d103      	bne.n	8005ee4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	e00c      	b.n	8005efe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3308      	adds	r3, #8
 8005ee8:	60fb      	str	r3, [r7, #12]
 8005eea:	e002      	b.n	8005ef2 <vListInsert+0x2e>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	60fb      	str	r3, [r7, #12]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d2f6      	bcs.n	8005eec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	601a      	str	r2, [r3, #0]
}
 8005f2a:	bf00      	nop
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f36:	b480      	push	{r7}
 8005f38:	b085      	sub	sp, #20
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6892      	ldr	r2, [r2, #8]
 8005f4c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6852      	ldr	r2, [r2, #4]
 8005f56:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d103      	bne.n	8005f6a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	1e5a      	subs	r2, r3, #1
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b08e      	sub	sp, #56	; 0x38
 8005f8e:	af04      	add	r7, sp, #16
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	607a      	str	r2, [r7, #4]
 8005f96:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10a      	bne.n	8005fb4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005fb0:	bf00      	nop
 8005fb2:	e7fe      	b.n	8005fb2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10a      	bne.n	8005fd0 <xTaskCreateStatic+0x46>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	61fb      	str	r3, [r7, #28]
}
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005fd0:	23a0      	movs	r3, #160	; 0xa0
 8005fd2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	2ba0      	cmp	r3, #160	; 0xa0
 8005fd8:	d00a      	beq.n	8005ff0 <xTaskCreateStatic+0x66>
	__asm volatile
 8005fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fde:	f383 8811 	msr	BASEPRI, r3
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	f3bf 8f4f 	dsb	sy
 8005fea:	61bb      	str	r3, [r7, #24]
}
 8005fec:	bf00      	nop
 8005fee:	e7fe      	b.n	8005fee <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ff0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d01e      	beq.n	8006036 <xTaskCreateStatic+0xac>
 8005ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d01b      	beq.n	8006036 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006006:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	2202      	movs	r2, #2
 800600c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006010:	2300      	movs	r3, #0
 8006012:	9303      	str	r3, [sp, #12]
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	9302      	str	r3, [sp, #8]
 8006018:	f107 0314 	add.w	r3, r7, #20
 800601c:	9301      	str	r3, [sp, #4]
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	68b9      	ldr	r1, [r7, #8]
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 f851 	bl	80060d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800602e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006030:	f000 f8ec 	bl	800620c <prvAddNewTaskToReadyList>
 8006034:	e001      	b.n	800603a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006036:	2300      	movs	r3, #0
 8006038:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800603a:	697b      	ldr	r3, [r7, #20]
	}
 800603c:	4618      	mov	r0, r3
 800603e:	3728      	adds	r7, #40	; 0x28
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006044:	b580      	push	{r7, lr}
 8006046:	b08c      	sub	sp, #48	; 0x30
 8006048:	af04      	add	r7, sp, #16
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	603b      	str	r3, [r7, #0]
 8006050:	4613      	mov	r3, r2
 8006052:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006054:	88fb      	ldrh	r3, [r7, #6]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4618      	mov	r0, r3
 800605a:	f000 fef5 	bl	8006e48 <pvPortMalloc>
 800605e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00e      	beq.n	8006084 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006066:	20a0      	movs	r0, #160	; 0xa0
 8006068:	f000 feee 	bl	8006e48 <pvPortMalloc>
 800606c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	631a      	str	r2, [r3, #48]	; 0x30
 800607a:	e005      	b.n	8006088 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800607c:	6978      	ldr	r0, [r7, #20]
 800607e:	f000 ffaf 	bl	8006fe0 <vPortFree>
 8006082:	e001      	b.n	8006088 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006084:	2300      	movs	r3, #0
 8006086:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d017      	beq.n	80060be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006096:	88fa      	ldrh	r2, [r7, #6]
 8006098:	2300      	movs	r3, #0
 800609a:	9303      	str	r3, [sp, #12]
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	9302      	str	r3, [sp, #8]
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a2:	9301      	str	r3, [sp, #4]
 80060a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	68b9      	ldr	r1, [r7, #8]
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 f80f 	bl	80060d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060b2:	69f8      	ldr	r0, [r7, #28]
 80060b4:	f000 f8aa 	bl	800620c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80060b8:	2301      	movs	r3, #1
 80060ba:	61bb      	str	r3, [r7, #24]
 80060bc:	e002      	b.n	80060c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060be:	f04f 33ff 	mov.w	r3, #4294967295
 80060c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80060c4:	69bb      	ldr	r3, [r7, #24]
	}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3720      	adds	r7, #32
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
	...

080060d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b088      	sub	sp, #32
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80060de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80060e8:	3b01      	subs	r3, #1
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	f023 0307 	bic.w	r3, r3, #7
 80060f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006106:	f383 8811 	msr	BASEPRI, r3
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	617b      	str	r3, [r7, #20]
}
 8006114:	bf00      	nop
 8006116:	e7fe      	b.n	8006116 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d01f      	beq.n	800615e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800611e:	2300      	movs	r3, #0
 8006120:	61fb      	str	r3, [r7, #28]
 8006122:	e012      	b.n	800614a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	4413      	add	r3, r2
 800612a:	7819      	ldrb	r1, [r3, #0]
 800612c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	4413      	add	r3, r2
 8006132:	3334      	adds	r3, #52	; 0x34
 8006134:	460a      	mov	r2, r1
 8006136:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	4413      	add	r3, r2
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d006      	beq.n	8006152 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	3301      	adds	r3, #1
 8006148:	61fb      	str	r3, [r7, #28]
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	2b0f      	cmp	r3, #15
 800614e:	d9e9      	bls.n	8006124 <prvInitialiseNewTask+0x54>
 8006150:	e000      	b.n	8006154 <prvInitialiseNewTask+0x84>
			{
				break;
 8006152:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800615c:	e003      	b.n	8006166 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800615e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006168:	2b06      	cmp	r3, #6
 800616a:	d901      	bls.n	8006170 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800616c:	2306      	movs	r3, #6
 800616e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006174:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006178:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800617a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800617c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617e:	2200      	movs	r2, #0
 8006180:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006184:	3304      	adds	r3, #4
 8006186:	4618      	mov	r0, r3
 8006188:	f7ff fe6b 	bl	8005e62 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800618c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618e:	3318      	adds	r3, #24
 8006190:	4618      	mov	r0, r3
 8006192:	f7ff fe66 	bl	8005e62 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800619a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800619c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619e:	f1c3 0207 	rsb	r2, r3, #7
 80061a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80061ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ae:	2200      	movs	r2, #0
 80061b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80061bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061be:	334c      	adds	r3, #76	; 0x4c
 80061c0:	224c      	movs	r2, #76	; 0x4c
 80061c2:	2100      	movs	r1, #0
 80061c4:	4618      	mov	r0, r3
 80061c6:	f001 f849 	bl	800725c <memset>
 80061ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061cc:	4a0c      	ldr	r2, [pc, #48]	; (8006200 <prvInitialiseNewTask+0x130>)
 80061ce:	651a      	str	r2, [r3, #80]	; 0x50
 80061d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d2:	4a0c      	ldr	r2, [pc, #48]	; (8006204 <prvInitialiseNewTask+0x134>)
 80061d4:	655a      	str	r2, [r3, #84]	; 0x54
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	4a0b      	ldr	r2, [pc, #44]	; (8006208 <prvInitialiseNewTask+0x138>)
 80061da:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	68f9      	ldr	r1, [r7, #12]
 80061e0:	69b8      	ldr	r0, [r7, #24]
 80061e2:	f000 fc1f 	bl	8006a24 <pxPortInitialiseStack>
 80061e6:	4602      	mov	r2, r0
 80061e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80061ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d002      	beq.n	80061f8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80061f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061f8:	bf00      	nop
 80061fa:	3720      	adds	r7, #32
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	2000b284 	.word	0x2000b284
 8006204:	2000b2ec 	.word	0x2000b2ec
 8006208:	2000b354 	.word	0x2000b354

0800620c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006214:	f000 fd36 	bl	8006c84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006218:	4b2a      	ldr	r3, [pc, #168]	; (80062c4 <prvAddNewTaskToReadyList+0xb8>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	3301      	adds	r3, #1
 800621e:	4a29      	ldr	r2, [pc, #164]	; (80062c4 <prvAddNewTaskToReadyList+0xb8>)
 8006220:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006222:	4b29      	ldr	r3, [pc, #164]	; (80062c8 <prvAddNewTaskToReadyList+0xbc>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d109      	bne.n	800623e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800622a:	4a27      	ldr	r2, [pc, #156]	; (80062c8 <prvAddNewTaskToReadyList+0xbc>)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006230:	4b24      	ldr	r3, [pc, #144]	; (80062c4 <prvAddNewTaskToReadyList+0xb8>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d110      	bne.n	800625a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006238:	f000 facc 	bl	80067d4 <prvInitialiseTaskLists>
 800623c:	e00d      	b.n	800625a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800623e:	4b23      	ldr	r3, [pc, #140]	; (80062cc <prvAddNewTaskToReadyList+0xc0>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d109      	bne.n	800625a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006246:	4b20      	ldr	r3, [pc, #128]	; (80062c8 <prvAddNewTaskToReadyList+0xbc>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006250:	429a      	cmp	r2, r3
 8006252:	d802      	bhi.n	800625a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006254:	4a1c      	ldr	r2, [pc, #112]	; (80062c8 <prvAddNewTaskToReadyList+0xbc>)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800625a:	4b1d      	ldr	r3, [pc, #116]	; (80062d0 <prvAddNewTaskToReadyList+0xc4>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3301      	adds	r3, #1
 8006260:	4a1b      	ldr	r2, [pc, #108]	; (80062d0 <prvAddNewTaskToReadyList+0xc4>)
 8006262:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006268:	2201      	movs	r2, #1
 800626a:	409a      	lsls	r2, r3
 800626c:	4b19      	ldr	r3, [pc, #100]	; (80062d4 <prvAddNewTaskToReadyList+0xc8>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4313      	orrs	r3, r2
 8006272:	4a18      	ldr	r2, [pc, #96]	; (80062d4 <prvAddNewTaskToReadyList+0xc8>)
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800627a:	4613      	mov	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4a15      	ldr	r2, [pc, #84]	; (80062d8 <prvAddNewTaskToReadyList+0xcc>)
 8006284:	441a      	add	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	3304      	adds	r3, #4
 800628a:	4619      	mov	r1, r3
 800628c:	4610      	mov	r0, r2
 800628e:	f7ff fdf5 	bl	8005e7c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006292:	f000 fd27 	bl	8006ce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006296:	4b0d      	ldr	r3, [pc, #52]	; (80062cc <prvAddNewTaskToReadyList+0xc0>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00e      	beq.n	80062bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800629e:	4b0a      	ldr	r3, [pc, #40]	; (80062c8 <prvAddNewTaskToReadyList+0xbc>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d207      	bcs.n	80062bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062ac:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <prvAddNewTaskToReadyList+0xd0>)
 80062ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062bc:	bf00      	nop
 80062be:	3708      	adds	r7, #8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	20007630 	.word	0x20007630
 80062c8:	20007530 	.word	0x20007530
 80062cc:	2000763c 	.word	0x2000763c
 80062d0:	2000764c 	.word	0x2000764c
 80062d4:	20007638 	.word	0x20007638
 80062d8:	20007534 	.word	0x20007534
 80062dc:	e000ed04 	.word	0xe000ed04

080062e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80062e8:	2300      	movs	r3, #0
 80062ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d017      	beq.n	8006322 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80062f2:	4b13      	ldr	r3, [pc, #76]	; (8006340 <vTaskDelay+0x60>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <vTaskDelay+0x30>
	__asm volatile
 80062fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fe:	f383 8811 	msr	BASEPRI, r3
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	60bb      	str	r3, [r7, #8]
}
 800630c:	bf00      	nop
 800630e:	e7fe      	b.n	800630e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006310:	f000 f884 	bl	800641c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006314:	2100      	movs	r1, #0
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fb1e 	bl	8006958 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800631c:	f000 f88c 	bl	8006438 <xTaskResumeAll>
 8006320:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d107      	bne.n	8006338 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006328:	4b06      	ldr	r3, [pc, #24]	; (8006344 <vTaskDelay+0x64>)
 800632a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006338:	bf00      	nop
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	20007658 	.word	0x20007658
 8006344:	e000ed04 	.word	0xe000ed04

08006348 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08a      	sub	sp, #40	; 0x28
 800634c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800634e:	2300      	movs	r3, #0
 8006350:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006352:	2300      	movs	r3, #0
 8006354:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006356:	463a      	mov	r2, r7
 8006358:	1d39      	adds	r1, r7, #4
 800635a:	f107 0308 	add.w	r3, r7, #8
 800635e:	4618      	mov	r0, r3
 8006360:	f7fb f9e8 	bl	8001734 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006364:	6839      	ldr	r1, [r7, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	9202      	str	r2, [sp, #8]
 800636c:	9301      	str	r3, [sp, #4]
 800636e:	2300      	movs	r3, #0
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	2300      	movs	r3, #0
 8006374:	460a      	mov	r2, r1
 8006376:	4921      	ldr	r1, [pc, #132]	; (80063fc <vTaskStartScheduler+0xb4>)
 8006378:	4821      	ldr	r0, [pc, #132]	; (8006400 <vTaskStartScheduler+0xb8>)
 800637a:	f7ff fe06 	bl	8005f8a <xTaskCreateStatic>
 800637e:	4603      	mov	r3, r0
 8006380:	4a20      	ldr	r2, [pc, #128]	; (8006404 <vTaskStartScheduler+0xbc>)
 8006382:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006384:	4b1f      	ldr	r3, [pc, #124]	; (8006404 <vTaskStartScheduler+0xbc>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d002      	beq.n	8006392 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800638c:	2301      	movs	r3, #1
 800638e:	617b      	str	r3, [r7, #20]
 8006390:	e001      	b.n	8006396 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006392:	2300      	movs	r3, #0
 8006394:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d11b      	bne.n	80063d4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800639c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	613b      	str	r3, [r7, #16]
}
 80063ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063b0:	4b15      	ldr	r3, [pc, #84]	; (8006408 <vTaskStartScheduler+0xc0>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	334c      	adds	r3, #76	; 0x4c
 80063b6:	4a15      	ldr	r2, [pc, #84]	; (800640c <vTaskStartScheduler+0xc4>)
 80063b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063ba:	4b15      	ldr	r3, [pc, #84]	; (8006410 <vTaskStartScheduler+0xc8>)
 80063bc:	f04f 32ff 	mov.w	r2, #4294967295
 80063c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063c2:	4b14      	ldr	r3, [pc, #80]	; (8006414 <vTaskStartScheduler+0xcc>)
 80063c4:	2201      	movs	r2, #1
 80063c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80063c8:	4b13      	ldr	r3, [pc, #76]	; (8006418 <vTaskStartScheduler+0xd0>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063ce:	f000 fbb7 	bl	8006b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063d2:	e00e      	b.n	80063f2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063da:	d10a      	bne.n	80063f2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80063dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	60fb      	str	r3, [r7, #12]
}
 80063ee:	bf00      	nop
 80063f0:	e7fe      	b.n	80063f0 <vTaskStartScheduler+0xa8>
}
 80063f2:	bf00      	nop
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	0800804c 	.word	0x0800804c
 8006400:	080067a5 	.word	0x080067a5
 8006404:	20007654 	.word	0x20007654
 8006408:	20007530 	.word	0x20007530
 800640c:	200000b4 	.word	0x200000b4
 8006410:	20007650 	.word	0x20007650
 8006414:	2000763c 	.word	0x2000763c
 8006418:	20007634 	.word	0x20007634

0800641c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006420:	4b04      	ldr	r3, [pc, #16]	; (8006434 <vTaskSuspendAll+0x18>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3301      	adds	r3, #1
 8006426:	4a03      	ldr	r2, [pc, #12]	; (8006434 <vTaskSuspendAll+0x18>)
 8006428:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800642a:	bf00      	nop
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	20007658 	.word	0x20007658

08006438 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800643e:	2300      	movs	r3, #0
 8006440:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006442:	2300      	movs	r3, #0
 8006444:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006446:	4b41      	ldr	r3, [pc, #260]	; (800654c <xTaskResumeAll+0x114>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10a      	bne.n	8006464 <xTaskResumeAll+0x2c>
	__asm volatile
 800644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	603b      	str	r3, [r7, #0]
}
 8006460:	bf00      	nop
 8006462:	e7fe      	b.n	8006462 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006464:	f000 fc0e 	bl	8006c84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006468:	4b38      	ldr	r3, [pc, #224]	; (800654c <xTaskResumeAll+0x114>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3b01      	subs	r3, #1
 800646e:	4a37      	ldr	r2, [pc, #220]	; (800654c <xTaskResumeAll+0x114>)
 8006470:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006472:	4b36      	ldr	r3, [pc, #216]	; (800654c <xTaskResumeAll+0x114>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d161      	bne.n	800653e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800647a:	4b35      	ldr	r3, [pc, #212]	; (8006550 <xTaskResumeAll+0x118>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d05d      	beq.n	800653e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006482:	e02e      	b.n	80064e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006484:	4b33      	ldr	r3, [pc, #204]	; (8006554 <xTaskResumeAll+0x11c>)
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	3318      	adds	r3, #24
 8006490:	4618      	mov	r0, r3
 8006492:	f7ff fd50 	bl	8005f36 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	3304      	adds	r3, #4
 800649a:	4618      	mov	r0, r3
 800649c:	f7ff fd4b 	bl	8005f36 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a4:	2201      	movs	r2, #1
 80064a6:	409a      	lsls	r2, r3
 80064a8:	4b2b      	ldr	r3, [pc, #172]	; (8006558 <xTaskResumeAll+0x120>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	4a2a      	ldr	r2, [pc, #168]	; (8006558 <xTaskResumeAll+0x120>)
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b6:	4613      	mov	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4a27      	ldr	r2, [pc, #156]	; (800655c <xTaskResumeAll+0x124>)
 80064c0:	441a      	add	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	3304      	adds	r3, #4
 80064c6:	4619      	mov	r1, r3
 80064c8:	4610      	mov	r0, r2
 80064ca:	f7ff fcd7 	bl	8005e7c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d2:	4b23      	ldr	r3, [pc, #140]	; (8006560 <xTaskResumeAll+0x128>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	429a      	cmp	r2, r3
 80064da:	d302      	bcc.n	80064e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80064dc:	4b21      	ldr	r3, [pc, #132]	; (8006564 <xTaskResumeAll+0x12c>)
 80064de:	2201      	movs	r2, #1
 80064e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064e2:	4b1c      	ldr	r3, [pc, #112]	; (8006554 <xTaskResumeAll+0x11c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1cc      	bne.n	8006484 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80064f0:	f000 fa12 	bl	8006918 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80064f4:	4b1c      	ldr	r3, [pc, #112]	; (8006568 <xTaskResumeAll+0x130>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d010      	beq.n	8006522 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006500:	f000 f836 	bl	8006570 <xTaskIncrementTick>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d002      	beq.n	8006510 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800650a:	4b16      	ldr	r3, [pc, #88]	; (8006564 <xTaskResumeAll+0x12c>)
 800650c:	2201      	movs	r2, #1
 800650e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	3b01      	subs	r3, #1
 8006514:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1f1      	bne.n	8006500 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800651c:	4b12      	ldr	r3, [pc, #72]	; (8006568 <xTaskResumeAll+0x130>)
 800651e:	2200      	movs	r2, #0
 8006520:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006522:	4b10      	ldr	r3, [pc, #64]	; (8006564 <xTaskResumeAll+0x12c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d009      	beq.n	800653e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800652a:	2301      	movs	r3, #1
 800652c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800652e:	4b0f      	ldr	r3, [pc, #60]	; (800656c <xTaskResumeAll+0x134>)
 8006530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800653e:	f000 fbd1 	bl	8006ce4 <vPortExitCritical>

	return xAlreadyYielded;
 8006542:	68bb      	ldr	r3, [r7, #8]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	20007658 	.word	0x20007658
 8006550:	20007630 	.word	0x20007630
 8006554:	200075f0 	.word	0x200075f0
 8006558:	20007638 	.word	0x20007638
 800655c:	20007534 	.word	0x20007534
 8006560:	20007530 	.word	0x20007530
 8006564:	20007644 	.word	0x20007644
 8006568:	20007640 	.word	0x20007640
 800656c:	e000ed04 	.word	0xe000ed04

08006570 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006576:	2300      	movs	r3, #0
 8006578:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800657a:	4b4e      	ldr	r3, [pc, #312]	; (80066b4 <xTaskIncrementTick+0x144>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	f040 808e 	bne.w	80066a0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006584:	4b4c      	ldr	r3, [pc, #304]	; (80066b8 <xTaskIncrementTick+0x148>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3301      	adds	r3, #1
 800658a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800658c:	4a4a      	ldr	r2, [pc, #296]	; (80066b8 <xTaskIncrementTick+0x148>)
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d120      	bne.n	80065da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006598:	4b48      	ldr	r3, [pc, #288]	; (80066bc <xTaskIncrementTick+0x14c>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00a      	beq.n	80065b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80065a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	603b      	str	r3, [r7, #0]
}
 80065b4:	bf00      	nop
 80065b6:	e7fe      	b.n	80065b6 <xTaskIncrementTick+0x46>
 80065b8:	4b40      	ldr	r3, [pc, #256]	; (80066bc <xTaskIncrementTick+0x14c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	4b40      	ldr	r3, [pc, #256]	; (80066c0 <xTaskIncrementTick+0x150>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a3e      	ldr	r2, [pc, #248]	; (80066bc <xTaskIncrementTick+0x14c>)
 80065c4:	6013      	str	r3, [r2, #0]
 80065c6:	4a3e      	ldr	r2, [pc, #248]	; (80066c0 <xTaskIncrementTick+0x150>)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6013      	str	r3, [r2, #0]
 80065cc:	4b3d      	ldr	r3, [pc, #244]	; (80066c4 <xTaskIncrementTick+0x154>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3301      	adds	r3, #1
 80065d2:	4a3c      	ldr	r2, [pc, #240]	; (80066c4 <xTaskIncrementTick+0x154>)
 80065d4:	6013      	str	r3, [r2, #0]
 80065d6:	f000 f99f 	bl	8006918 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80065da:	4b3b      	ldr	r3, [pc, #236]	; (80066c8 <xTaskIncrementTick+0x158>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d348      	bcc.n	8006676 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065e4:	4b35      	ldr	r3, [pc, #212]	; (80066bc <xTaskIncrementTick+0x14c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d104      	bne.n	80065f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065ee:	4b36      	ldr	r3, [pc, #216]	; (80066c8 <xTaskIncrementTick+0x158>)
 80065f0:	f04f 32ff 	mov.w	r2, #4294967295
 80065f4:	601a      	str	r2, [r3, #0]
					break;
 80065f6:	e03e      	b.n	8006676 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065f8:	4b30      	ldr	r3, [pc, #192]	; (80066bc <xTaskIncrementTick+0x14c>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	429a      	cmp	r2, r3
 800660e:	d203      	bcs.n	8006618 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006610:	4a2d      	ldr	r2, [pc, #180]	; (80066c8 <xTaskIncrementTick+0x158>)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006616:	e02e      	b.n	8006676 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	3304      	adds	r3, #4
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff fc8a 	bl	8005f36 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006626:	2b00      	cmp	r3, #0
 8006628:	d004      	beq.n	8006634 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	3318      	adds	r3, #24
 800662e:	4618      	mov	r0, r3
 8006630:	f7ff fc81 	bl	8005f36 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	2201      	movs	r2, #1
 800663a:	409a      	lsls	r2, r3
 800663c:	4b23      	ldr	r3, [pc, #140]	; (80066cc <xTaskIncrementTick+0x15c>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4313      	orrs	r3, r2
 8006642:	4a22      	ldr	r2, [pc, #136]	; (80066cc <xTaskIncrementTick+0x15c>)
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664a:	4613      	mov	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4a1f      	ldr	r2, [pc, #124]	; (80066d0 <xTaskIncrementTick+0x160>)
 8006654:	441a      	add	r2, r3
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	3304      	adds	r3, #4
 800665a:	4619      	mov	r1, r3
 800665c:	4610      	mov	r0, r2
 800665e:	f7ff fc0d 	bl	8005e7c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006666:	4b1b      	ldr	r3, [pc, #108]	; (80066d4 <xTaskIncrementTick+0x164>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666c:	429a      	cmp	r2, r3
 800666e:	d3b9      	bcc.n	80065e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006670:	2301      	movs	r3, #1
 8006672:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006674:	e7b6      	b.n	80065e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006676:	4b17      	ldr	r3, [pc, #92]	; (80066d4 <xTaskIncrementTick+0x164>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667c:	4914      	ldr	r1, [pc, #80]	; (80066d0 <xTaskIncrementTick+0x160>)
 800667e:	4613      	mov	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	440b      	add	r3, r1
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d901      	bls.n	8006692 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800668e:	2301      	movs	r3, #1
 8006690:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006692:	4b11      	ldr	r3, [pc, #68]	; (80066d8 <xTaskIncrementTick+0x168>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d007      	beq.n	80066aa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800669a:	2301      	movs	r3, #1
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	e004      	b.n	80066aa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80066a0:	4b0e      	ldr	r3, [pc, #56]	; (80066dc <xTaskIncrementTick+0x16c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	3301      	adds	r3, #1
 80066a6:	4a0d      	ldr	r2, [pc, #52]	; (80066dc <xTaskIncrementTick+0x16c>)
 80066a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80066aa:	697b      	ldr	r3, [r7, #20]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	20007658 	.word	0x20007658
 80066b8:	20007634 	.word	0x20007634
 80066bc:	200075e8 	.word	0x200075e8
 80066c0:	200075ec 	.word	0x200075ec
 80066c4:	20007648 	.word	0x20007648
 80066c8:	20007650 	.word	0x20007650
 80066cc:	20007638 	.word	0x20007638
 80066d0:	20007534 	.word	0x20007534
 80066d4:	20007530 	.word	0x20007530
 80066d8:	20007644 	.word	0x20007644
 80066dc:	20007640 	.word	0x20007640

080066e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80066e6:	4b29      	ldr	r3, [pc, #164]	; (800678c <vTaskSwitchContext+0xac>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80066ee:	4b28      	ldr	r3, [pc, #160]	; (8006790 <vTaskSwitchContext+0xb0>)
 80066f0:	2201      	movs	r2, #1
 80066f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80066f4:	e044      	b.n	8006780 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80066f6:	4b26      	ldr	r3, [pc, #152]	; (8006790 <vTaskSwitchContext+0xb0>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066fc:	4b25      	ldr	r3, [pc, #148]	; (8006794 <vTaskSwitchContext+0xb4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	fab3 f383 	clz	r3, r3
 8006708:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800670a:	7afb      	ldrb	r3, [r7, #11]
 800670c:	f1c3 031f 	rsb	r3, r3, #31
 8006710:	617b      	str	r3, [r7, #20]
 8006712:	4921      	ldr	r1, [pc, #132]	; (8006798 <vTaskSwitchContext+0xb8>)
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	4613      	mov	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	440b      	add	r3, r1
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10a      	bne.n	800673c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	607b      	str	r3, [r7, #4]
}
 8006738:	bf00      	nop
 800673a:	e7fe      	b.n	800673a <vTaskSwitchContext+0x5a>
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4a14      	ldr	r2, [pc, #80]	; (8006798 <vTaskSwitchContext+0xb8>)
 8006748:	4413      	add	r3, r2
 800674a:	613b      	str	r3, [r7, #16]
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	685a      	ldr	r2, [r3, #4]
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	605a      	str	r2, [r3, #4]
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	3308      	adds	r3, #8
 800675e:	429a      	cmp	r2, r3
 8006760:	d104      	bne.n	800676c <vTaskSwitchContext+0x8c>
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	605a      	str	r2, [r3, #4]
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	4a0a      	ldr	r2, [pc, #40]	; (800679c <vTaskSwitchContext+0xbc>)
 8006774:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006776:	4b09      	ldr	r3, [pc, #36]	; (800679c <vTaskSwitchContext+0xbc>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	334c      	adds	r3, #76	; 0x4c
 800677c:	4a08      	ldr	r2, [pc, #32]	; (80067a0 <vTaskSwitchContext+0xc0>)
 800677e:	6013      	str	r3, [r2, #0]
}
 8006780:	bf00      	nop
 8006782:	371c      	adds	r7, #28
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr
 800678c:	20007658 	.word	0x20007658
 8006790:	20007644 	.word	0x20007644
 8006794:	20007638 	.word	0x20007638
 8006798:	20007534 	.word	0x20007534
 800679c:	20007530 	.word	0x20007530
 80067a0:	200000b4 	.word	0x200000b4

080067a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067ac:	f000 f852 	bl	8006854 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067b0:	4b06      	ldr	r3, [pc, #24]	; (80067cc <prvIdleTask+0x28>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d9f9      	bls.n	80067ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80067b8:	4b05      	ldr	r3, [pc, #20]	; (80067d0 <prvIdleTask+0x2c>)
 80067ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067c8:	e7f0      	b.n	80067ac <prvIdleTask+0x8>
 80067ca:	bf00      	nop
 80067cc:	20007534 	.word	0x20007534
 80067d0:	e000ed04 	.word	0xe000ed04

080067d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067da:	2300      	movs	r3, #0
 80067dc:	607b      	str	r3, [r7, #4]
 80067de:	e00c      	b.n	80067fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	4613      	mov	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4a12      	ldr	r2, [pc, #72]	; (8006834 <prvInitialiseTaskLists+0x60>)
 80067ec:	4413      	add	r3, r2
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7ff fb17 	bl	8005e22 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3301      	adds	r3, #1
 80067f8:	607b      	str	r3, [r7, #4]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b06      	cmp	r3, #6
 80067fe:	d9ef      	bls.n	80067e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006800:	480d      	ldr	r0, [pc, #52]	; (8006838 <prvInitialiseTaskLists+0x64>)
 8006802:	f7ff fb0e 	bl	8005e22 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006806:	480d      	ldr	r0, [pc, #52]	; (800683c <prvInitialiseTaskLists+0x68>)
 8006808:	f7ff fb0b 	bl	8005e22 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800680c:	480c      	ldr	r0, [pc, #48]	; (8006840 <prvInitialiseTaskLists+0x6c>)
 800680e:	f7ff fb08 	bl	8005e22 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006812:	480c      	ldr	r0, [pc, #48]	; (8006844 <prvInitialiseTaskLists+0x70>)
 8006814:	f7ff fb05 	bl	8005e22 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006818:	480b      	ldr	r0, [pc, #44]	; (8006848 <prvInitialiseTaskLists+0x74>)
 800681a:	f7ff fb02 	bl	8005e22 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800681e:	4b0b      	ldr	r3, [pc, #44]	; (800684c <prvInitialiseTaskLists+0x78>)
 8006820:	4a05      	ldr	r2, [pc, #20]	; (8006838 <prvInitialiseTaskLists+0x64>)
 8006822:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006824:	4b0a      	ldr	r3, [pc, #40]	; (8006850 <prvInitialiseTaskLists+0x7c>)
 8006826:	4a05      	ldr	r2, [pc, #20]	; (800683c <prvInitialiseTaskLists+0x68>)
 8006828:	601a      	str	r2, [r3, #0]
}
 800682a:	bf00      	nop
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	20007534 	.word	0x20007534
 8006838:	200075c0 	.word	0x200075c0
 800683c:	200075d4 	.word	0x200075d4
 8006840:	200075f0 	.word	0x200075f0
 8006844:	20007604 	.word	0x20007604
 8006848:	2000761c 	.word	0x2000761c
 800684c:	200075e8 	.word	0x200075e8
 8006850:	200075ec 	.word	0x200075ec

08006854 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800685a:	e019      	b.n	8006890 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800685c:	f000 fa12 	bl	8006c84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006860:	4b10      	ldr	r3, [pc, #64]	; (80068a4 <prvCheckTasksWaitingTermination+0x50>)
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	3304      	adds	r3, #4
 800686c:	4618      	mov	r0, r3
 800686e:	f7ff fb62 	bl	8005f36 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006872:	4b0d      	ldr	r3, [pc, #52]	; (80068a8 <prvCheckTasksWaitingTermination+0x54>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3b01      	subs	r3, #1
 8006878:	4a0b      	ldr	r2, [pc, #44]	; (80068a8 <prvCheckTasksWaitingTermination+0x54>)
 800687a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800687c:	4b0b      	ldr	r3, [pc, #44]	; (80068ac <prvCheckTasksWaitingTermination+0x58>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3b01      	subs	r3, #1
 8006882:	4a0a      	ldr	r2, [pc, #40]	; (80068ac <prvCheckTasksWaitingTermination+0x58>)
 8006884:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006886:	f000 fa2d 	bl	8006ce4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f810 	bl	80068b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006890:	4b06      	ldr	r3, [pc, #24]	; (80068ac <prvCheckTasksWaitingTermination+0x58>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1e1      	bne.n	800685c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006898:	bf00      	nop
 800689a:	bf00      	nop
 800689c:	3708      	adds	r7, #8
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	20007604 	.word	0x20007604
 80068a8:	20007630 	.word	0x20007630
 80068ac:	20007618 	.word	0x20007618

080068b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	334c      	adds	r3, #76	; 0x4c
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 fcd5 	bl	800726c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d108      	bne.n	80068de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 fb85 	bl	8006fe0 <vPortFree>
				vPortFree( pxTCB );
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fb82 	bl	8006fe0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80068dc:	e018      	b.n	8006910 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d103      	bne.n	80068f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fb79 	bl	8006fe0 <vPortFree>
	}
 80068ee:	e00f      	b.n	8006910 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d00a      	beq.n	8006910 <prvDeleteTCB+0x60>
	__asm volatile
 80068fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	60fb      	str	r3, [r7, #12]
}
 800690c:	bf00      	nop
 800690e:	e7fe      	b.n	800690e <prvDeleteTCB+0x5e>
	}
 8006910:	bf00      	nop
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800691e:	4b0c      	ldr	r3, [pc, #48]	; (8006950 <prvResetNextTaskUnblockTime+0x38>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d104      	bne.n	8006932 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006928:	4b0a      	ldr	r3, [pc, #40]	; (8006954 <prvResetNextTaskUnblockTime+0x3c>)
 800692a:	f04f 32ff 	mov.w	r2, #4294967295
 800692e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006930:	e008      	b.n	8006944 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006932:	4b07      	ldr	r3, [pc, #28]	; (8006950 <prvResetNextTaskUnblockTime+0x38>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	4a04      	ldr	r2, [pc, #16]	; (8006954 <prvResetNextTaskUnblockTime+0x3c>)
 8006942:	6013      	str	r3, [r2, #0]
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	200075e8 	.word	0x200075e8
 8006954:	20007650 	.word	0x20007650

08006958 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006962:	4b29      	ldr	r3, [pc, #164]	; (8006a08 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006968:	4b28      	ldr	r3, [pc, #160]	; (8006a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3304      	adds	r3, #4
 800696e:	4618      	mov	r0, r3
 8006970:	f7ff fae1 	bl	8005f36 <uxListRemove>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10b      	bne.n	8006992 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800697a:	4b24      	ldr	r3, [pc, #144]	; (8006a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006980:	2201      	movs	r2, #1
 8006982:	fa02 f303 	lsl.w	r3, r2, r3
 8006986:	43da      	mvns	r2, r3
 8006988:	4b21      	ldr	r3, [pc, #132]	; (8006a10 <prvAddCurrentTaskToDelayedList+0xb8>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4013      	ands	r3, r2
 800698e:	4a20      	ldr	r2, [pc, #128]	; (8006a10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006990:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006998:	d10a      	bne.n	80069b0 <prvAddCurrentTaskToDelayedList+0x58>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d007      	beq.n	80069b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069a0:	4b1a      	ldr	r3, [pc, #104]	; (8006a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3304      	adds	r3, #4
 80069a6:	4619      	mov	r1, r3
 80069a8:	481a      	ldr	r0, [pc, #104]	; (8006a14 <prvAddCurrentTaskToDelayedList+0xbc>)
 80069aa:	f7ff fa67 	bl	8005e7c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80069ae:	e026      	b.n	80069fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4413      	add	r3, r2
 80069b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069b8:	4b14      	ldr	r3, [pc, #80]	; (8006a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d209      	bcs.n	80069dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069c8:	4b13      	ldr	r3, [pc, #76]	; (8006a18 <prvAddCurrentTaskToDelayedList+0xc0>)
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	4b0f      	ldr	r3, [pc, #60]	; (8006a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3304      	adds	r3, #4
 80069d2:	4619      	mov	r1, r3
 80069d4:	4610      	mov	r0, r2
 80069d6:	f7ff fa75 	bl	8005ec4 <vListInsert>
}
 80069da:	e010      	b.n	80069fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069dc:	4b0f      	ldr	r3, [pc, #60]	; (8006a1c <prvAddCurrentTaskToDelayedList+0xc4>)
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	3304      	adds	r3, #4
 80069e6:	4619      	mov	r1, r3
 80069e8:	4610      	mov	r0, r2
 80069ea:	f7ff fa6b 	bl	8005ec4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80069ee:	4b0c      	ldr	r3, [pc, #48]	; (8006a20 <prvAddCurrentTaskToDelayedList+0xc8>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d202      	bcs.n	80069fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80069f8:	4a09      	ldr	r2, [pc, #36]	; (8006a20 <prvAddCurrentTaskToDelayedList+0xc8>)
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	6013      	str	r3, [r2, #0]
}
 80069fe:	bf00      	nop
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	20007634 	.word	0x20007634
 8006a0c:	20007530 	.word	0x20007530
 8006a10:	20007638 	.word	0x20007638
 8006a14:	2000761c 	.word	0x2000761c
 8006a18:	200075ec 	.word	0x200075ec
 8006a1c:	200075e8 	.word	0x200075e8
 8006a20:	20007650 	.word	0x20007650

08006a24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	3b04      	subs	r3, #4
 8006a34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	3b04      	subs	r3, #4
 8006a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f023 0201 	bic.w	r2, r3, #1
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	3b04      	subs	r3, #4
 8006a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a54:	4a0c      	ldr	r2, [pc, #48]	; (8006a88 <pxPortInitialiseStack+0x64>)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	3b14      	subs	r3, #20
 8006a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	3b04      	subs	r3, #4
 8006a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f06f 0202 	mvn.w	r2, #2
 8006a72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	3b20      	subs	r3, #32
 8006a78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr
 8006a88:	08006a8d 	.word	0x08006a8d

08006a8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006a92:	2300      	movs	r3, #0
 8006a94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a96:	4b12      	ldr	r3, [pc, #72]	; (8006ae0 <prvTaskExitError+0x54>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a9e:	d00a      	beq.n	8006ab6 <prvTaskExitError+0x2a>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	60fb      	str	r3, [r7, #12]
}
 8006ab2:	bf00      	nop
 8006ab4:	e7fe      	b.n	8006ab4 <prvTaskExitError+0x28>
	__asm volatile
 8006ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aba:	f383 8811 	msr	BASEPRI, r3
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	60bb      	str	r3, [r7, #8]
}
 8006ac8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006aca:	bf00      	nop
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d0fc      	beq.n	8006acc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ad2:	bf00      	nop
 8006ad4:	bf00      	nop
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	20000064 	.word	0x20000064
	...

08006af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006af0:	4b07      	ldr	r3, [pc, #28]	; (8006b10 <pxCurrentTCBConst2>)
 8006af2:	6819      	ldr	r1, [r3, #0]
 8006af4:	6808      	ldr	r0, [r1, #0]
 8006af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006afa:	f380 8809 	msr	PSP, r0
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f04f 0000 	mov.w	r0, #0
 8006b06:	f380 8811 	msr	BASEPRI, r0
 8006b0a:	4770      	bx	lr
 8006b0c:	f3af 8000 	nop.w

08006b10 <pxCurrentTCBConst2>:
 8006b10:	20007530 	.word	0x20007530
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b14:	bf00      	nop
 8006b16:	bf00      	nop

08006b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b18:	4808      	ldr	r0, [pc, #32]	; (8006b3c <prvPortStartFirstTask+0x24>)
 8006b1a:	6800      	ldr	r0, [r0, #0]
 8006b1c:	6800      	ldr	r0, [r0, #0]
 8006b1e:	f380 8808 	msr	MSP, r0
 8006b22:	f04f 0000 	mov.w	r0, #0
 8006b26:	f380 8814 	msr	CONTROL, r0
 8006b2a:	b662      	cpsie	i
 8006b2c:	b661      	cpsie	f
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	df00      	svc	0
 8006b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b3a:	bf00      	nop
 8006b3c:	e000ed08 	.word	0xe000ed08

08006b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b46:	4b46      	ldr	r3, [pc, #280]	; (8006c60 <xPortStartScheduler+0x120>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a46      	ldr	r2, [pc, #280]	; (8006c64 <xPortStartScheduler+0x124>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d10a      	bne.n	8006b66 <xPortStartScheduler+0x26>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	613b      	str	r3, [r7, #16]
}
 8006b62:	bf00      	nop
 8006b64:	e7fe      	b.n	8006b64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b66:	4b3e      	ldr	r3, [pc, #248]	; (8006c60 <xPortStartScheduler+0x120>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a3f      	ldr	r2, [pc, #252]	; (8006c68 <xPortStartScheduler+0x128>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d10a      	bne.n	8006b86 <xPortStartScheduler+0x46>
	__asm volatile
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	60fb      	str	r3, [r7, #12]
}
 8006b82:	bf00      	nop
 8006b84:	e7fe      	b.n	8006b84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b86:	4b39      	ldr	r3, [pc, #228]	; (8006c6c <xPortStartScheduler+0x12c>)
 8006b88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	22ff      	movs	r2, #255	; 0xff
 8006b96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ba0:	78fb      	ldrb	r3, [r7, #3]
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	4b31      	ldr	r3, [pc, #196]	; (8006c70 <xPortStartScheduler+0x130>)
 8006bac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006bae:	4b31      	ldr	r3, [pc, #196]	; (8006c74 <xPortStartScheduler+0x134>)
 8006bb0:	2207      	movs	r2, #7
 8006bb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bb4:	e009      	b.n	8006bca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006bb6:	4b2f      	ldr	r3, [pc, #188]	; (8006c74 <xPortStartScheduler+0x134>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	4a2d      	ldr	r2, [pc, #180]	; (8006c74 <xPortStartScheduler+0x134>)
 8006bbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006bc0:	78fb      	ldrb	r3, [r7, #3]
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	005b      	lsls	r3, r3, #1
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bca:	78fb      	ldrb	r3, [r7, #3]
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bd2:	2b80      	cmp	r3, #128	; 0x80
 8006bd4:	d0ef      	beq.n	8006bb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006bd6:	4b27      	ldr	r3, [pc, #156]	; (8006c74 <xPortStartScheduler+0x134>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f1c3 0307 	rsb	r3, r3, #7
 8006bde:	2b04      	cmp	r3, #4
 8006be0:	d00a      	beq.n	8006bf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	60bb      	str	r3, [r7, #8]
}
 8006bf4:	bf00      	nop
 8006bf6:	e7fe      	b.n	8006bf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006bf8:	4b1e      	ldr	r3, [pc, #120]	; (8006c74 <xPortStartScheduler+0x134>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	021b      	lsls	r3, r3, #8
 8006bfe:	4a1d      	ldr	r2, [pc, #116]	; (8006c74 <xPortStartScheduler+0x134>)
 8006c00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c02:	4b1c      	ldr	r3, [pc, #112]	; (8006c74 <xPortStartScheduler+0x134>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c0a:	4a1a      	ldr	r2, [pc, #104]	; (8006c74 <xPortStartScheduler+0x134>)
 8006c0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c16:	4b18      	ldr	r3, [pc, #96]	; (8006c78 <xPortStartScheduler+0x138>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a17      	ldr	r2, [pc, #92]	; (8006c78 <xPortStartScheduler+0x138>)
 8006c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c22:	4b15      	ldr	r3, [pc, #84]	; (8006c78 <xPortStartScheduler+0x138>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a14      	ldr	r2, [pc, #80]	; (8006c78 <xPortStartScheduler+0x138>)
 8006c28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c2e:	f000 f8dd 	bl	8006dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c32:	4b12      	ldr	r3, [pc, #72]	; (8006c7c <xPortStartScheduler+0x13c>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006c38:	f000 f8fc 	bl	8006e34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c3c:	4b10      	ldr	r3, [pc, #64]	; (8006c80 <xPortStartScheduler+0x140>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a0f      	ldr	r2, [pc, #60]	; (8006c80 <xPortStartScheduler+0x140>)
 8006c42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006c46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c48:	f7ff ff66 	bl	8006b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c4c:	f7ff fd48 	bl	80066e0 <vTaskSwitchContext>
	prvTaskExitError();
 8006c50:	f7ff ff1c 	bl	8006a8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3718      	adds	r7, #24
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	e000ed00 	.word	0xe000ed00
 8006c64:	410fc271 	.word	0x410fc271
 8006c68:	410fc270 	.word	0x410fc270
 8006c6c:	e000e400 	.word	0xe000e400
 8006c70:	2000765c 	.word	0x2000765c
 8006c74:	20007660 	.word	0x20007660
 8006c78:	e000ed20 	.word	0xe000ed20
 8006c7c:	20000064 	.word	0x20000064
 8006c80:	e000ef34 	.word	0xe000ef34

08006c84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
	__asm volatile
 8006c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8e:	f383 8811 	msr	BASEPRI, r3
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	607b      	str	r3, [r7, #4]
}
 8006c9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c9e:	4b0f      	ldr	r3, [pc, #60]	; (8006cdc <vPortEnterCritical+0x58>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	4a0d      	ldr	r2, [pc, #52]	; (8006cdc <vPortEnterCritical+0x58>)
 8006ca6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ca8:	4b0c      	ldr	r3, [pc, #48]	; (8006cdc <vPortEnterCritical+0x58>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d10f      	bne.n	8006cd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006cb0:	4b0b      	ldr	r3, [pc, #44]	; (8006ce0 <vPortEnterCritical+0x5c>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00a      	beq.n	8006cd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	603b      	str	r3, [r7, #0]
}
 8006ccc:	bf00      	nop
 8006cce:	e7fe      	b.n	8006cce <vPortEnterCritical+0x4a>
	}
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	20000064 	.word	0x20000064
 8006ce0:	e000ed04 	.word	0xe000ed04

08006ce4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006cea:	4b12      	ldr	r3, [pc, #72]	; (8006d34 <vPortExitCritical+0x50>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10a      	bne.n	8006d08 <vPortExitCritical+0x24>
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	607b      	str	r3, [r7, #4]
}
 8006d04:	bf00      	nop
 8006d06:	e7fe      	b.n	8006d06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006d08:	4b0a      	ldr	r3, [pc, #40]	; (8006d34 <vPortExitCritical+0x50>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	4a09      	ldr	r2, [pc, #36]	; (8006d34 <vPortExitCritical+0x50>)
 8006d10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d12:	4b08      	ldr	r3, [pc, #32]	; (8006d34 <vPortExitCritical+0x50>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d105      	bne.n	8006d26 <vPortExitCritical+0x42>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006d24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	20000064 	.word	0x20000064
	...

08006d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d40:	f3ef 8009 	mrs	r0, PSP
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	4b15      	ldr	r3, [pc, #84]	; (8006da0 <pxCurrentTCBConst>)
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	f01e 0f10 	tst.w	lr, #16
 8006d50:	bf08      	it	eq
 8006d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d5a:	6010      	str	r0, [r2, #0]
 8006d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d64:	f380 8811 	msr	BASEPRI, r0
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f7ff fcb6 	bl	80066e0 <vTaskSwitchContext>
 8006d74:	f04f 0000 	mov.w	r0, #0
 8006d78:	f380 8811 	msr	BASEPRI, r0
 8006d7c:	bc09      	pop	{r0, r3}
 8006d7e:	6819      	ldr	r1, [r3, #0]
 8006d80:	6808      	ldr	r0, [r1, #0]
 8006d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d86:	f01e 0f10 	tst.w	lr, #16
 8006d8a:	bf08      	it	eq
 8006d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d90:	f380 8809 	msr	PSP, r0
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	f3af 8000 	nop.w

08006da0 <pxCurrentTCBConst>:
 8006da0:	20007530 	.word	0x20007530
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006da4:	bf00      	nop
 8006da6:	bf00      	nop

08006da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
	__asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	607b      	str	r3, [r7, #4]
}
 8006dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006dc2:	f7ff fbd5 	bl	8006570 <xTaskIncrementTick>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d003      	beq.n	8006dd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006dcc:	4b06      	ldr	r3, [pc, #24]	; (8006de8 <SysTick_Handler+0x40>)
 8006dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dd2:	601a      	str	r2, [r3, #0]
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	f383 8811 	msr	BASEPRI, r3
}
 8006dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006de0:	bf00      	nop
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	e000ed04 	.word	0xe000ed04

08006dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006dec:	b480      	push	{r7}
 8006dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006df0:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <vPortSetupTimerInterrupt+0x34>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006df6:	4b0b      	ldr	r3, [pc, #44]	; (8006e24 <vPortSetupTimerInterrupt+0x38>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006dfc:	4b0a      	ldr	r3, [pc, #40]	; (8006e28 <vPortSetupTimerInterrupt+0x3c>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a0a      	ldr	r2, [pc, #40]	; (8006e2c <vPortSetupTimerInterrupt+0x40>)
 8006e02:	fba2 2303 	umull	r2, r3, r2, r3
 8006e06:	099b      	lsrs	r3, r3, #6
 8006e08:	4a09      	ldr	r2, [pc, #36]	; (8006e30 <vPortSetupTimerInterrupt+0x44>)
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e0e:	4b04      	ldr	r3, [pc, #16]	; (8006e20 <vPortSetupTimerInterrupt+0x34>)
 8006e10:	2207      	movs	r2, #7
 8006e12:	601a      	str	r2, [r3, #0]
}
 8006e14:	bf00      	nop
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	e000e010 	.word	0xe000e010
 8006e24:	e000e018 	.word	0xe000e018
 8006e28:	20000058 	.word	0x20000058
 8006e2c:	10624dd3 	.word	0x10624dd3
 8006e30:	e000e014 	.word	0xe000e014

08006e34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006e34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006e44 <vPortEnableVFP+0x10>
 8006e38:	6801      	ldr	r1, [r0, #0]
 8006e3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006e3e:	6001      	str	r1, [r0, #0]
 8006e40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006e42:	bf00      	nop
 8006e44:	e000ed88 	.word	0xe000ed88

08006e48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b08a      	sub	sp, #40	; 0x28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e50:	2300      	movs	r3, #0
 8006e52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e54:	f7ff fae2 	bl	800641c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e58:	4b5b      	ldr	r3, [pc, #364]	; (8006fc8 <pvPortMalloc+0x180>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e60:	f000 f920 	bl	80070a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e64:	4b59      	ldr	r3, [pc, #356]	; (8006fcc <pvPortMalloc+0x184>)
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f040 8093 	bne.w	8006f98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d01d      	beq.n	8006eb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006e78:	2208      	movs	r2, #8
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f003 0307 	and.w	r3, r3, #7
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d014      	beq.n	8006eb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f023 0307 	bic.w	r3, r3, #7
 8006e90:	3308      	adds	r3, #8
 8006e92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f003 0307 	and.w	r3, r3, #7
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00a      	beq.n	8006eb4 <pvPortMalloc+0x6c>
	__asm volatile
 8006e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	617b      	str	r3, [r7, #20]
}
 8006eb0:	bf00      	nop
 8006eb2:	e7fe      	b.n	8006eb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d06e      	beq.n	8006f98 <pvPortMalloc+0x150>
 8006eba:	4b45      	ldr	r3, [pc, #276]	; (8006fd0 <pvPortMalloc+0x188>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d869      	bhi.n	8006f98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ec4:	4b43      	ldr	r3, [pc, #268]	; (8006fd4 <pvPortMalloc+0x18c>)
 8006ec6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ec8:	4b42      	ldr	r3, [pc, #264]	; (8006fd4 <pvPortMalloc+0x18c>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ece:	e004      	b.n	8006eda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d903      	bls.n	8006eec <pvPortMalloc+0xa4>
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1f1      	bne.n	8006ed0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006eec:	4b36      	ldr	r3, [pc, #216]	; (8006fc8 <pvPortMalloc+0x180>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d050      	beq.n	8006f98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2208      	movs	r2, #8
 8006efc:	4413      	add	r3, r2
 8006efe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	1ad2      	subs	r2, r2, r3
 8006f10:	2308      	movs	r3, #8
 8006f12:	005b      	lsls	r3, r3, #1
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d91f      	bls.n	8006f58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	f003 0307 	and.w	r3, r3, #7
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <pvPortMalloc+0xf8>
	__asm volatile
 8006f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2e:	f383 8811 	msr	BASEPRI, r3
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	613b      	str	r3, [r7, #16]
}
 8006f3c:	bf00      	nop
 8006f3e:	e7fe      	b.n	8006f3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f42:	685a      	ldr	r2, [r3, #4]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	1ad2      	subs	r2, r2, r3
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f52:	69b8      	ldr	r0, [r7, #24]
 8006f54:	f000 f908 	bl	8007168 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f58:	4b1d      	ldr	r3, [pc, #116]	; (8006fd0 <pvPortMalloc+0x188>)
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	4a1b      	ldr	r2, [pc, #108]	; (8006fd0 <pvPortMalloc+0x188>)
 8006f64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f66:	4b1a      	ldr	r3, [pc, #104]	; (8006fd0 <pvPortMalloc+0x188>)
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	4b1b      	ldr	r3, [pc, #108]	; (8006fd8 <pvPortMalloc+0x190>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d203      	bcs.n	8006f7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f72:	4b17      	ldr	r3, [pc, #92]	; (8006fd0 <pvPortMalloc+0x188>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a18      	ldr	r2, [pc, #96]	; (8006fd8 <pvPortMalloc+0x190>)
 8006f78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	4b13      	ldr	r3, [pc, #76]	; (8006fcc <pvPortMalloc+0x184>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	431a      	orrs	r2, r3
 8006f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f8e:	4b13      	ldr	r3, [pc, #76]	; (8006fdc <pvPortMalloc+0x194>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3301      	adds	r3, #1
 8006f94:	4a11      	ldr	r2, [pc, #68]	; (8006fdc <pvPortMalloc+0x194>)
 8006f96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f98:	f7ff fa4e 	bl	8006438 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	f003 0307 	and.w	r3, r3, #7
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00a      	beq.n	8006fbc <pvPortMalloc+0x174>
	__asm volatile
 8006fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	60fb      	str	r3, [r7, #12]
}
 8006fb8:	bf00      	nop
 8006fba:	e7fe      	b.n	8006fba <pvPortMalloc+0x172>
	return pvReturn;
 8006fbc:	69fb      	ldr	r3, [r7, #28]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3728      	adds	r7, #40	; 0x28
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	2000b26c 	.word	0x2000b26c
 8006fcc:	2000b280 	.word	0x2000b280
 8006fd0:	2000b270 	.word	0x2000b270
 8006fd4:	2000b264 	.word	0x2000b264
 8006fd8:	2000b274 	.word	0x2000b274
 8006fdc:	2000b278 	.word	0x2000b278

08006fe0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d04d      	beq.n	800708e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ff2:	2308      	movs	r3, #8
 8006ff4:	425b      	negs	r3, r3
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	4b24      	ldr	r3, [pc, #144]	; (8007098 <vPortFree+0xb8>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4013      	ands	r3, r2
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10a      	bne.n	8007024 <vPortFree+0x44>
	__asm volatile
 800700e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	60fb      	str	r3, [r7, #12]
}
 8007020:	bf00      	nop
 8007022:	e7fe      	b.n	8007022 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00a      	beq.n	8007042 <vPortFree+0x62>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	60bb      	str	r3, [r7, #8]
}
 800703e:	bf00      	nop
 8007040:	e7fe      	b.n	8007040 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	4b14      	ldr	r3, [pc, #80]	; (8007098 <vPortFree+0xb8>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4013      	ands	r3, r2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d01e      	beq.n	800708e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d11a      	bne.n	800708e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	4b0e      	ldr	r3, [pc, #56]	; (8007098 <vPortFree+0xb8>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	43db      	mvns	r3, r3
 8007062:	401a      	ands	r2, r3
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007068:	f7ff f9d8 	bl	800641c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	4b0a      	ldr	r3, [pc, #40]	; (800709c <vPortFree+0xbc>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4413      	add	r3, r2
 8007076:	4a09      	ldr	r2, [pc, #36]	; (800709c <vPortFree+0xbc>)
 8007078:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800707a:	6938      	ldr	r0, [r7, #16]
 800707c:	f000 f874 	bl	8007168 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007080:	4b07      	ldr	r3, [pc, #28]	; (80070a0 <vPortFree+0xc0>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	3301      	adds	r3, #1
 8007086:	4a06      	ldr	r2, [pc, #24]	; (80070a0 <vPortFree+0xc0>)
 8007088:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800708a:	f7ff f9d5 	bl	8006438 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800708e:	bf00      	nop
 8007090:	3718      	adds	r7, #24
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	2000b280 	.word	0x2000b280
 800709c:	2000b270 	.word	0x2000b270
 80070a0:	2000b27c 	.word	0x2000b27c

080070a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80070ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070b0:	4b27      	ldr	r3, [pc, #156]	; (8007150 <prvHeapInit+0xac>)
 80070b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f003 0307 	and.w	r3, r3, #7
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00c      	beq.n	80070d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	3307      	adds	r3, #7
 80070c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f023 0307 	bic.w	r3, r3, #7
 80070ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	4a1f      	ldr	r2, [pc, #124]	; (8007150 <prvHeapInit+0xac>)
 80070d4:	4413      	add	r3, r2
 80070d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070dc:	4a1d      	ldr	r2, [pc, #116]	; (8007154 <prvHeapInit+0xb0>)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070e2:	4b1c      	ldr	r3, [pc, #112]	; (8007154 <prvHeapInit+0xb0>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	4413      	add	r3, r2
 80070ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070f0:	2208      	movs	r2, #8
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	1a9b      	subs	r3, r3, r2
 80070f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f023 0307 	bic.w	r3, r3, #7
 80070fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	4a15      	ldr	r2, [pc, #84]	; (8007158 <prvHeapInit+0xb4>)
 8007104:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007106:	4b14      	ldr	r3, [pc, #80]	; (8007158 <prvHeapInit+0xb4>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2200      	movs	r2, #0
 800710c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800710e:	4b12      	ldr	r3, [pc, #72]	; (8007158 <prvHeapInit+0xb4>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2200      	movs	r2, #0
 8007114:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	1ad2      	subs	r2, r2, r3
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007124:	4b0c      	ldr	r3, [pc, #48]	; (8007158 <prvHeapInit+0xb4>)
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	4a0a      	ldr	r2, [pc, #40]	; (800715c <prvHeapInit+0xb8>)
 8007132:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	4a09      	ldr	r2, [pc, #36]	; (8007160 <prvHeapInit+0xbc>)
 800713a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800713c:	4b09      	ldr	r3, [pc, #36]	; (8007164 <prvHeapInit+0xc0>)
 800713e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007142:	601a      	str	r2, [r3, #0]
}
 8007144:	bf00      	nop
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	20007664 	.word	0x20007664
 8007154:	2000b264 	.word	0x2000b264
 8007158:	2000b26c 	.word	0x2000b26c
 800715c:	2000b274 	.word	0x2000b274
 8007160:	2000b270 	.word	0x2000b270
 8007164:	2000b280 	.word	0x2000b280

08007168 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007170:	4b28      	ldr	r3, [pc, #160]	; (8007214 <prvInsertBlockIntoFreeList+0xac>)
 8007172:	60fb      	str	r3, [r7, #12]
 8007174:	e002      	b.n	800717c <prvInsertBlockIntoFreeList+0x14>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	60fb      	str	r3, [r7, #12]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	429a      	cmp	r2, r3
 8007184:	d8f7      	bhi.n	8007176 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	4413      	add	r3, r2
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	429a      	cmp	r2, r3
 8007196:	d108      	bne.n	80071aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	441a      	add	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	441a      	add	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d118      	bne.n	80071f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	4b15      	ldr	r3, [pc, #84]	; (8007218 <prvInsertBlockIntoFreeList+0xb0>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d00d      	beq.n	80071e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	441a      	add	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	e008      	b.n	80071f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071e6:	4b0c      	ldr	r3, [pc, #48]	; (8007218 <prvInsertBlockIntoFreeList+0xb0>)
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	e003      	b.n	80071f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d002      	beq.n	8007206 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007206:	bf00      	nop
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	2000b264 	.word	0x2000b264
 8007218:	2000b26c 	.word	0x2000b26c

0800721c <siprintf>:
 800721c:	b40e      	push	{r1, r2, r3}
 800721e:	b500      	push	{lr}
 8007220:	b09c      	sub	sp, #112	; 0x70
 8007222:	ab1d      	add	r3, sp, #116	; 0x74
 8007224:	9002      	str	r0, [sp, #8]
 8007226:	9006      	str	r0, [sp, #24]
 8007228:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800722c:	4809      	ldr	r0, [pc, #36]	; (8007254 <siprintf+0x38>)
 800722e:	9107      	str	r1, [sp, #28]
 8007230:	9104      	str	r1, [sp, #16]
 8007232:	4909      	ldr	r1, [pc, #36]	; (8007258 <siprintf+0x3c>)
 8007234:	f853 2b04 	ldr.w	r2, [r3], #4
 8007238:	9105      	str	r1, [sp, #20]
 800723a:	6800      	ldr	r0, [r0, #0]
 800723c:	9301      	str	r3, [sp, #4]
 800723e:	a902      	add	r1, sp, #8
 8007240:	f000 f9f6 	bl	8007630 <_svfiprintf_r>
 8007244:	9b02      	ldr	r3, [sp, #8]
 8007246:	2200      	movs	r2, #0
 8007248:	701a      	strb	r2, [r3, #0]
 800724a:	b01c      	add	sp, #112	; 0x70
 800724c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007250:	b003      	add	sp, #12
 8007252:	4770      	bx	lr
 8007254:	200000b4 	.word	0x200000b4
 8007258:	ffff0208 	.word	0xffff0208

0800725c <memset>:
 800725c:	4402      	add	r2, r0
 800725e:	4603      	mov	r3, r0
 8007260:	4293      	cmp	r3, r2
 8007262:	d100      	bne.n	8007266 <memset+0xa>
 8007264:	4770      	bx	lr
 8007266:	f803 1b01 	strb.w	r1, [r3], #1
 800726a:	e7f9      	b.n	8007260 <memset+0x4>

0800726c <_reclaim_reent>:
 800726c:	4b29      	ldr	r3, [pc, #164]	; (8007314 <_reclaim_reent+0xa8>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4283      	cmp	r3, r0
 8007272:	b570      	push	{r4, r5, r6, lr}
 8007274:	4604      	mov	r4, r0
 8007276:	d04b      	beq.n	8007310 <_reclaim_reent+0xa4>
 8007278:	69c3      	ldr	r3, [r0, #28]
 800727a:	b143      	cbz	r3, 800728e <_reclaim_reent+0x22>
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d144      	bne.n	800730c <_reclaim_reent+0xa0>
 8007282:	69e3      	ldr	r3, [r4, #28]
 8007284:	6819      	ldr	r1, [r3, #0]
 8007286:	b111      	cbz	r1, 800728e <_reclaim_reent+0x22>
 8007288:	4620      	mov	r0, r4
 800728a:	f000 f87f 	bl	800738c <_free_r>
 800728e:	6961      	ldr	r1, [r4, #20]
 8007290:	b111      	cbz	r1, 8007298 <_reclaim_reent+0x2c>
 8007292:	4620      	mov	r0, r4
 8007294:	f000 f87a 	bl	800738c <_free_r>
 8007298:	69e1      	ldr	r1, [r4, #28]
 800729a:	b111      	cbz	r1, 80072a2 <_reclaim_reent+0x36>
 800729c:	4620      	mov	r0, r4
 800729e:	f000 f875 	bl	800738c <_free_r>
 80072a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80072a4:	b111      	cbz	r1, 80072ac <_reclaim_reent+0x40>
 80072a6:	4620      	mov	r0, r4
 80072a8:	f000 f870 	bl	800738c <_free_r>
 80072ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072ae:	b111      	cbz	r1, 80072b6 <_reclaim_reent+0x4a>
 80072b0:	4620      	mov	r0, r4
 80072b2:	f000 f86b 	bl	800738c <_free_r>
 80072b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80072b8:	b111      	cbz	r1, 80072c0 <_reclaim_reent+0x54>
 80072ba:	4620      	mov	r0, r4
 80072bc:	f000 f866 	bl	800738c <_free_r>
 80072c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80072c2:	b111      	cbz	r1, 80072ca <_reclaim_reent+0x5e>
 80072c4:	4620      	mov	r0, r4
 80072c6:	f000 f861 	bl	800738c <_free_r>
 80072ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80072cc:	b111      	cbz	r1, 80072d4 <_reclaim_reent+0x68>
 80072ce:	4620      	mov	r0, r4
 80072d0:	f000 f85c 	bl	800738c <_free_r>
 80072d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80072d6:	b111      	cbz	r1, 80072de <_reclaim_reent+0x72>
 80072d8:	4620      	mov	r0, r4
 80072da:	f000 f857 	bl	800738c <_free_r>
 80072de:	6a23      	ldr	r3, [r4, #32]
 80072e0:	b1b3      	cbz	r3, 8007310 <_reclaim_reent+0xa4>
 80072e2:	4620      	mov	r0, r4
 80072e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80072e8:	4718      	bx	r3
 80072ea:	5949      	ldr	r1, [r1, r5]
 80072ec:	b941      	cbnz	r1, 8007300 <_reclaim_reent+0x94>
 80072ee:	3504      	adds	r5, #4
 80072f0:	69e3      	ldr	r3, [r4, #28]
 80072f2:	2d80      	cmp	r5, #128	; 0x80
 80072f4:	68d9      	ldr	r1, [r3, #12]
 80072f6:	d1f8      	bne.n	80072ea <_reclaim_reent+0x7e>
 80072f8:	4620      	mov	r0, r4
 80072fa:	f000 f847 	bl	800738c <_free_r>
 80072fe:	e7c0      	b.n	8007282 <_reclaim_reent+0x16>
 8007300:	680e      	ldr	r6, [r1, #0]
 8007302:	4620      	mov	r0, r4
 8007304:	f000 f842 	bl	800738c <_free_r>
 8007308:	4631      	mov	r1, r6
 800730a:	e7ef      	b.n	80072ec <_reclaim_reent+0x80>
 800730c:	2500      	movs	r5, #0
 800730e:	e7ef      	b.n	80072f0 <_reclaim_reent+0x84>
 8007310:	bd70      	pop	{r4, r5, r6, pc}
 8007312:	bf00      	nop
 8007314:	200000b4 	.word	0x200000b4

08007318 <__errno>:
 8007318:	4b01      	ldr	r3, [pc, #4]	; (8007320 <__errno+0x8>)
 800731a:	6818      	ldr	r0, [r3, #0]
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	200000b4 	.word	0x200000b4

08007324 <__libc_init_array>:
 8007324:	b570      	push	{r4, r5, r6, lr}
 8007326:	4d0d      	ldr	r5, [pc, #52]	; (800735c <__libc_init_array+0x38>)
 8007328:	4c0d      	ldr	r4, [pc, #52]	; (8007360 <__libc_init_array+0x3c>)
 800732a:	1b64      	subs	r4, r4, r5
 800732c:	10a4      	asrs	r4, r4, #2
 800732e:	2600      	movs	r6, #0
 8007330:	42a6      	cmp	r6, r4
 8007332:	d109      	bne.n	8007348 <__libc_init_array+0x24>
 8007334:	4d0b      	ldr	r5, [pc, #44]	; (8007364 <__libc_init_array+0x40>)
 8007336:	4c0c      	ldr	r4, [pc, #48]	; (8007368 <__libc_init_array+0x44>)
 8007338:	f000 fc6a 	bl	8007c10 <_init>
 800733c:	1b64      	subs	r4, r4, r5
 800733e:	10a4      	asrs	r4, r4, #2
 8007340:	2600      	movs	r6, #0
 8007342:	42a6      	cmp	r6, r4
 8007344:	d105      	bne.n	8007352 <__libc_init_array+0x2e>
 8007346:	bd70      	pop	{r4, r5, r6, pc}
 8007348:	f855 3b04 	ldr.w	r3, [r5], #4
 800734c:	4798      	blx	r3
 800734e:	3601      	adds	r6, #1
 8007350:	e7ee      	b.n	8007330 <__libc_init_array+0xc>
 8007352:	f855 3b04 	ldr.w	r3, [r5], #4
 8007356:	4798      	blx	r3
 8007358:	3601      	adds	r6, #1
 800735a:	e7f2      	b.n	8007342 <__libc_init_array+0x1e>
 800735c:	080080a8 	.word	0x080080a8
 8007360:	080080a8 	.word	0x080080a8
 8007364:	080080a8 	.word	0x080080a8
 8007368:	080080ac 	.word	0x080080ac

0800736c <__retarget_lock_acquire_recursive>:
 800736c:	4770      	bx	lr

0800736e <__retarget_lock_release_recursive>:
 800736e:	4770      	bx	lr

08007370 <memcpy>:
 8007370:	440a      	add	r2, r1
 8007372:	4291      	cmp	r1, r2
 8007374:	f100 33ff 	add.w	r3, r0, #4294967295
 8007378:	d100      	bne.n	800737c <memcpy+0xc>
 800737a:	4770      	bx	lr
 800737c:	b510      	push	{r4, lr}
 800737e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007382:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007386:	4291      	cmp	r1, r2
 8007388:	d1f9      	bne.n	800737e <memcpy+0xe>
 800738a:	bd10      	pop	{r4, pc}

0800738c <_free_r>:
 800738c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800738e:	2900      	cmp	r1, #0
 8007390:	d044      	beq.n	800741c <_free_r+0x90>
 8007392:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007396:	9001      	str	r0, [sp, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	f1a1 0404 	sub.w	r4, r1, #4
 800739e:	bfb8      	it	lt
 80073a0:	18e4      	addlt	r4, r4, r3
 80073a2:	f000 f8df 	bl	8007564 <__malloc_lock>
 80073a6:	4a1e      	ldr	r2, [pc, #120]	; (8007420 <_free_r+0x94>)
 80073a8:	9801      	ldr	r0, [sp, #4]
 80073aa:	6813      	ldr	r3, [r2, #0]
 80073ac:	b933      	cbnz	r3, 80073bc <_free_r+0x30>
 80073ae:	6063      	str	r3, [r4, #4]
 80073b0:	6014      	str	r4, [r2, #0]
 80073b2:	b003      	add	sp, #12
 80073b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073b8:	f000 b8da 	b.w	8007570 <__malloc_unlock>
 80073bc:	42a3      	cmp	r3, r4
 80073be:	d908      	bls.n	80073d2 <_free_r+0x46>
 80073c0:	6825      	ldr	r5, [r4, #0]
 80073c2:	1961      	adds	r1, r4, r5
 80073c4:	428b      	cmp	r3, r1
 80073c6:	bf01      	itttt	eq
 80073c8:	6819      	ldreq	r1, [r3, #0]
 80073ca:	685b      	ldreq	r3, [r3, #4]
 80073cc:	1949      	addeq	r1, r1, r5
 80073ce:	6021      	streq	r1, [r4, #0]
 80073d0:	e7ed      	b.n	80073ae <_free_r+0x22>
 80073d2:	461a      	mov	r2, r3
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	b10b      	cbz	r3, 80073dc <_free_r+0x50>
 80073d8:	42a3      	cmp	r3, r4
 80073da:	d9fa      	bls.n	80073d2 <_free_r+0x46>
 80073dc:	6811      	ldr	r1, [r2, #0]
 80073de:	1855      	adds	r5, r2, r1
 80073e0:	42a5      	cmp	r5, r4
 80073e2:	d10b      	bne.n	80073fc <_free_r+0x70>
 80073e4:	6824      	ldr	r4, [r4, #0]
 80073e6:	4421      	add	r1, r4
 80073e8:	1854      	adds	r4, r2, r1
 80073ea:	42a3      	cmp	r3, r4
 80073ec:	6011      	str	r1, [r2, #0]
 80073ee:	d1e0      	bne.n	80073b2 <_free_r+0x26>
 80073f0:	681c      	ldr	r4, [r3, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	6053      	str	r3, [r2, #4]
 80073f6:	440c      	add	r4, r1
 80073f8:	6014      	str	r4, [r2, #0]
 80073fa:	e7da      	b.n	80073b2 <_free_r+0x26>
 80073fc:	d902      	bls.n	8007404 <_free_r+0x78>
 80073fe:	230c      	movs	r3, #12
 8007400:	6003      	str	r3, [r0, #0]
 8007402:	e7d6      	b.n	80073b2 <_free_r+0x26>
 8007404:	6825      	ldr	r5, [r4, #0]
 8007406:	1961      	adds	r1, r4, r5
 8007408:	428b      	cmp	r3, r1
 800740a:	bf04      	itt	eq
 800740c:	6819      	ldreq	r1, [r3, #0]
 800740e:	685b      	ldreq	r3, [r3, #4]
 8007410:	6063      	str	r3, [r4, #4]
 8007412:	bf04      	itt	eq
 8007414:	1949      	addeq	r1, r1, r5
 8007416:	6021      	streq	r1, [r4, #0]
 8007418:	6054      	str	r4, [r2, #4]
 800741a:	e7ca      	b.n	80073b2 <_free_r+0x26>
 800741c:	b003      	add	sp, #12
 800741e:	bd30      	pop	{r4, r5, pc}
 8007420:	2000b3c4 	.word	0x2000b3c4

08007424 <sbrk_aligned>:
 8007424:	b570      	push	{r4, r5, r6, lr}
 8007426:	4e0e      	ldr	r6, [pc, #56]	; (8007460 <sbrk_aligned+0x3c>)
 8007428:	460c      	mov	r4, r1
 800742a:	6831      	ldr	r1, [r6, #0]
 800742c:	4605      	mov	r5, r0
 800742e:	b911      	cbnz	r1, 8007436 <sbrk_aligned+0x12>
 8007430:	f000 fba6 	bl	8007b80 <_sbrk_r>
 8007434:	6030      	str	r0, [r6, #0]
 8007436:	4621      	mov	r1, r4
 8007438:	4628      	mov	r0, r5
 800743a:	f000 fba1 	bl	8007b80 <_sbrk_r>
 800743e:	1c43      	adds	r3, r0, #1
 8007440:	d00a      	beq.n	8007458 <sbrk_aligned+0x34>
 8007442:	1cc4      	adds	r4, r0, #3
 8007444:	f024 0403 	bic.w	r4, r4, #3
 8007448:	42a0      	cmp	r0, r4
 800744a:	d007      	beq.n	800745c <sbrk_aligned+0x38>
 800744c:	1a21      	subs	r1, r4, r0
 800744e:	4628      	mov	r0, r5
 8007450:	f000 fb96 	bl	8007b80 <_sbrk_r>
 8007454:	3001      	adds	r0, #1
 8007456:	d101      	bne.n	800745c <sbrk_aligned+0x38>
 8007458:	f04f 34ff 	mov.w	r4, #4294967295
 800745c:	4620      	mov	r0, r4
 800745e:	bd70      	pop	{r4, r5, r6, pc}
 8007460:	2000b3c8 	.word	0x2000b3c8

08007464 <_malloc_r>:
 8007464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007468:	1ccd      	adds	r5, r1, #3
 800746a:	f025 0503 	bic.w	r5, r5, #3
 800746e:	3508      	adds	r5, #8
 8007470:	2d0c      	cmp	r5, #12
 8007472:	bf38      	it	cc
 8007474:	250c      	movcc	r5, #12
 8007476:	2d00      	cmp	r5, #0
 8007478:	4607      	mov	r7, r0
 800747a:	db01      	blt.n	8007480 <_malloc_r+0x1c>
 800747c:	42a9      	cmp	r1, r5
 800747e:	d905      	bls.n	800748c <_malloc_r+0x28>
 8007480:	230c      	movs	r3, #12
 8007482:	603b      	str	r3, [r7, #0]
 8007484:	2600      	movs	r6, #0
 8007486:	4630      	mov	r0, r6
 8007488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800748c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007560 <_malloc_r+0xfc>
 8007490:	f000 f868 	bl	8007564 <__malloc_lock>
 8007494:	f8d8 3000 	ldr.w	r3, [r8]
 8007498:	461c      	mov	r4, r3
 800749a:	bb5c      	cbnz	r4, 80074f4 <_malloc_r+0x90>
 800749c:	4629      	mov	r1, r5
 800749e:	4638      	mov	r0, r7
 80074a0:	f7ff ffc0 	bl	8007424 <sbrk_aligned>
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	4604      	mov	r4, r0
 80074a8:	d155      	bne.n	8007556 <_malloc_r+0xf2>
 80074aa:	f8d8 4000 	ldr.w	r4, [r8]
 80074ae:	4626      	mov	r6, r4
 80074b0:	2e00      	cmp	r6, #0
 80074b2:	d145      	bne.n	8007540 <_malloc_r+0xdc>
 80074b4:	2c00      	cmp	r4, #0
 80074b6:	d048      	beq.n	800754a <_malloc_r+0xe6>
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	4631      	mov	r1, r6
 80074bc:	4638      	mov	r0, r7
 80074be:	eb04 0903 	add.w	r9, r4, r3
 80074c2:	f000 fb5d 	bl	8007b80 <_sbrk_r>
 80074c6:	4581      	cmp	r9, r0
 80074c8:	d13f      	bne.n	800754a <_malloc_r+0xe6>
 80074ca:	6821      	ldr	r1, [r4, #0]
 80074cc:	1a6d      	subs	r5, r5, r1
 80074ce:	4629      	mov	r1, r5
 80074d0:	4638      	mov	r0, r7
 80074d2:	f7ff ffa7 	bl	8007424 <sbrk_aligned>
 80074d6:	3001      	adds	r0, #1
 80074d8:	d037      	beq.n	800754a <_malloc_r+0xe6>
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	442b      	add	r3, r5
 80074de:	6023      	str	r3, [r4, #0]
 80074e0:	f8d8 3000 	ldr.w	r3, [r8]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d038      	beq.n	800755a <_malloc_r+0xf6>
 80074e8:	685a      	ldr	r2, [r3, #4]
 80074ea:	42a2      	cmp	r2, r4
 80074ec:	d12b      	bne.n	8007546 <_malloc_r+0xe2>
 80074ee:	2200      	movs	r2, #0
 80074f0:	605a      	str	r2, [r3, #4]
 80074f2:	e00f      	b.n	8007514 <_malloc_r+0xb0>
 80074f4:	6822      	ldr	r2, [r4, #0]
 80074f6:	1b52      	subs	r2, r2, r5
 80074f8:	d41f      	bmi.n	800753a <_malloc_r+0xd6>
 80074fa:	2a0b      	cmp	r2, #11
 80074fc:	d917      	bls.n	800752e <_malloc_r+0xca>
 80074fe:	1961      	adds	r1, r4, r5
 8007500:	42a3      	cmp	r3, r4
 8007502:	6025      	str	r5, [r4, #0]
 8007504:	bf18      	it	ne
 8007506:	6059      	strne	r1, [r3, #4]
 8007508:	6863      	ldr	r3, [r4, #4]
 800750a:	bf08      	it	eq
 800750c:	f8c8 1000 	streq.w	r1, [r8]
 8007510:	5162      	str	r2, [r4, r5]
 8007512:	604b      	str	r3, [r1, #4]
 8007514:	4638      	mov	r0, r7
 8007516:	f104 060b 	add.w	r6, r4, #11
 800751a:	f000 f829 	bl	8007570 <__malloc_unlock>
 800751e:	f026 0607 	bic.w	r6, r6, #7
 8007522:	1d23      	adds	r3, r4, #4
 8007524:	1af2      	subs	r2, r6, r3
 8007526:	d0ae      	beq.n	8007486 <_malloc_r+0x22>
 8007528:	1b9b      	subs	r3, r3, r6
 800752a:	50a3      	str	r3, [r4, r2]
 800752c:	e7ab      	b.n	8007486 <_malloc_r+0x22>
 800752e:	42a3      	cmp	r3, r4
 8007530:	6862      	ldr	r2, [r4, #4]
 8007532:	d1dd      	bne.n	80074f0 <_malloc_r+0x8c>
 8007534:	f8c8 2000 	str.w	r2, [r8]
 8007538:	e7ec      	b.n	8007514 <_malloc_r+0xb0>
 800753a:	4623      	mov	r3, r4
 800753c:	6864      	ldr	r4, [r4, #4]
 800753e:	e7ac      	b.n	800749a <_malloc_r+0x36>
 8007540:	4634      	mov	r4, r6
 8007542:	6876      	ldr	r6, [r6, #4]
 8007544:	e7b4      	b.n	80074b0 <_malloc_r+0x4c>
 8007546:	4613      	mov	r3, r2
 8007548:	e7cc      	b.n	80074e4 <_malloc_r+0x80>
 800754a:	230c      	movs	r3, #12
 800754c:	603b      	str	r3, [r7, #0]
 800754e:	4638      	mov	r0, r7
 8007550:	f000 f80e 	bl	8007570 <__malloc_unlock>
 8007554:	e797      	b.n	8007486 <_malloc_r+0x22>
 8007556:	6025      	str	r5, [r4, #0]
 8007558:	e7dc      	b.n	8007514 <_malloc_r+0xb0>
 800755a:	605b      	str	r3, [r3, #4]
 800755c:	deff      	udf	#255	; 0xff
 800755e:	bf00      	nop
 8007560:	2000b3c4 	.word	0x2000b3c4

08007564 <__malloc_lock>:
 8007564:	4801      	ldr	r0, [pc, #4]	; (800756c <__malloc_lock+0x8>)
 8007566:	f7ff bf01 	b.w	800736c <__retarget_lock_acquire_recursive>
 800756a:	bf00      	nop
 800756c:	2000b3c0 	.word	0x2000b3c0

08007570 <__malloc_unlock>:
 8007570:	4801      	ldr	r0, [pc, #4]	; (8007578 <__malloc_unlock+0x8>)
 8007572:	f7ff befc 	b.w	800736e <__retarget_lock_release_recursive>
 8007576:	bf00      	nop
 8007578:	2000b3c0 	.word	0x2000b3c0

0800757c <__ssputs_r>:
 800757c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007580:	688e      	ldr	r6, [r1, #8]
 8007582:	461f      	mov	r7, r3
 8007584:	42be      	cmp	r6, r7
 8007586:	680b      	ldr	r3, [r1, #0]
 8007588:	4682      	mov	sl, r0
 800758a:	460c      	mov	r4, r1
 800758c:	4690      	mov	r8, r2
 800758e:	d82c      	bhi.n	80075ea <__ssputs_r+0x6e>
 8007590:	898a      	ldrh	r2, [r1, #12]
 8007592:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007596:	d026      	beq.n	80075e6 <__ssputs_r+0x6a>
 8007598:	6965      	ldr	r5, [r4, #20]
 800759a:	6909      	ldr	r1, [r1, #16]
 800759c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075a0:	eba3 0901 	sub.w	r9, r3, r1
 80075a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075a8:	1c7b      	adds	r3, r7, #1
 80075aa:	444b      	add	r3, r9
 80075ac:	106d      	asrs	r5, r5, #1
 80075ae:	429d      	cmp	r5, r3
 80075b0:	bf38      	it	cc
 80075b2:	461d      	movcc	r5, r3
 80075b4:	0553      	lsls	r3, r2, #21
 80075b6:	d527      	bpl.n	8007608 <__ssputs_r+0x8c>
 80075b8:	4629      	mov	r1, r5
 80075ba:	f7ff ff53 	bl	8007464 <_malloc_r>
 80075be:	4606      	mov	r6, r0
 80075c0:	b360      	cbz	r0, 800761c <__ssputs_r+0xa0>
 80075c2:	6921      	ldr	r1, [r4, #16]
 80075c4:	464a      	mov	r2, r9
 80075c6:	f7ff fed3 	bl	8007370 <memcpy>
 80075ca:	89a3      	ldrh	r3, [r4, #12]
 80075cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80075d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d4:	81a3      	strh	r3, [r4, #12]
 80075d6:	6126      	str	r6, [r4, #16]
 80075d8:	6165      	str	r5, [r4, #20]
 80075da:	444e      	add	r6, r9
 80075dc:	eba5 0509 	sub.w	r5, r5, r9
 80075e0:	6026      	str	r6, [r4, #0]
 80075e2:	60a5      	str	r5, [r4, #8]
 80075e4:	463e      	mov	r6, r7
 80075e6:	42be      	cmp	r6, r7
 80075e8:	d900      	bls.n	80075ec <__ssputs_r+0x70>
 80075ea:	463e      	mov	r6, r7
 80075ec:	6820      	ldr	r0, [r4, #0]
 80075ee:	4632      	mov	r2, r6
 80075f0:	4641      	mov	r1, r8
 80075f2:	f000 faab 	bl	8007b4c <memmove>
 80075f6:	68a3      	ldr	r3, [r4, #8]
 80075f8:	1b9b      	subs	r3, r3, r6
 80075fa:	60a3      	str	r3, [r4, #8]
 80075fc:	6823      	ldr	r3, [r4, #0]
 80075fe:	4433      	add	r3, r6
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	2000      	movs	r0, #0
 8007604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007608:	462a      	mov	r2, r5
 800760a:	f000 fac9 	bl	8007ba0 <_realloc_r>
 800760e:	4606      	mov	r6, r0
 8007610:	2800      	cmp	r0, #0
 8007612:	d1e0      	bne.n	80075d6 <__ssputs_r+0x5a>
 8007614:	6921      	ldr	r1, [r4, #16]
 8007616:	4650      	mov	r0, sl
 8007618:	f7ff feb8 	bl	800738c <_free_r>
 800761c:	230c      	movs	r3, #12
 800761e:	f8ca 3000 	str.w	r3, [sl]
 8007622:	89a3      	ldrh	r3, [r4, #12]
 8007624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007628:	81a3      	strh	r3, [r4, #12]
 800762a:	f04f 30ff 	mov.w	r0, #4294967295
 800762e:	e7e9      	b.n	8007604 <__ssputs_r+0x88>

08007630 <_svfiprintf_r>:
 8007630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007634:	4698      	mov	r8, r3
 8007636:	898b      	ldrh	r3, [r1, #12]
 8007638:	061b      	lsls	r3, r3, #24
 800763a:	b09d      	sub	sp, #116	; 0x74
 800763c:	4607      	mov	r7, r0
 800763e:	460d      	mov	r5, r1
 8007640:	4614      	mov	r4, r2
 8007642:	d50e      	bpl.n	8007662 <_svfiprintf_r+0x32>
 8007644:	690b      	ldr	r3, [r1, #16]
 8007646:	b963      	cbnz	r3, 8007662 <_svfiprintf_r+0x32>
 8007648:	2140      	movs	r1, #64	; 0x40
 800764a:	f7ff ff0b 	bl	8007464 <_malloc_r>
 800764e:	6028      	str	r0, [r5, #0]
 8007650:	6128      	str	r0, [r5, #16]
 8007652:	b920      	cbnz	r0, 800765e <_svfiprintf_r+0x2e>
 8007654:	230c      	movs	r3, #12
 8007656:	603b      	str	r3, [r7, #0]
 8007658:	f04f 30ff 	mov.w	r0, #4294967295
 800765c:	e0d0      	b.n	8007800 <_svfiprintf_r+0x1d0>
 800765e:	2340      	movs	r3, #64	; 0x40
 8007660:	616b      	str	r3, [r5, #20]
 8007662:	2300      	movs	r3, #0
 8007664:	9309      	str	r3, [sp, #36]	; 0x24
 8007666:	2320      	movs	r3, #32
 8007668:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800766c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007670:	2330      	movs	r3, #48	; 0x30
 8007672:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007818 <_svfiprintf_r+0x1e8>
 8007676:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800767a:	f04f 0901 	mov.w	r9, #1
 800767e:	4623      	mov	r3, r4
 8007680:	469a      	mov	sl, r3
 8007682:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007686:	b10a      	cbz	r2, 800768c <_svfiprintf_r+0x5c>
 8007688:	2a25      	cmp	r2, #37	; 0x25
 800768a:	d1f9      	bne.n	8007680 <_svfiprintf_r+0x50>
 800768c:	ebba 0b04 	subs.w	fp, sl, r4
 8007690:	d00b      	beq.n	80076aa <_svfiprintf_r+0x7a>
 8007692:	465b      	mov	r3, fp
 8007694:	4622      	mov	r2, r4
 8007696:	4629      	mov	r1, r5
 8007698:	4638      	mov	r0, r7
 800769a:	f7ff ff6f 	bl	800757c <__ssputs_r>
 800769e:	3001      	adds	r0, #1
 80076a0:	f000 80a9 	beq.w	80077f6 <_svfiprintf_r+0x1c6>
 80076a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076a6:	445a      	add	r2, fp
 80076a8:	9209      	str	r2, [sp, #36]	; 0x24
 80076aa:	f89a 3000 	ldrb.w	r3, [sl]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 80a1 	beq.w	80077f6 <_svfiprintf_r+0x1c6>
 80076b4:	2300      	movs	r3, #0
 80076b6:	f04f 32ff 	mov.w	r2, #4294967295
 80076ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076be:	f10a 0a01 	add.w	sl, sl, #1
 80076c2:	9304      	str	r3, [sp, #16]
 80076c4:	9307      	str	r3, [sp, #28]
 80076c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076ca:	931a      	str	r3, [sp, #104]	; 0x68
 80076cc:	4654      	mov	r4, sl
 80076ce:	2205      	movs	r2, #5
 80076d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076d4:	4850      	ldr	r0, [pc, #320]	; (8007818 <_svfiprintf_r+0x1e8>)
 80076d6:	f7f8 fda3 	bl	8000220 <memchr>
 80076da:	9a04      	ldr	r2, [sp, #16]
 80076dc:	b9d8      	cbnz	r0, 8007716 <_svfiprintf_r+0xe6>
 80076de:	06d0      	lsls	r0, r2, #27
 80076e0:	bf44      	itt	mi
 80076e2:	2320      	movmi	r3, #32
 80076e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076e8:	0711      	lsls	r1, r2, #28
 80076ea:	bf44      	itt	mi
 80076ec:	232b      	movmi	r3, #43	; 0x2b
 80076ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076f2:	f89a 3000 	ldrb.w	r3, [sl]
 80076f6:	2b2a      	cmp	r3, #42	; 0x2a
 80076f8:	d015      	beq.n	8007726 <_svfiprintf_r+0xf6>
 80076fa:	9a07      	ldr	r2, [sp, #28]
 80076fc:	4654      	mov	r4, sl
 80076fe:	2000      	movs	r0, #0
 8007700:	f04f 0c0a 	mov.w	ip, #10
 8007704:	4621      	mov	r1, r4
 8007706:	f811 3b01 	ldrb.w	r3, [r1], #1
 800770a:	3b30      	subs	r3, #48	; 0x30
 800770c:	2b09      	cmp	r3, #9
 800770e:	d94d      	bls.n	80077ac <_svfiprintf_r+0x17c>
 8007710:	b1b0      	cbz	r0, 8007740 <_svfiprintf_r+0x110>
 8007712:	9207      	str	r2, [sp, #28]
 8007714:	e014      	b.n	8007740 <_svfiprintf_r+0x110>
 8007716:	eba0 0308 	sub.w	r3, r0, r8
 800771a:	fa09 f303 	lsl.w	r3, r9, r3
 800771e:	4313      	orrs	r3, r2
 8007720:	9304      	str	r3, [sp, #16]
 8007722:	46a2      	mov	sl, r4
 8007724:	e7d2      	b.n	80076cc <_svfiprintf_r+0x9c>
 8007726:	9b03      	ldr	r3, [sp, #12]
 8007728:	1d19      	adds	r1, r3, #4
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	9103      	str	r1, [sp, #12]
 800772e:	2b00      	cmp	r3, #0
 8007730:	bfbb      	ittet	lt
 8007732:	425b      	neglt	r3, r3
 8007734:	f042 0202 	orrlt.w	r2, r2, #2
 8007738:	9307      	strge	r3, [sp, #28]
 800773a:	9307      	strlt	r3, [sp, #28]
 800773c:	bfb8      	it	lt
 800773e:	9204      	strlt	r2, [sp, #16]
 8007740:	7823      	ldrb	r3, [r4, #0]
 8007742:	2b2e      	cmp	r3, #46	; 0x2e
 8007744:	d10c      	bne.n	8007760 <_svfiprintf_r+0x130>
 8007746:	7863      	ldrb	r3, [r4, #1]
 8007748:	2b2a      	cmp	r3, #42	; 0x2a
 800774a:	d134      	bne.n	80077b6 <_svfiprintf_r+0x186>
 800774c:	9b03      	ldr	r3, [sp, #12]
 800774e:	1d1a      	adds	r2, r3, #4
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	9203      	str	r2, [sp, #12]
 8007754:	2b00      	cmp	r3, #0
 8007756:	bfb8      	it	lt
 8007758:	f04f 33ff 	movlt.w	r3, #4294967295
 800775c:	3402      	adds	r4, #2
 800775e:	9305      	str	r3, [sp, #20]
 8007760:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007828 <_svfiprintf_r+0x1f8>
 8007764:	7821      	ldrb	r1, [r4, #0]
 8007766:	2203      	movs	r2, #3
 8007768:	4650      	mov	r0, sl
 800776a:	f7f8 fd59 	bl	8000220 <memchr>
 800776e:	b138      	cbz	r0, 8007780 <_svfiprintf_r+0x150>
 8007770:	9b04      	ldr	r3, [sp, #16]
 8007772:	eba0 000a 	sub.w	r0, r0, sl
 8007776:	2240      	movs	r2, #64	; 0x40
 8007778:	4082      	lsls	r2, r0
 800777a:	4313      	orrs	r3, r2
 800777c:	3401      	adds	r4, #1
 800777e:	9304      	str	r3, [sp, #16]
 8007780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007784:	4825      	ldr	r0, [pc, #148]	; (800781c <_svfiprintf_r+0x1ec>)
 8007786:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800778a:	2206      	movs	r2, #6
 800778c:	f7f8 fd48 	bl	8000220 <memchr>
 8007790:	2800      	cmp	r0, #0
 8007792:	d038      	beq.n	8007806 <_svfiprintf_r+0x1d6>
 8007794:	4b22      	ldr	r3, [pc, #136]	; (8007820 <_svfiprintf_r+0x1f0>)
 8007796:	bb1b      	cbnz	r3, 80077e0 <_svfiprintf_r+0x1b0>
 8007798:	9b03      	ldr	r3, [sp, #12]
 800779a:	3307      	adds	r3, #7
 800779c:	f023 0307 	bic.w	r3, r3, #7
 80077a0:	3308      	adds	r3, #8
 80077a2:	9303      	str	r3, [sp, #12]
 80077a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a6:	4433      	add	r3, r6
 80077a8:	9309      	str	r3, [sp, #36]	; 0x24
 80077aa:	e768      	b.n	800767e <_svfiprintf_r+0x4e>
 80077ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80077b0:	460c      	mov	r4, r1
 80077b2:	2001      	movs	r0, #1
 80077b4:	e7a6      	b.n	8007704 <_svfiprintf_r+0xd4>
 80077b6:	2300      	movs	r3, #0
 80077b8:	3401      	adds	r4, #1
 80077ba:	9305      	str	r3, [sp, #20]
 80077bc:	4619      	mov	r1, r3
 80077be:	f04f 0c0a 	mov.w	ip, #10
 80077c2:	4620      	mov	r0, r4
 80077c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077c8:	3a30      	subs	r2, #48	; 0x30
 80077ca:	2a09      	cmp	r2, #9
 80077cc:	d903      	bls.n	80077d6 <_svfiprintf_r+0x1a6>
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d0c6      	beq.n	8007760 <_svfiprintf_r+0x130>
 80077d2:	9105      	str	r1, [sp, #20]
 80077d4:	e7c4      	b.n	8007760 <_svfiprintf_r+0x130>
 80077d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80077da:	4604      	mov	r4, r0
 80077dc:	2301      	movs	r3, #1
 80077de:	e7f0      	b.n	80077c2 <_svfiprintf_r+0x192>
 80077e0:	ab03      	add	r3, sp, #12
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	462a      	mov	r2, r5
 80077e6:	4b0f      	ldr	r3, [pc, #60]	; (8007824 <_svfiprintf_r+0x1f4>)
 80077e8:	a904      	add	r1, sp, #16
 80077ea:	4638      	mov	r0, r7
 80077ec:	f3af 8000 	nop.w
 80077f0:	1c42      	adds	r2, r0, #1
 80077f2:	4606      	mov	r6, r0
 80077f4:	d1d6      	bne.n	80077a4 <_svfiprintf_r+0x174>
 80077f6:	89ab      	ldrh	r3, [r5, #12]
 80077f8:	065b      	lsls	r3, r3, #25
 80077fa:	f53f af2d 	bmi.w	8007658 <_svfiprintf_r+0x28>
 80077fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007800:	b01d      	add	sp, #116	; 0x74
 8007802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007806:	ab03      	add	r3, sp, #12
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	462a      	mov	r2, r5
 800780c:	4b05      	ldr	r3, [pc, #20]	; (8007824 <_svfiprintf_r+0x1f4>)
 800780e:	a904      	add	r1, sp, #16
 8007810:	4638      	mov	r0, r7
 8007812:	f000 f879 	bl	8007908 <_printf_i>
 8007816:	e7eb      	b.n	80077f0 <_svfiprintf_r+0x1c0>
 8007818:	0800806c 	.word	0x0800806c
 800781c:	08008076 	.word	0x08008076
 8007820:	00000000 	.word	0x00000000
 8007824:	0800757d 	.word	0x0800757d
 8007828:	08008072 	.word	0x08008072

0800782c <_printf_common>:
 800782c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007830:	4616      	mov	r6, r2
 8007832:	4699      	mov	r9, r3
 8007834:	688a      	ldr	r2, [r1, #8]
 8007836:	690b      	ldr	r3, [r1, #16]
 8007838:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800783c:	4293      	cmp	r3, r2
 800783e:	bfb8      	it	lt
 8007840:	4613      	movlt	r3, r2
 8007842:	6033      	str	r3, [r6, #0]
 8007844:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007848:	4607      	mov	r7, r0
 800784a:	460c      	mov	r4, r1
 800784c:	b10a      	cbz	r2, 8007852 <_printf_common+0x26>
 800784e:	3301      	adds	r3, #1
 8007850:	6033      	str	r3, [r6, #0]
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	0699      	lsls	r1, r3, #26
 8007856:	bf42      	ittt	mi
 8007858:	6833      	ldrmi	r3, [r6, #0]
 800785a:	3302      	addmi	r3, #2
 800785c:	6033      	strmi	r3, [r6, #0]
 800785e:	6825      	ldr	r5, [r4, #0]
 8007860:	f015 0506 	ands.w	r5, r5, #6
 8007864:	d106      	bne.n	8007874 <_printf_common+0x48>
 8007866:	f104 0a19 	add.w	sl, r4, #25
 800786a:	68e3      	ldr	r3, [r4, #12]
 800786c:	6832      	ldr	r2, [r6, #0]
 800786e:	1a9b      	subs	r3, r3, r2
 8007870:	42ab      	cmp	r3, r5
 8007872:	dc26      	bgt.n	80078c2 <_printf_common+0x96>
 8007874:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007878:	1e13      	subs	r3, r2, #0
 800787a:	6822      	ldr	r2, [r4, #0]
 800787c:	bf18      	it	ne
 800787e:	2301      	movne	r3, #1
 8007880:	0692      	lsls	r2, r2, #26
 8007882:	d42b      	bmi.n	80078dc <_printf_common+0xb0>
 8007884:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007888:	4649      	mov	r1, r9
 800788a:	4638      	mov	r0, r7
 800788c:	47c0      	blx	r8
 800788e:	3001      	adds	r0, #1
 8007890:	d01e      	beq.n	80078d0 <_printf_common+0xa4>
 8007892:	6823      	ldr	r3, [r4, #0]
 8007894:	6922      	ldr	r2, [r4, #16]
 8007896:	f003 0306 	and.w	r3, r3, #6
 800789a:	2b04      	cmp	r3, #4
 800789c:	bf02      	ittt	eq
 800789e:	68e5      	ldreq	r5, [r4, #12]
 80078a0:	6833      	ldreq	r3, [r6, #0]
 80078a2:	1aed      	subeq	r5, r5, r3
 80078a4:	68a3      	ldr	r3, [r4, #8]
 80078a6:	bf0c      	ite	eq
 80078a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078ac:	2500      	movne	r5, #0
 80078ae:	4293      	cmp	r3, r2
 80078b0:	bfc4      	itt	gt
 80078b2:	1a9b      	subgt	r3, r3, r2
 80078b4:	18ed      	addgt	r5, r5, r3
 80078b6:	2600      	movs	r6, #0
 80078b8:	341a      	adds	r4, #26
 80078ba:	42b5      	cmp	r5, r6
 80078bc:	d11a      	bne.n	80078f4 <_printf_common+0xc8>
 80078be:	2000      	movs	r0, #0
 80078c0:	e008      	b.n	80078d4 <_printf_common+0xa8>
 80078c2:	2301      	movs	r3, #1
 80078c4:	4652      	mov	r2, sl
 80078c6:	4649      	mov	r1, r9
 80078c8:	4638      	mov	r0, r7
 80078ca:	47c0      	blx	r8
 80078cc:	3001      	adds	r0, #1
 80078ce:	d103      	bne.n	80078d8 <_printf_common+0xac>
 80078d0:	f04f 30ff 	mov.w	r0, #4294967295
 80078d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078d8:	3501      	adds	r5, #1
 80078da:	e7c6      	b.n	800786a <_printf_common+0x3e>
 80078dc:	18e1      	adds	r1, r4, r3
 80078de:	1c5a      	adds	r2, r3, #1
 80078e0:	2030      	movs	r0, #48	; 0x30
 80078e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078e6:	4422      	add	r2, r4
 80078e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078f0:	3302      	adds	r3, #2
 80078f2:	e7c7      	b.n	8007884 <_printf_common+0x58>
 80078f4:	2301      	movs	r3, #1
 80078f6:	4622      	mov	r2, r4
 80078f8:	4649      	mov	r1, r9
 80078fa:	4638      	mov	r0, r7
 80078fc:	47c0      	blx	r8
 80078fe:	3001      	adds	r0, #1
 8007900:	d0e6      	beq.n	80078d0 <_printf_common+0xa4>
 8007902:	3601      	adds	r6, #1
 8007904:	e7d9      	b.n	80078ba <_printf_common+0x8e>
	...

08007908 <_printf_i>:
 8007908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800790c:	7e0f      	ldrb	r7, [r1, #24]
 800790e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007910:	2f78      	cmp	r7, #120	; 0x78
 8007912:	4691      	mov	r9, r2
 8007914:	4680      	mov	r8, r0
 8007916:	460c      	mov	r4, r1
 8007918:	469a      	mov	sl, r3
 800791a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800791e:	d807      	bhi.n	8007930 <_printf_i+0x28>
 8007920:	2f62      	cmp	r7, #98	; 0x62
 8007922:	d80a      	bhi.n	800793a <_printf_i+0x32>
 8007924:	2f00      	cmp	r7, #0
 8007926:	f000 80d4 	beq.w	8007ad2 <_printf_i+0x1ca>
 800792a:	2f58      	cmp	r7, #88	; 0x58
 800792c:	f000 80c0 	beq.w	8007ab0 <_printf_i+0x1a8>
 8007930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007934:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007938:	e03a      	b.n	80079b0 <_printf_i+0xa8>
 800793a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800793e:	2b15      	cmp	r3, #21
 8007940:	d8f6      	bhi.n	8007930 <_printf_i+0x28>
 8007942:	a101      	add	r1, pc, #4	; (adr r1, 8007948 <_printf_i+0x40>)
 8007944:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007948:	080079a1 	.word	0x080079a1
 800794c:	080079b5 	.word	0x080079b5
 8007950:	08007931 	.word	0x08007931
 8007954:	08007931 	.word	0x08007931
 8007958:	08007931 	.word	0x08007931
 800795c:	08007931 	.word	0x08007931
 8007960:	080079b5 	.word	0x080079b5
 8007964:	08007931 	.word	0x08007931
 8007968:	08007931 	.word	0x08007931
 800796c:	08007931 	.word	0x08007931
 8007970:	08007931 	.word	0x08007931
 8007974:	08007ab9 	.word	0x08007ab9
 8007978:	080079e1 	.word	0x080079e1
 800797c:	08007a73 	.word	0x08007a73
 8007980:	08007931 	.word	0x08007931
 8007984:	08007931 	.word	0x08007931
 8007988:	08007adb 	.word	0x08007adb
 800798c:	08007931 	.word	0x08007931
 8007990:	080079e1 	.word	0x080079e1
 8007994:	08007931 	.word	0x08007931
 8007998:	08007931 	.word	0x08007931
 800799c:	08007a7b 	.word	0x08007a7b
 80079a0:	682b      	ldr	r3, [r5, #0]
 80079a2:	1d1a      	adds	r2, r3, #4
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	602a      	str	r2, [r5, #0]
 80079a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079b0:	2301      	movs	r3, #1
 80079b2:	e09f      	b.n	8007af4 <_printf_i+0x1ec>
 80079b4:	6820      	ldr	r0, [r4, #0]
 80079b6:	682b      	ldr	r3, [r5, #0]
 80079b8:	0607      	lsls	r7, r0, #24
 80079ba:	f103 0104 	add.w	r1, r3, #4
 80079be:	6029      	str	r1, [r5, #0]
 80079c0:	d501      	bpl.n	80079c6 <_printf_i+0xbe>
 80079c2:	681e      	ldr	r6, [r3, #0]
 80079c4:	e003      	b.n	80079ce <_printf_i+0xc6>
 80079c6:	0646      	lsls	r6, r0, #25
 80079c8:	d5fb      	bpl.n	80079c2 <_printf_i+0xba>
 80079ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80079ce:	2e00      	cmp	r6, #0
 80079d0:	da03      	bge.n	80079da <_printf_i+0xd2>
 80079d2:	232d      	movs	r3, #45	; 0x2d
 80079d4:	4276      	negs	r6, r6
 80079d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079da:	485a      	ldr	r0, [pc, #360]	; (8007b44 <_printf_i+0x23c>)
 80079dc:	230a      	movs	r3, #10
 80079de:	e012      	b.n	8007a06 <_printf_i+0xfe>
 80079e0:	682b      	ldr	r3, [r5, #0]
 80079e2:	6820      	ldr	r0, [r4, #0]
 80079e4:	1d19      	adds	r1, r3, #4
 80079e6:	6029      	str	r1, [r5, #0]
 80079e8:	0605      	lsls	r5, r0, #24
 80079ea:	d501      	bpl.n	80079f0 <_printf_i+0xe8>
 80079ec:	681e      	ldr	r6, [r3, #0]
 80079ee:	e002      	b.n	80079f6 <_printf_i+0xee>
 80079f0:	0641      	lsls	r1, r0, #25
 80079f2:	d5fb      	bpl.n	80079ec <_printf_i+0xe4>
 80079f4:	881e      	ldrh	r6, [r3, #0]
 80079f6:	4853      	ldr	r0, [pc, #332]	; (8007b44 <_printf_i+0x23c>)
 80079f8:	2f6f      	cmp	r7, #111	; 0x6f
 80079fa:	bf0c      	ite	eq
 80079fc:	2308      	moveq	r3, #8
 80079fe:	230a      	movne	r3, #10
 8007a00:	2100      	movs	r1, #0
 8007a02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a06:	6865      	ldr	r5, [r4, #4]
 8007a08:	60a5      	str	r5, [r4, #8]
 8007a0a:	2d00      	cmp	r5, #0
 8007a0c:	bfa2      	ittt	ge
 8007a0e:	6821      	ldrge	r1, [r4, #0]
 8007a10:	f021 0104 	bicge.w	r1, r1, #4
 8007a14:	6021      	strge	r1, [r4, #0]
 8007a16:	b90e      	cbnz	r6, 8007a1c <_printf_i+0x114>
 8007a18:	2d00      	cmp	r5, #0
 8007a1a:	d04b      	beq.n	8007ab4 <_printf_i+0x1ac>
 8007a1c:	4615      	mov	r5, r2
 8007a1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a22:	fb03 6711 	mls	r7, r3, r1, r6
 8007a26:	5dc7      	ldrb	r7, [r0, r7]
 8007a28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a2c:	4637      	mov	r7, r6
 8007a2e:	42bb      	cmp	r3, r7
 8007a30:	460e      	mov	r6, r1
 8007a32:	d9f4      	bls.n	8007a1e <_printf_i+0x116>
 8007a34:	2b08      	cmp	r3, #8
 8007a36:	d10b      	bne.n	8007a50 <_printf_i+0x148>
 8007a38:	6823      	ldr	r3, [r4, #0]
 8007a3a:	07de      	lsls	r6, r3, #31
 8007a3c:	d508      	bpl.n	8007a50 <_printf_i+0x148>
 8007a3e:	6923      	ldr	r3, [r4, #16]
 8007a40:	6861      	ldr	r1, [r4, #4]
 8007a42:	4299      	cmp	r1, r3
 8007a44:	bfde      	ittt	le
 8007a46:	2330      	movle	r3, #48	; 0x30
 8007a48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a50:	1b52      	subs	r2, r2, r5
 8007a52:	6122      	str	r2, [r4, #16]
 8007a54:	f8cd a000 	str.w	sl, [sp]
 8007a58:	464b      	mov	r3, r9
 8007a5a:	aa03      	add	r2, sp, #12
 8007a5c:	4621      	mov	r1, r4
 8007a5e:	4640      	mov	r0, r8
 8007a60:	f7ff fee4 	bl	800782c <_printf_common>
 8007a64:	3001      	adds	r0, #1
 8007a66:	d14a      	bne.n	8007afe <_printf_i+0x1f6>
 8007a68:	f04f 30ff 	mov.w	r0, #4294967295
 8007a6c:	b004      	add	sp, #16
 8007a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	f043 0320 	orr.w	r3, r3, #32
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	4833      	ldr	r0, [pc, #204]	; (8007b48 <_printf_i+0x240>)
 8007a7c:	2778      	movs	r7, #120	; 0x78
 8007a7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007a82:	6823      	ldr	r3, [r4, #0]
 8007a84:	6829      	ldr	r1, [r5, #0]
 8007a86:	061f      	lsls	r7, r3, #24
 8007a88:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a8c:	d402      	bmi.n	8007a94 <_printf_i+0x18c>
 8007a8e:	065f      	lsls	r7, r3, #25
 8007a90:	bf48      	it	mi
 8007a92:	b2b6      	uxthmi	r6, r6
 8007a94:	07df      	lsls	r7, r3, #31
 8007a96:	bf48      	it	mi
 8007a98:	f043 0320 	orrmi.w	r3, r3, #32
 8007a9c:	6029      	str	r1, [r5, #0]
 8007a9e:	bf48      	it	mi
 8007aa0:	6023      	strmi	r3, [r4, #0]
 8007aa2:	b91e      	cbnz	r6, 8007aac <_printf_i+0x1a4>
 8007aa4:	6823      	ldr	r3, [r4, #0]
 8007aa6:	f023 0320 	bic.w	r3, r3, #32
 8007aaa:	6023      	str	r3, [r4, #0]
 8007aac:	2310      	movs	r3, #16
 8007aae:	e7a7      	b.n	8007a00 <_printf_i+0xf8>
 8007ab0:	4824      	ldr	r0, [pc, #144]	; (8007b44 <_printf_i+0x23c>)
 8007ab2:	e7e4      	b.n	8007a7e <_printf_i+0x176>
 8007ab4:	4615      	mov	r5, r2
 8007ab6:	e7bd      	b.n	8007a34 <_printf_i+0x12c>
 8007ab8:	682b      	ldr	r3, [r5, #0]
 8007aba:	6826      	ldr	r6, [r4, #0]
 8007abc:	6961      	ldr	r1, [r4, #20]
 8007abe:	1d18      	adds	r0, r3, #4
 8007ac0:	6028      	str	r0, [r5, #0]
 8007ac2:	0635      	lsls	r5, r6, #24
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	d501      	bpl.n	8007acc <_printf_i+0x1c4>
 8007ac8:	6019      	str	r1, [r3, #0]
 8007aca:	e002      	b.n	8007ad2 <_printf_i+0x1ca>
 8007acc:	0670      	lsls	r0, r6, #25
 8007ace:	d5fb      	bpl.n	8007ac8 <_printf_i+0x1c0>
 8007ad0:	8019      	strh	r1, [r3, #0]
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	6123      	str	r3, [r4, #16]
 8007ad6:	4615      	mov	r5, r2
 8007ad8:	e7bc      	b.n	8007a54 <_printf_i+0x14c>
 8007ada:	682b      	ldr	r3, [r5, #0]
 8007adc:	1d1a      	adds	r2, r3, #4
 8007ade:	602a      	str	r2, [r5, #0]
 8007ae0:	681d      	ldr	r5, [r3, #0]
 8007ae2:	6862      	ldr	r2, [r4, #4]
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	f7f8 fb9a 	bl	8000220 <memchr>
 8007aec:	b108      	cbz	r0, 8007af2 <_printf_i+0x1ea>
 8007aee:	1b40      	subs	r0, r0, r5
 8007af0:	6060      	str	r0, [r4, #4]
 8007af2:	6863      	ldr	r3, [r4, #4]
 8007af4:	6123      	str	r3, [r4, #16]
 8007af6:	2300      	movs	r3, #0
 8007af8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007afc:	e7aa      	b.n	8007a54 <_printf_i+0x14c>
 8007afe:	6923      	ldr	r3, [r4, #16]
 8007b00:	462a      	mov	r2, r5
 8007b02:	4649      	mov	r1, r9
 8007b04:	4640      	mov	r0, r8
 8007b06:	47d0      	blx	sl
 8007b08:	3001      	adds	r0, #1
 8007b0a:	d0ad      	beq.n	8007a68 <_printf_i+0x160>
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	079b      	lsls	r3, r3, #30
 8007b10:	d413      	bmi.n	8007b3a <_printf_i+0x232>
 8007b12:	68e0      	ldr	r0, [r4, #12]
 8007b14:	9b03      	ldr	r3, [sp, #12]
 8007b16:	4298      	cmp	r0, r3
 8007b18:	bfb8      	it	lt
 8007b1a:	4618      	movlt	r0, r3
 8007b1c:	e7a6      	b.n	8007a6c <_printf_i+0x164>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	4632      	mov	r2, r6
 8007b22:	4649      	mov	r1, r9
 8007b24:	4640      	mov	r0, r8
 8007b26:	47d0      	blx	sl
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d09d      	beq.n	8007a68 <_printf_i+0x160>
 8007b2c:	3501      	adds	r5, #1
 8007b2e:	68e3      	ldr	r3, [r4, #12]
 8007b30:	9903      	ldr	r1, [sp, #12]
 8007b32:	1a5b      	subs	r3, r3, r1
 8007b34:	42ab      	cmp	r3, r5
 8007b36:	dcf2      	bgt.n	8007b1e <_printf_i+0x216>
 8007b38:	e7eb      	b.n	8007b12 <_printf_i+0x20a>
 8007b3a:	2500      	movs	r5, #0
 8007b3c:	f104 0619 	add.w	r6, r4, #25
 8007b40:	e7f5      	b.n	8007b2e <_printf_i+0x226>
 8007b42:	bf00      	nop
 8007b44:	0800807d 	.word	0x0800807d
 8007b48:	0800808e 	.word	0x0800808e

08007b4c <memmove>:
 8007b4c:	4288      	cmp	r0, r1
 8007b4e:	b510      	push	{r4, lr}
 8007b50:	eb01 0402 	add.w	r4, r1, r2
 8007b54:	d902      	bls.n	8007b5c <memmove+0x10>
 8007b56:	4284      	cmp	r4, r0
 8007b58:	4623      	mov	r3, r4
 8007b5a:	d807      	bhi.n	8007b6c <memmove+0x20>
 8007b5c:	1e43      	subs	r3, r0, #1
 8007b5e:	42a1      	cmp	r1, r4
 8007b60:	d008      	beq.n	8007b74 <memmove+0x28>
 8007b62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b6a:	e7f8      	b.n	8007b5e <memmove+0x12>
 8007b6c:	4402      	add	r2, r0
 8007b6e:	4601      	mov	r1, r0
 8007b70:	428a      	cmp	r2, r1
 8007b72:	d100      	bne.n	8007b76 <memmove+0x2a>
 8007b74:	bd10      	pop	{r4, pc}
 8007b76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b7e:	e7f7      	b.n	8007b70 <memmove+0x24>

08007b80 <_sbrk_r>:
 8007b80:	b538      	push	{r3, r4, r5, lr}
 8007b82:	4d06      	ldr	r5, [pc, #24]	; (8007b9c <_sbrk_r+0x1c>)
 8007b84:	2300      	movs	r3, #0
 8007b86:	4604      	mov	r4, r0
 8007b88:	4608      	mov	r0, r1
 8007b8a:	602b      	str	r3, [r5, #0]
 8007b8c:	f7fa fb30 	bl	80021f0 <_sbrk>
 8007b90:	1c43      	adds	r3, r0, #1
 8007b92:	d102      	bne.n	8007b9a <_sbrk_r+0x1a>
 8007b94:	682b      	ldr	r3, [r5, #0]
 8007b96:	b103      	cbz	r3, 8007b9a <_sbrk_r+0x1a>
 8007b98:	6023      	str	r3, [r4, #0]
 8007b9a:	bd38      	pop	{r3, r4, r5, pc}
 8007b9c:	2000b3bc 	.word	0x2000b3bc

08007ba0 <_realloc_r>:
 8007ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba4:	4680      	mov	r8, r0
 8007ba6:	4614      	mov	r4, r2
 8007ba8:	460e      	mov	r6, r1
 8007baa:	b921      	cbnz	r1, 8007bb6 <_realloc_r+0x16>
 8007bac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb0:	4611      	mov	r1, r2
 8007bb2:	f7ff bc57 	b.w	8007464 <_malloc_r>
 8007bb6:	b92a      	cbnz	r2, 8007bc4 <_realloc_r+0x24>
 8007bb8:	f7ff fbe8 	bl	800738c <_free_r>
 8007bbc:	4625      	mov	r5, r4
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bc4:	f000 f81b 	bl	8007bfe <_malloc_usable_size_r>
 8007bc8:	4284      	cmp	r4, r0
 8007bca:	4607      	mov	r7, r0
 8007bcc:	d802      	bhi.n	8007bd4 <_realloc_r+0x34>
 8007bce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007bd2:	d812      	bhi.n	8007bfa <_realloc_r+0x5a>
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	4640      	mov	r0, r8
 8007bd8:	f7ff fc44 	bl	8007464 <_malloc_r>
 8007bdc:	4605      	mov	r5, r0
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d0ed      	beq.n	8007bbe <_realloc_r+0x1e>
 8007be2:	42bc      	cmp	r4, r7
 8007be4:	4622      	mov	r2, r4
 8007be6:	4631      	mov	r1, r6
 8007be8:	bf28      	it	cs
 8007bea:	463a      	movcs	r2, r7
 8007bec:	f7ff fbc0 	bl	8007370 <memcpy>
 8007bf0:	4631      	mov	r1, r6
 8007bf2:	4640      	mov	r0, r8
 8007bf4:	f7ff fbca 	bl	800738c <_free_r>
 8007bf8:	e7e1      	b.n	8007bbe <_realloc_r+0x1e>
 8007bfa:	4635      	mov	r5, r6
 8007bfc:	e7df      	b.n	8007bbe <_realloc_r+0x1e>

08007bfe <_malloc_usable_size_r>:
 8007bfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c02:	1f18      	subs	r0, r3, #4
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	bfbc      	itt	lt
 8007c08:	580b      	ldrlt	r3, [r1, r0]
 8007c0a:	18c0      	addlt	r0, r0, r3
 8007c0c:	4770      	bx	lr
	...

08007c10 <_init>:
 8007c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c12:	bf00      	nop
 8007c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c16:	bc08      	pop	{r3}
 8007c18:	469e      	mov	lr, r3
 8007c1a:	4770      	bx	lr

08007c1c <_fini>:
 8007c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1e:	bf00      	nop
 8007c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c22:	bc08      	pop	{r3}
 8007c24:	469e      	mov	lr, r3
 8007c26:	4770      	bx	lr
